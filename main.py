import asyncio
import logging
import random
import aiohttp
import time
import base64
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from typing import Dict, Any, List, Optional
import os
from mistralai import Mistral
import pickle
import json

# =======================
# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
# =======================
mistral_api_key = os.getenv('MISTRAL_API_KEY', 'nIMvGkfioIpMtQeSO2n8ssm6nuJRyo7Q')
openweather_api_key = os.getenv('OPENWEATHER_API_KEY', 'dbd08a834f628d369a8edb55b210171e')
TOKEN = os.getenv('BOT_TOKEN', '8229856813:AAEkQq-4zdJKAmovgq69URcqKDzN4_BMqrw')

ADMIN_ID = 6584350034

# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)
FREE_PERIOD_DAYS = 5

# –¢–∞—Ä–∏—Ñ—ã (—Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –≤ –º–µ—Å—è—Ü)
TARIFFS = {
    "default": {
        "name": "üöÄ Default",
        "days": 30,
        "description": "–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø",
        "features": [
            "‚úÖ 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å",
            "‚úÖ –ü–∞–º—è—Ç—å: 10 —Å–æ–æ–±—â–µ–Ω–∏–π", 
            "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã AI",
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: 5 —Å–µ–∫"
        ],
        "price": "10 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 20,
        "is_free_first": True
    },
    "pro": {
        "name": "‚≠ê Pro", 
        "days": 30,
        "description": "–î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "features": [
            "‚úÖ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å",
            "‚úÖ –ü–∞–º—è—Ç—å: 20 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã AI",
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 3 —Å–µ–∫"
        ],
        "price": "50 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 50,
        "is_free_first": False
    },
    "advanced": {
        "name": "üíé Advanced",
        "days": 30,
        "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "features": [
            "‚úÖ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å", 
            "‚úÖ –ü–∞–º—è—Ç—å: 35 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 2 —Å–µ–∫"
        ],
        "price": "150 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 100,
        "is_free_first": False
    },
    "ultimate": {
        "name": "üëë Ultimate",
        "days": 30, 
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "features": [
            "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
            "‚úÖ –ü–∞–º—è—Ç—å: 100 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 1 —Å–µ–∫",
            "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ],
        "price": "300 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 99999,
        "is_free_first": False
    }
}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
TARIFF_COOLDOWNS = {
    "default": 5,
    "pro": 3,
    "advanced": 2, 
    "ultimate": 1
}

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤
TARIFF_MEMORY = {
    "default": 10,
    "pro": 20,
    "advanced": 35,
    "ultimate": 100
}

model = "mistral-large-latest"
client = Mistral(api_key=mistral_api_key)

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILES = {
    'user_registration_date': 'user_registration_date.pkl',
    'conversation_memory': 'conversation_memory.pkl',
    'chat_style': 'chat_style.pkl',
    'user_requests_count': 'user_requests_count.pkl',
    'user_modes': 'user_modes.pkl',
    'user_tariffs': 'user_tariffs.pkl',
    'user_subscription_end': 'user_subscription_end.pkl',
    'user_daily_requests': 'user_daily_requests.pkl',
    'admin_logs': 'admin_logs.pkl',
    'admin_temp_data': 'admin_temp_data.pkl'
}

# =======================
# ===== –£–õ–£–ß–®–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
# =======================
def load_data(filename: str, default: Any = None) -> Any:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if os.path.exists(filename):
            with open(filename, 'rb') as f:
                data = pickle.load(f)
                if data is not None:
                    return data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        if os.path.exists(filename):
            backup_name = f"{filename}.backup_{int(time.time())}"
            try:
                os.rename(filename, backup_name)
                logging.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_name}")
            except:
                pass
    return default if default is not None else {}

def save_data(data: Any, filename: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        temp_filename = f"{filename}.tmp"
        with open(temp_filename, 'wb') as f:
            pickle.dump(data, f)
        if os.path.exists(filename):
            os.replace(temp_filename, filename)
        else:
            os.rename(temp_filename, filename)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
        try:
            if os.path.exists(temp_filename):
                os.remove(temp_filename)
        except:
            pass

def initialize_user_data(chat_id: int):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    
    if chat_id not in user_modes:
        user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"
        save_data(user_modes, DATA_FILES['user_modes'])
    
    if chat_id not in chat_style:
        chat_style[chat_id] = "balanced"
        save_data(chat_style, DATA_FILES['chat_style'])
    
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {"total": 0, "today": 0}
        save_data(user_requests_count, DATA_FILES['user_requests_count'])
    
    if chat_id not in user_tariffs:
        user_tariffs[chat_id] = "default"
        save_data(user_tariffs, DATA_FILES['user_tariffs'])
    
    if chat_id not in user_subscription_end:
        user_subscription_end[chat_id] = datetime.now() + timedelta(days=FREE_PERIOD_DAYS)
        save_data(user_subscription_end, DATA_FILES['user_subscription_end'])

def increment_user_requests(chat_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    initialize_user_data(chat_id)
    
    user_requests_count[chat_id]["total"] = user_requests_count[chat_id].get("total", 0) + 1
    save_data(user_requests_count, DATA_FILES['user_requests_count'])
    
    increment_daily_requests(chat_id)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_registration_date = load_data(DATA_FILES['user_registration_date'], {})
conversation_memory = load_data(DATA_FILES['conversation_memory'], {})
chat_style = load_data(DATA_FILES['chat_style'], {})
user_requests_count = load_data(DATA_FILES['user_requests_count'], {})
user_modes = load_data(DATA_FILES['user_modes'], {})
user_tariffs = load_data(DATA_FILES['user_tariffs'], {})
user_subscription_end = load_data(DATA_FILES['user_subscription_end'], {})
user_daily_requests = load_data(DATA_FILES['user_daily_requests'], {})
admin_logs = load_data(DATA_FILES['admin_logs'], [])
admin_temp_data = load_data(DATA_FILES['admin_temp_data'], {})

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_last_request: Dict[int, float] = {}
user_thinking_messages: Dict[int, int] = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =======================
# ===== –°–ò–°–¢–ï–ú–ê –¢–ê–†–ò–§–û–í –ò –õ–ò–ú–ò–¢–û–í =====
# =======================
def get_user_tariff(chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id == ADMIN_ID:
        return "ultimate"
    
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return user_tariffs.get(chat_id, "default")
    
    if is_free_period_active(chat_id):
        return "default"
    
    return "default"

def get_user_cooldown(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_COOLDOWNS.get(tariff, 5)

def get_user_memory_limit(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_MEMORY.get(tariff, 10)

def get_user_daily_limit(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    tariff = get_user_tariff(chat_id)
    return TARIFFS[tariff]["daily_limits"]

def get_remaining_daily_requests(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().date()
    daily_data = user_daily_requests.get(chat_id, {})
    if daily_data.get("date") != today:
        return get_user_daily_limit(chat_id)
    return max(0, get_user_daily_limit(chat_id) - daily_data.get("count", 0))

def increment_daily_requests(chat_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    today = datetime.now().date()
    if chat_id not in user_daily_requests or user_daily_requests[chat_id].get("date") != today:
        user_daily_requests[chat_id] = {"date": today, "count": 1}
    else:
        user_daily_requests[chat_id]["count"] += 1
    save_data(user_daily_requests, DATA_FILES['user_daily_requests'])

def is_subscription_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–ª–∏ –ø–ª–∞—Ç–Ω–∞—è)"""
    if chat_id == ADMIN_ID:
        return True
    
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return True
    
    return is_free_period_active(chat_id)

def activate_tariff(chat_id: int, tariff: str, days: int):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_tariffs[chat_id] = tariff
    user_subscription_end[chat_id] = datetime.now() + timedelta(days=days)
    save_data(user_tariffs, DATA_FILES['user_tariffs'])
    save_data(user_subscription_end, DATA_FILES['user_subscription_end'])

def get_remaining_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    if chat_id == ADMIN_ID:
        return 999
    
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return (user_subscription_end[chat_id] - datetime.now()).days
    
    return get_remaining_free_days(chat_id)

def is_free_period_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    if chat_id == ADMIN_ID:
        return True
    
    initialize_user_data(chat_id)
    registration_date = user_registration_date[chat_id]
    days_passed = (datetime.now() - registration_date).days
    return days_passed < FREE_PERIOD_DAYS

def get_remaining_free_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    initialize_user_data(chat_id)
    registration_date = user_registration_date[chat_id]
    days_passed = (datetime.now() - registration_date).days
    return max(0, FREE_PERIOD_DAYS - days_passed)

def can_user_make_request(chat_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
    if not is_subscription_active(chat_id) and chat_id != ADMIN_ID:
        remaining_free = get_remaining_free_days(chat_id)
        if remaining_free <= 0:
            return False, f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤."
        else:
            return True, ""
    
    remaining_requests = get_remaining_daily_requests(chat_id)
    if remaining_requests <= 0:
        current_tariff = get_user_tariff(chat_id)
        daily_limit = TARIFFS[current_tariff]["daily_limits"]
        return False, f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ({daily_limit}/–¥–µ–Ω—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ —Ç–∞—Ä–∏—Ñ."
    
    return True, ""

# =======================
# ===== –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û =====
# =======================
async def process_image_with_instructions(image_bytes: bytes, user_instruction: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        user_instruction_lower = user_instruction.lower()
        
        if any(word in user_instruction_lower for word in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–æ–¥", "translate"]):
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
        elif any(word in user_instruction_lower for word in ["—Å—É–º–º–∞", "—Å—É–º–º–∏—Ä—É–π", "—Å–ª–æ–∂–∏", "–ø–æ—Å—á–∏—Ç–∞–π"]):
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ –≤—Å–µ —á–∏—Å–ª–∞ —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ—Å—á–∏—Ç–∞–π –∏—Ö —Å—É–º–º—É. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è."
        elif any(word in user_instruction_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "—Ä–∞—Å—Å–∫–∞–∂–∏"]):
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –∏–ª–∏ –æ —á–µ–º —Ç–µ–∫—Å—Ç."
        elif any(word in user_instruction_lower for word in ["—É–ø—Ä–æ—Å—Ç–∏", "—Å–æ–∫—Ä–∞—Ç–∏", "–∫—Ä–∞—Ç–∫–æ"]):
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –µ–≥–æ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å."
        else:
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
        
        messages = [
            {
                "role": "user",
                "content": [
                    {
                        "type": "image_url",
                        "image_url": f"data:image/jpeg;base64,{image_base64}"
                    },
                    {
                        "type": "text", 
                        "text": prompt
                    }
                ]
            }
        ]
        
        response = client.chat.complete(
            model="pixtral-12b-2409",
            messages=messages,
            max_tokens=2000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        )
        
        result = response.choices[0].message.content.strip()
        
        if not result or "–Ω–µ –≤–∏–∂—É —Ç–µ–∫—Å—Ç–∞" in result.lower():
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ñ–æ—Ç–æ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        
        return result
        
    except Exception as e:
        logger.error(f"Image processing error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

async def transcribe_audio_with_mistral(audio_bytes: bytes) -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Mistral"""
    try:
        return ("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! \n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")
        
    except Exception as e:
        logger.error(f"Mistral audio processing error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."

# =======================
# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–ì–û–î–´ =====
# =======================
async def get_detailed_weather(city: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    try:
        city_clean = city.strip()
        city_mapping = {
            "–º–æ—Å–∫–≤–∞": "Moscow",
            "–º—Å–∫": "Moscow",
            "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
            "–ø–∏—Ç–µ—Ä": "Saint Petersburg", 
            "—Å–ø–±": "Saint Petersburg",
            "–Ω—å—é-–π–æ—Ä–∫": "New York",
            "–Ω—å—é –π–æ—Ä–∫": "New York",
            "new york": "New York",
            "–ª–æ–Ω–¥–æ–Ω": "London",
            "–ø–∞—Ä–∏–∂": "Paris",
            "–±–µ—Ä–ª–∏–Ω": "Berlin",
            "—Ç–æ–∫–∏–æ": "Tokyo",
            "–¥—É–±–∞–π": "Dubai",
            "—Å–∏–¥–Ω–µ–π": "Sydney",
            "–∫–∞–∑–∞–Ω—å": "Kazan",
            "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
            "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "Yekaterinburg"
        }

        api_city = city_mapping.get(city_clean.lower(), city_clean)
        url = f"http://api.openweathermap.org/data/2.5/weather?q={api_city}&appid={openweather_api_key}&units=metric&lang=ru"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    temp = round(data["main"]["temp"])
                    feels_like = round(data["main"]["feels_like"])
                    humidity = data["main"]["humidity"]
                    pressure = data["main"]["pressure"]
                    wind_speed = data["wind"]["speed"]
                    description = data["weather"][0]["description"]
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞
                    timezone_offset = data["timezone"]
                    sunrise = datetime.fromtimestamp(data["sys"]["sunrise"] + timezone_offset).strftime("%H:%M")
                    sunset = datetime.fromtimestamp(data["sys"]["sunset"] + timezone_offset).strftime("%H:%M")
                    
                    cloudiness = data["clouds"]["all"]
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
                    weather_report = f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city_clean.title()}:\n\n"
                    weather_report += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    weather_report += f"üìù {description.capitalize()}\n"
                    weather_report += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    weather_report += f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n"
                    weather_report += f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
                    weather_report += f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloudiness}%\n"
                    weather_report += f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise}\n"
                    weather_report += f"üåá –ó–∞–∫–∞—Ç: {sunset}\n"
                    
                    # –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    if temp < -10:
                        weather_report += "\n‚ùÑÔ∏è –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –¢–µ–ø–ª–∞—è –æ–¥–µ–∂–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞."
                    elif temp < 0:
                        weather_report += "\nüß• –ú–æ—Ä–æ–∑–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ –∑–∏–º–Ω—é—é –∫—É—Ä—Ç–∫—É –∏ —à–∞–ø–∫—É."
                    elif temp < 10:
                        weather_report += "\nüß£ –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –ö—É—Ä—Ç–∫–∞ –∏ —à–∞—Ä—Ñ –±—É–¥—É—Ç –∫—Å—Ç–∞—Ç–∏."
                    elif temp < 20:
                        weather_report += "\nüëî –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ. –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä."
                    else:
                        weather_report += "\nüòé –¢–µ–ø–ª–æ! –ú–æ–∂–Ω–æ –æ–¥–µ–≤–∞—Ç—å—Å—è –ª–µ–≥–∫–æ."
                    
                    return weather_report
                else:
                    return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city_clean}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
                    
    except Exception as e:
        logger.error(f"Weather API error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# =======================
# ===== –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–í–ï–¢–û–í =====
# =======================
def create_smart_response(text: str, question_type: str = "normal") -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã"""
    
    if not text or len(text.strip()) == 0:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    if question_type == "weather":
        # –ü–æ–≥–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return text
    
    elif question_type == "calculation":
        # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏–µ
        return text
    
    elif question_type == "photo_text":
        # –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º
        if len(text) > 1000:
            # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n\n{text}"
        else:
            return f"üìù {text}"
    
    elif question_type == "simple":
        # –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        if len(text) > 300:
            # –ï—Å–ª–∏ AI –¥–∞–ª –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å, —Å–æ–∫—Ä–∞—â–∞–µ–º
            sentences = text.split('. ')
            if len(sentences) > 1:
                return '. '.join(sentences[:2]) + '.'
        return text
    
    else:
        # –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        return text

def should_use_long_answer(user_question: str, ai_response: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    user_lower = user_question.lower()
    
    # –í–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    long_answer_keywords = [
        "–æ–±—ä—è—Å–Ω–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø–æ—á–µ–º—É", "–≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞",
        "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏", "—Å—Ä–∞–≤–Ω–∏", "–∞–Ω–∞–ª–∏–∑", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
        "–ø–æ–¥—Ä–æ–±–Ω–æ", "–¥–µ—Ç–∞–ª—å–Ω–æ", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ"
    ]
    
    # –í–æ–ø—Ä–æ—Å—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    short_answer_keywords = [
        "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏", "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å", "–∫–∞–∫–∞—è –¥–∞—Ç–∞", "–ø—Ä–∏–≤–µ—Ç", "–ø–æ–∫–∞",
        "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–∫—É—Ä—Å", "–ø–æ–≥–æ–¥–∞", "–ø–æ—Å—á–∏—Ç–∞–π"
    ]
    
    for keyword in long_answer_keywords:
        if keyword in user_lower:
            return True
    
    for keyword in short_answer_keywords:
        if keyword in user_lower:
            return False
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç AI –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if len(ai_response.split()) < 10:
        return False
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞
    return len(ai_response) > 500

# =======================
# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
# =======================
async def send_thinking_message(chat_id: int) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–î—É–º–∞—é...'"""
    message = await bot.send_message(chat_id, "–î—É–º–∞—é...")
    return message.message_id

async def delete_thinking_message(chat_id: int, message_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–î—É–º–∞—é...'"""
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# =======================
# ===== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
# =======================
def add_admin_log(action: str, admin_id: int = ADMIN_ID, target_user: Optional[int] = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "admin_id": admin_id,
        "action": action,
        "target_user": target_user
    }
    admin_logs.append(log_entry)
    if len(admin_logs) > 100:
        admin_logs.pop(0)
    save_data(admin_logs, DATA_FILES['admin_logs'])

def get_main_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"), KeyboardButton(text="üåü –û–±–æ –º–Ω–µ")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞")],
        [KeyboardButton(text="üíé –¢–∞—Ä–∏—Ñ—ã")]
    ]
    
    if chat_id == ADMIN_ID:
        keyboard.append([KeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏"), KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton(text="üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")],
            [KeyboardButton(text="‚öôÔ∏è –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton(text="üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤")],
            [KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="üéØ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_weather_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåÜ –ú–æ—Å–∫–≤–∞"), KeyboardButton(text="üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
            [KeyboardButton(text="üóΩ –ù—å—é-–ô–æ—Ä–∫"), KeyboardButton(text="üåâ –õ–æ–Ω–¥–æ–Ω")],
            [KeyboardButton(text="üóº –ü–∞—Ä–∏–∂"), KeyboardButton(text="üèØ –¢–æ–∫–∏–æ")],
            [KeyboardButton(text="üåÉ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def get_settings_keyboard(): return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üé≠ –†–µ–∂–∏–º—ã AI"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")], [KeyboardButton(text="üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"), KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")], [KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã")], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
def get_tariffs_keyboard(): return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üöÄ Default"), KeyboardButton(text="‚≠ê Pro")], [KeyboardButton(text="üíé Advanced"), KeyboardButton(text="üëë Ultimate")], [KeyboardButton(text="üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ")], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
def get_mode_keyboard(): return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üßò –°–ø–æ–∫–æ–π–Ω—ã–π"), KeyboardButton(text="üí¨ –û–±—ã—á–Ω—ã–π")], [KeyboardButton(text="‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π"), KeyboardButton(text="üß† –£–º–Ω—ã–π")], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
def get_style_keyboard(): return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"), KeyboardButton(text="‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")], [KeyboardButton(text="üéØ –î–µ–ª–æ–≤–æ–π"), KeyboardButton(text="üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π")], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)

# =======================
# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
# =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    initialize_user_data(chat_id)

    current_mode = user_modes[chat_id]
    remaining_days = get_remaining_days(chat_id)
    current_tariff = get_user_tariff(chat_id)
    remaining_requests = get_remaining_daily_requests(chat_id)
    is_free = is_free_period_active(chat_id)
    
    welcome_text = f"ü§ñ GlemixAI\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
    
    if is_free:
        welcome_text += f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {remaining_days} –¥–Ω–µ–π\n"
    else:
        welcome_text += f"üíé –¢–∞—Ä–∏—Ñ: {TARIFFS[current_tariff]['name']}\n"
        welcome_text += f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
    
    welcome_text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}/{TARIFFS[current_tariff]['daily_limits']}\n"
    welcome_text += f"üé≠ –†–µ–∂–∏–º: {current_mode}\n"
    welcome_text += f"üíæ –ü–∞–º—è—Ç—å: {get_user_memory_limit(chat_id)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    welcome_text += f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n\n"
    
    if is_free and remaining_days <= 2:
        welcome_text += "üí° –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.\n\n"
    
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await message.answer(welcome_text, reply_markup=get_main_keyboard(chat_id))

# =======================
# ===== –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û =====
# =======================
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    chat_id = message.chat.id
    
    can_request, error_msg = can_user_make_request(chat_id)
    if not can_request:
        await message.answer(error_msg)
        return
    
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        image_bytes = downloaded_file.read()
        
        user_instruction = message.caption or "–∏–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        result = await process_image_with_instructions(image_bytes, user_instruction)
        
        increment_user_requests(chat_id)
        
        await delete_thinking_message(chat_id, thinking_msg_id)
        
        if result.startswith("‚ùå"):
            await message.answer(result)
        else:
            response = create_smart_response(result, "photo_text")
            await message.answer(response)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            if "–ø–µ—Ä–µ–≤–µ–¥–∏" not in user_instruction.lower() and "–∞–Ω–∞–ª–∏–∑" not in user_instruction.lower():
                help_text = "üìã –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º? –ú–æ–≥—É:\n‚Ä¢ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏\n‚Ä¢ –°—É–º–º–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–∞\n‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç—å\n‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
                await message.answer(help_text)
        
    except Exception as e:
        logger.error(f"Photo processing error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
# =======================
@dp.message(F.voice)
async def handle_voice(message: types.Message):
    chat_id = message.chat.id
    
    can_request, error_msg = can_user_make_request(chat_id)
    if not can_request:
        await message.answer(error_msg)
        return
    
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        voice = message.voice
        file_info = await bot.get_file(voice.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        audio_bytes = downloaded_file.read()
        
        transcribed_text = await transcribe_audio_with_mistral(audio_bytes)
        
        increment_user_requests(chat_id)
        
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer(transcribed_text)
        
    except Exception as e:
        logger.error(f"Voice processing error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("üé§ –ü–æ–ª—É—á–∏–ª–∞ –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, –æ —á–µ–º –±—ã–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

# =======================
# ===== –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ì–û–î–´ =====
# =======================
@dp.message(F.text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞")
async def handle_weather_button(message: types.Message):
    weather_text = "üå§Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞:"
    await message.answer(weather_text, reply_markup=get_weather_keyboard())

@dp.message(F.text.in_(["üåÜ –ú–æ—Å–∫–≤–∞", "üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "üóΩ –ù—å—é-–ô–æ—Ä–∫", "üåâ –õ–æ–Ω–¥–æ–Ω", "üóº –ü–∞—Ä–∏–∂", "üèØ –¢–æ–∫–∏–æ"]))
async def handle_city_weather(message: types.Message):
    city_mapping = {
        "üåÜ –ú–æ—Å–∫–≤–∞": "–ú–æ—Å–∫–≤–∞",
        "üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 
        "üóΩ –ù—å—é-–ô–æ—Ä–∫": "–ù—å—é-–ô–æ—Ä–∫",
        "üåâ –õ–æ–Ω–¥–æ–Ω": "–õ–æ–Ω–¥–æ–Ω",
        "üóº –ü–∞—Ä–∏–∂": "–ü–∞—Ä–∏–∂",
        "üèØ –¢–æ–∫–∏–æ": "–¢–æ–∫–∏–æ"
    }
    
    city = city_mapping.get(message.text, message.text)
    
    thinking_msg_id = await send_thinking_message(message.chat.id)
    
    try:
        weather_info = await get_detailed_weather(city)
        await delete_thinking_message(message.chat.id, thinking_msg_id)
        await message.answer(weather_info)
        increment_user_requests(message.chat.id)
        
    except Exception as e:
        await delete_thinking_message(message.chat.id, thinking_msg_id)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üåÉ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
async def handle_other_city(message: types.Message):
    await message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '–ú–æ—Å–∫–≤–∞'):")

# =======================
# ===== –û–°–ù–û–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====
# =======================
@dp.message()
async def handle_all_messages(message: types.Message):
    chat_id = message.chat.id
    user_text = message.text or ""
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    button_texts = ["üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "üåü –û–±–æ –º–Ω–µ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å", "üå§Ô∏è –ü–æ–≥–æ–¥–∞", "üíé –¢–∞—Ä–∏—Ñ—ã", "üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üåÜ –ú–æ—Å–∫–≤–∞", "üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "üóΩ –ù—å—é-–ô–æ—Ä–∫", "üåâ –õ–æ–Ω–¥–æ–Ω", "üóº –ü–∞—Ä–∏–∂", "üèØ –¢–æ–∫–∏–æ", "üåÉ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"]
    
    if user_text.startswith('/') or user_text in button_texts:
        return
    
    can_request, error_msg = can_user_make_request(chat_id)
    if not can_request:
        await message.answer(error_msg)
        return
    
    current_time = time.time()
    last_request = user_last_request.get(chat_id, 0)
    cooldown = get_user_cooldown(chat_id)
    
    if current_time - last_request < cooldown:
        remaining = cooldown - int(current_time - last_request)
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        return
    
    user_last_request[chat_id] = current_time
    
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        increment_user_requests(chat_id)
        
        user_text_lower = user_text.lower()
        message_type = "normal"
        response_text = ""
        
        # –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
        if any(word in user_text_lower for word in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            city = user_text_lower
            for word in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–≤", "–∫–∞–∫–∞—è", "—Å–µ–π—á–∞—Å"]:
                city = city.replace(word, "")
            city = city.strip(" –≤–Ω–∞")
            
            if city:
                weather_info = await get_detailed_weather(city)
                response_text = weather_info
                message_type = "weather"
            else:
                response_text = "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ')"
                message_type = "weather"
                
        elif "–∫—É—Ä—Å" in user_text_lower or "–≤–∞–ª—é—Ç" in user_text_lower:
            response_text = "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\nUSD ‚Üí 90.5 ‚ÇΩ\nEUR ‚Üí 98.2 ‚ÇΩ\nCNY ‚Üí 12.5 ‚ÇΩ"
            message_type = "currency"
            
        elif any(word in user_text_lower for word in ["–ø–æ—Å—á–∏—Ç–∞–π", "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "=", "calc", "calculate"]):
            try:
                expr = user_text_lower.replace("–ø–æ—Å—á–∏—Ç–∞–π", "").replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "").replace("=", "").replace("calc", "").replace("calculate", "").strip()
                allowed_chars = set('0123456789+-*/.() ')
                if all(c in allowed_chars for c in expr):
                    result = eval(expr)
                    response_text = f"üî¢ {expr} = {result}"
                else:
                    response_text = "‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
                message_type = "calculation"
            except:
                response_text = "‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å"
                message_type = "calculation"
                
        else:
            # AI-–æ—Ç–≤–µ—Ç —Å —É–º–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã
            try:
                if chat_id not in conversation_memory:
                    conversation_memory[chat_id] = []
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
                is_complex_question = should_use_long_answer(user_text, "")
                
                system_prompt = """–¢—ã - GlemixAI, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É."""
                
                if is_complex_question:
                    system_prompt += " –î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏."
                else:
                    system_prompt += " –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç."
                
                messages = [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_text}
                ]
                
                for msg in conversation_memory[chat_id][-3:]:
                    messages.insert(1, msg)
                
                response = client.chat.complete(model=model, messages=messages)
                ai_text = response.choices[0].message.content
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                conversation_memory[chat_id].append({"role": "user", "content": user_text})
                conversation_memory[chat_id].append({"role": "assistant", "content": ai_text})
                
                memory_limit = get_user_memory_limit(chat_id)
                if len(conversation_memory[chat_id]) > memory_limit:
                    conversation_memory[chat_id] = conversation_memory[chat_id][-memory_limit:]
                
                save_data(conversation_memory, DATA_FILES['conversation_memory'])
                response_text = ai_text
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if is_complex_question or len(ai_text.split()) > 100:
                    message_type = "complex"
                else:
                    message_type = "simple"
                
            except Exception as e:
                logger.error(f"AI error: {e}")
                response_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
        await delete_thinking_message(chat_id, thinking_msg_id)
        smart_response = create_smart_response(response_text, message_type)
        await message.answer(smart_response)
        
    except Exception as e:
        logger.error(f"Handler error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)

# =======================
# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
# =======================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ GlemixAI...")
    print("ü§ñ GlemixAI –∑–∞–ø—É—â–µ–Ω!")
    print(f"üíé –¢–∞—Ä–∏—Ñ—ã: {len(TARIFFS)} –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    print(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_registration_date)}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {sum(data.get('total', 0) for data in user_requests_count.values())}")
    print(f"üõ†Ô∏è –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    print("‚úÖ GlemixAI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
