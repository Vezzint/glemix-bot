import asyncio
import logging
import random
import aiohttp
import time
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from typing import Dict, Any, List, Optional
import os
from mistralai import Mistral
import json
import pickle

# =======================
# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
# =======================
mistral_api_key = os.getenv('MISTRAL_API_KEY', 'nIMvGkfioIpMtQeSO2n8ssm6nuJRyo7Q')
openweather_api_key = os.getenv('OPENWEATHER_API_KEY', 'dbd08a834f628d369a8edb55b210171e')
TOKEN = os.getenv('BOT_TOKEN', '8229856813:AAEkQq-4zdJKAmovgq69URcqKDzN4_BMqrw')

ADMIN_ID = 6584350034

# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)
FREE_PERIOD_DAYS = 5

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "default": {
        "name": "üöÄ Default",
        "days": 5,
        "description": "–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º",
        "features": [
            "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã AI",
            "‚úÖ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: 10 —Å–æ–æ–±—â–µ–Ω–∏–π", 
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚úÖ –ü–æ–≥–æ–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
            "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 5 —Å–µ–∫"
        ],
        "price": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    },
    "pro": {
        "name": "‚≠ê Pro", 
        "days": 30,
        "description": "–£–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "features": [
            "‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã AI –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            "‚úÖ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: 20 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 3 —Å–µ–∫",
            "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        ],
        "price": "499 ‚ÇΩ/–º–µ—Å—è—Ü"
    },
    "ultimate": {
        "name": "üëë Ultimate",
        "days": 365, 
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏",
        "features": [
            "‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã AI –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ",
            "‚úÖ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: 50 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤",
            "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 1 —Å–µ–∫",
            "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "üîí –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö",
            "üíé –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        ],
        "price": "3999 ‚ÇΩ/–≥–æ–¥"
    }
}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
TARIFF_COOLDOWNS = {
    "default": 5,
    "pro": 3, 
    "ultimate": 1
}

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
TARIFF_MEMORY = {
    "default": 10,
    "pro": 20,
    "ultimate": 50
}

model = "mistral-large-latest"
client = Mistral(api_key=mistral_api_key)

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILES = {
    'user_registration_date': 'user_registration_date.pkl',
    'conversation_memory': 'conversation_memory.pkl',
    'chat_style': 'chat_style.pkl',
    'user_requests_count': 'user_requests_count.pkl',
    'user_modes': 'user_modes.pkl',
    'user_tariffs': 'user_tariffs.pkl',
    'user_subscription_end': 'user_subscription_end.pkl'
}

# =======================
# ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
# =======================
def load_data(filename: str, default: Any = None) -> Any:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, 'rb') as f:
                return pickle.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    return default if default is not None else {}

def save_data(data: Any, filename: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, 'wb') as f:
            pickle.dump(data, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

def save_all_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
    for filename, data_key in [
        (DATA_FILES['user_registration_date'], user_registration_date),
        (DATA_FILES['conversation_memory'], conversation_memory),
        (DATA_FILES['chat_style'], chat_style),
        (DATA_FILES['user_requests_count'], user_requests_count),
        (DATA_FILES['user_modes'], user_modes),
        (DATA_FILES['user_tariffs'], user_tariffs),
        (DATA_FILES['user_subscription_end'], user_subscription_end)
    ]:
        save_data(data_key, filename)

def load_all_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
    global user_registration_date, conversation_memory, chat_style, user_requests_count
    global user_modes, user_tariffs, user_subscription_end
    
    user_registration_date = load_data(DATA_FILES['user_registration_date'], {})
    conversation_memory = load_data(DATA_FILES['conversation_memory'], {})
    chat_style = load_data(DATA_FILES['chat_style'], {})
    user_requests_count = load_data(DATA_FILES['user_requests_count'], {})
    user_modes = load_data(DATA_FILES['user_modes'], {})
    user_tariffs = load_data(DATA_FILES['user_tariffs'], {})
    user_subscription_end = load_data(DATA_FILES['user_subscription_end'], {})

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_all_data()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
user_last_request: Dict[int, float] = {}
user_last_messages: Dict[int, str] = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =======================
# ===== –°–ò–°–¢–ï–ú–ê –¢–ê–†–ò–§–û–í =====
# =======================
def get_user_tariff(chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id == ADMIN_ID:
        return "ultimate"  # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return user_tariffs.get(chat_id, "default")
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if is_free_period_active(chat_id):
        return "default"
    
    return "default"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

def get_user_cooldown(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_COOLDOWNS.get(tariff, 5)

def get_user_memory_limit(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_MEMORY.get(tariff, 10)

def is_subscription_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞"""
    if chat_id == ADMIN_ID:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    return is_free_period_active(chat_id)

def activate_tariff(chat_id: int, tariff: str, days: int):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_tariffs[chat_id] = tariff
    user_subscription_end[chat_id] = datetime.now() + timedelta(days=days)
    save_data(user_tariffs, DATA_FILES['user_tariffs'])
    save_data(user_subscription_end, DATA_FILES['user_subscription_end'])

def get_remaining_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    if chat_id == ADMIN_ID:
        return 999
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return (user_subscription_end[chat_id] - datetime.now()).days
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    return get_remaining_free_days(chat_id)

# =======================
# ===== –≠–ú–û–î–ó–ò ==========
# =======================
emojis = {
    "friendly": ["üí´", "‚ú®", "üåü", "üéà", "ü§ó", "üíù", "üéä", "üíå"],
    "serious": ["üéØ", "üìä", "üíº", "üîç", "üìà", "üéì", "üí°", "‚öñÔ∏è"],
    "balanced": ["üíé", "üé®", "üîÆ", "üí≠", "üåà", "ü¶ã", "üå∏", "üå†"],
    "creative": ["üé≠", "üñåÔ∏è", "üé™", "üé∏", "üì∏", "üé¨", "üéÆ", "üß©"]
}

def get_emoji(style: str = "balanced") -> str:
    return random.choice(emojis.get(style, emojis["balanced"]))

# =======================
# ===== –°–û–í–†–ï–ú–ï–ù–ù–´–ô –°–õ–ï–ù–ì =====
# =======================
MODERN_SLANG = {
    "–∏–º–±–∞": "–æ—Ç–ª–∏—á–Ω–æ, –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ, –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ",
    "–∫—Ä–∞—à": "—Å–∏–º–ø–∞—Ç–∏—è, –≤–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç—å, –æ–±—ä–µ–∫—Ç –≤–æ–∑–¥—ã—Ö–∞–Ω–∏–π", 
    "—á–∏–ª–ª–µ—Ä–∏—Ç—å": "—Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è, –æ—Ç–¥—ã—Ö–∞—Ç—å",
    "—Ö–∞–π–ø–∏—Ç—å": "–±—ã—Ç—å –Ω–∞ –≤–æ–ª–Ω–µ, –±—ã—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º",
    "—Ä–æ—Ñ–ª–∏—Ç—å": "—à—É—Ç–∏—Ç—å, —Å–º–µ—è—Ç—å—Å—è",
    "–∫—Ä–∏–Ω–∂": "—Å—Ç—ã–¥, –Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å",
    "–∞–≥—Ä–∏—Ç—å—Å—è": "–∑–ª–∏—Ç—å—Å—è, —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å—Å—è",
    "–≤–∞–π–±": "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
    "—Å–∞—Å–Ω—ã–π": "–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π, —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–π",
    "–ø—Ä—É—Ñ—ã": "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
    "facepalm": "–∂–µ—Å—Ç —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏—è",
    "—á–∏–∫—Å–∞": "–¥–µ–≤—É—à–∫–∞",
    "—á–∏–ª–∞—Ç—å": "–æ—Ç–¥—ã—Ö–∞—Ç—å, —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è",
    "–ª–æ–º–∫–∞": "—Å–∏–ª—å–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ",
    "—Ö–µ–π—Ç–µ—Ä": "–Ω–µ–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å",
    "–ª–∞–π–∫": "–Ω—Ä–∞–≤–∏—Ç—Å—è",
    "–¥–∏–º–ø—Å–∏": "–≥–ª—É–±–æ–∫–∏–µ, –¥—É—à–µ–≤–Ω—ã–µ –º—ã—Å–ª–∏",
    "–∫—É": "–ø—Ä–∏–≤–µ—Ç",
    "—á–∏–Ω–∞–∑–µ—Å": "–∫–∏—Ç–∞–π—Ü—ã",
    "–≥–æ": "–¥–∞–≤–∞–π, –ø–æ–µ—Ö–∞–ª–∏",
    "–Ω–æ—É –ø—Ä–æ–±–ª–µ–º—Å": "–±–µ–∑ –ø—Ä–æ–±–ª–µ–º",
    "–æ–∫–µ–π": "—Ö–æ—Ä–æ—à–æ, —Å–æ–≥–ª–∞—Å–µ–Ω",
    "–æ–∫": "—Ö–æ—Ä–æ—à–æ",
    "–∞–≥—É": "–ø–æ–Ω–∏–º–∞—é",
    "—Ä–µ—Å–ø–µ–∫—Ç": "—É–≤–∞–∂–µ–Ω–∏–µ",
    "–∂–∏–∑–∞": "–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
    "–ø–æ–∂": "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
    "—Å–ø—Å": "—Å–ø–∞—Å–∏–±–æ",
    "–ø–ª–∏–∑": "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
    "–æ–º–≥": "–æ–π –±–æ–∂–µ",
    "–±—Ä–æ": "–¥—Ä—É–≥, –±—Ä–∞—Ç",
    "—Å–∏–∂–∫–∞": "—Å–∏–≥–∞—Ä–µ—Ç–∞",
    "–±—É—Å—Ç": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ, —É–ª—É—á—à–µ–Ω–∏–µ",
    "—Ñ–ª–µ–∫—Å": "—Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–æ",
    "ghosting": "–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"
}

# =======================
# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
# =======================
def get_main_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    buttons = [[
        KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        KeyboardButton(text="üåü –û–±–æ –º–Ω–µ")
    ],
               [
                   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                   KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
                   KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞")
               ]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    buttons.append([KeyboardButton(text="üíé –¢–∞—Ä–∏—Ñ—ã")])
    
    if chat_id == ADMIN_ID:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons,
                               resize_keyboard=True,
                               input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")

def get_settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üé≠ –†–µ–∂–∏–º—ã AI"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ], [
        KeyboardButton(text="üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"),
        KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    ], [
        KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
        KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_tariffs_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üöÄ Default"),
        KeyboardButton(text="‚≠ê Pro")
    ], [
        KeyboardButton(text="üëë Ultimate"),
        KeyboardButton(text="üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ")
    ], [
        KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    ]], resize_keyboard=True)

def get_mode_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üßò –°–ø–æ–∫–æ–π–Ω—ã–π"),
            KeyboardButton(text="üí¨ –û–±—ã—á–Ω—ã–π")
        ],
                  [
                      KeyboardButton(text="‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π"),
                      KeyboardButton(text="üß† –£–º–Ω—ã–π")
                  ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True)

def get_style_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"),
        KeyboardButton(text="‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
    ], [
        KeyboardButton(text="üéØ –î–µ–ª–æ–≤–æ–π"),
        KeyboardButton(text="üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_weather_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üèôÔ∏è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"),
        KeyboardButton(text="üèõÔ∏è –ú–æ—Å–∫–≤–∞")
    ], [
        KeyboardButton(text="üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
        KeyboardButton(text="üìç –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_quick_commands_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"),
        KeyboardButton(text="üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä")
    ], [
        KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞"),
        KeyboardButton(text="‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
    ], [
        KeyboardButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
        KeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    ], [
        KeyboardButton(text="üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤"),
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    ], [
        KeyboardButton(text="üéØ –¢–µ—Å—Ç AI"),
        KeyboardButton(text="üìä –õ–æ–≥–∏")
    ], [
        KeyboardButton(text="üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é"),
        KeyboardButton(text="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                               resize_keyboard=True)

def get_users_management_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        KeyboardButton(text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
    ], [
        KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        KeyboardButton(text="üìù –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]],
                               resize_keyboard=True)

def get_memory_management_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏")
    ], [
        KeyboardButton(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–º—è—Ç–∏"),
        KeyboardButton(text="‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]],
                               resize_keyboard=True)

def get_tariff_management_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üöÄ –í—ã–¥–∞—Ç—å Default"),
        KeyboardButton(text="‚≠ê –í—ã–¥–∞—Ç—å Pro")
    ], [
        KeyboardButton(text="üëë –í—ã–¥–∞—Ç—å Ultimate"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤")
    ], [
        KeyboardButton(text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ"),
        KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]],
                               resize_keyboard=True)

# =======================
# ===== –§–£–ù–ö–¶–ò–ò –ü–ê–ú–Ø–¢–ò =====
# =======================
def add_to_conversation_memory(chat_id: int, role: str, content: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞"""
    if chat_id not in conversation_memory:
        conversation_memory[chat_id] = []
    
    conversation_memory[chat_id].append({"role": role, "content": content})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Ç–∞—Ä–∏—Ñ—É
    memory_limit = get_user_memory_limit(chat_id)
    if len(conversation_memory[chat_id]) > memory_limit:
        conversation_memory[chat_id] = conversation_memory[chat_id][-memory_limit:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_data(conversation_memory, DATA_FILES['conversation_memory'])

def get_conversation_context(chat_id: int) -> List[Dict[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
    return conversation_memory.get(chat_id, [])

def clear_conversation_memory(chat_id: int):
    """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞"""
    if chat_id in conversation_memory:
        conversation_memory[chat_id] = []
        save_data(conversation_memory, DATA_FILES['conversation_memory'])

def get_memory_stats() -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏"""
    total_users = len(conversation_memory)
    total_messages = sum(len(messages) for messages in conversation_memory.values())
    avg_messages = total_messages / total_users if total_users > 0 else 0
    
    return {
        "total_users": total_users,
        "total_messages": total_messages,
        "avg_messages": round(avg_messages, 2),
        "memory_size": total_messages * 100  # –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
    }

# =======================
# ===== –§–£–ù–ö–¶–ò–ò –õ–ò–ú–ò–¢–û–í =====
# =======================
def get_mode_description(mode: str) -> str:
    descriptions = {
        "—Å–ø–æ–∫–æ–π–Ω—ã–π": "üßò –°–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º",
        "–æ–±—ã—á–Ω—ã–π": "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", 
        "–∫–æ—Ä–æ—Ç–∫–∏–π": "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∂–∏–º",
        "—É–º–Ω—ã–π": "üß† –£–º–Ω—ã–π —Ä–µ–∂–∏–º"
    }
    return descriptions.get(mode, "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")

def is_free_period_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    if chat_id == ADMIN_ID:
        return True
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    registration_date = user_registration_date[chat_id]
    return (datetime.now() - registration_date).days < FREE_PERIOD_DAYS

def get_remaining_free_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    registration_date = user_registration_date[chat_id]
    days_passed = (datetime.now() - registration_date).days
    return max(0, FREE_PERIOD_DAYS - days_passed)

def get_user_remaining_requests(chat_id: int, mode: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if chat_id == ADMIN_ID:
        return 9999  # –ê–¥–º–∏–Ω –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    
    if not is_subscription_active(chat_id):
        return 0  # –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        
    return 9999  # –ë–µ–∑–ª–∏–º–∏—Ç –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ

# =======================
# ===== –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –û–ñ–ò–î–ê–ù–ò–Ø =====
# =======================
def check_cooldown(chat_id: int) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    if chat_id == ADMIN_ID:
        return None  # –ê–¥–º–∏–Ω—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        
    current_time = time.time()
    last_request = user_last_request.get(chat_id, 0)
    
    cooldown = get_user_cooldown(chat_id)
    
    if current_time - last_request < cooldown:
        remaining = cooldown - int(current_time - last_request)
        return f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
    
    user_last_request[chat_id] = current_time
    return None

# =======================
# ===== –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê =====
# =======================
def should_use_full_response(user_text: str, ai_response: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π"""
    user_lower = user_text.lower()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    if user_lower.count('?') >= 2:
        return True
    
    # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∏–ª–∏ —Å–ø–∏—Å–∫–∏
    if any(marker in ai_response for marker in ['\n‚Ä¢', '\n-', '\n1.', '\n2.', '\n3.', '–í–æ-–ø–µ—Ä–≤—ã—Ö', '–í–æ-–≤—Ç–æ—Ä—ã—Ö', '–í-—Ç—Ä–µ—Ç—å–∏—Ö']):
        return True
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
    if any(phrase in user_lower for phrase in ['–ø–æ–¥—Ä–æ–±–Ω–æ', '–ø–æ–¥—Ä–æ–±–Ω—ã–π', '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ', '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ']):
        return True
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if any(phrase in user_lower for phrase in ['—Ç–∞–∫–∂–µ', '–µ—â–µ –≤–æ–ø—Ä–æ—Å', '—Ç–∞–∫–∂–µ –≤–æ–ø—Ä–æ—Å', '–∏ –µ—â–µ', '–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ']):
        return True
    
    return False

def process_ai_response(text: str, mode: str, user_text: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç AI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    if should_use_full_response(user_text, text):
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ä–µ–∂–∏–º–∞–º
    if mode == "–∫–æ—Ä–æ—Ç–∫–∏–π":
        sentences = text.split('. ')
        if len(sentences) > 2:
            text = '. '.join(sentences[:2]) + '.'
        if len(text) > 400:
            text = text[:400] + '...'
    elif mode == "—Å–ø–æ–∫–æ–π–Ω—ã–π":
        sentences = text.split('. ')
        if len(sentences) > 4:
            text = '. '.join(sentences[:4]) + '.'
        if len(text) > 600:
            text = text[:600] + '...'
    elif mode == "–æ–±—ã—á–Ω—ã–π":
        sentences = text.split('. ')
        if len(sentences) > 5:
            text = '. '.join(sentences[:5]) + '.'
        if len(text) > 800:
            text = text[:800] + '...'
    elif mode == "—É–º–Ω—ã–π":
        sentences = text.split('. ')
        if len(sentences) > 6:
            text = '. '.join(sentences[:6]) + '.'
        if len(text) > 1000:
            text = text[:1000] + '...'
    
    return text

def format_ai_response(text: str, style: str, mode: str, user_text: str) -> str:
    emoji = get_emoji(style)
    formatted = process_ai_response(text, mode, user_text)

    if mode == "—Å–ø–æ–∫–æ–π–Ω—ã–π":
        calm_emojis = ["üåø", "üçÉ", "üåº", "üå∏", "üíÆ", "ü™∑"]
        if random.random() > 0.7:
            formatted = f"{random.choice(calm_emojis)} {formatted}"

    return f"{emoji} {formatted}"

async def send_long_message(message: types.Message, text: str, style: str = "balanced", mode: str = "–æ–±—ã—á–Ω—ã–π", user_text: str = "", chunk_size: int = 4000):
    formatted = format_ai_response(text, style, mode, user_text)
    for i in range(0, len(formatted), chunk_size):
        try:
            await message.answer(formatted[i:i + chunk_size])
        except TelegramBadRequest:
            await message.answer(text[i:i + chunk_size])

# =======================
# ===== –ü–û–ì–û–î–ê =====
# =======================
async def get_weather(city: str) -> str:
    city_clean = city.strip()
    if not city_clean:
        return "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"

    city_mapping = {
        "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
        "–º–æ—Å–∫–≤–∞": "Moscow", 
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
        "—Å–ø–±": "Saint Petersburg",
        "–ø–∏—Ç–µ—Ä": "Saint Petersburg"
    }

    api_city = city_mapping.get(city_clean.lower(), city_clean)

    url = f"http://api.openweathermap.org/data/2.5/weather?q={api_city}&appid={openweather_api_key}&units=metric&lang=ru"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return f"üå´Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city_clean}'\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"
                data = await resp.json()
                temp = data["main"]["temp"]
                feels = data["main"]["feels_like"]
                desc = data["weather"][0]["description"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                return (f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city_clean.title()}\n\n"
                        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels}¬∞C\n"
                        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return f"üå™Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city_clean}'"

# =======================
# ===== –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ =====
# =======================
async def get_currency_rate() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('https://api.exchangerate-api.com/v4/latest/USD') as resp:
                if resp.status == 200:
                    data = await resp.json()
                    usd_rub = data['rates']['RUB']
                    eur_rub = usd_rub / data['rates']['EUR']
                    return (f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç:\n\n"
                           f"‚Ä¢ üá∫üá∏ USD ‚Üí RUB: {usd_rub:.2f} ‚ÇΩ\n"
                           f"‚Ä¢ üá™üá∫ EUR ‚Üí RUB: {eur_rub:.2f} ‚ÇΩ\n"
                           f"‚Ä¢ üá∑üá∫ RUB ‚Üí USD: {1/usd_rub:.4f} $")
    except:
        return "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

def get_random_choice(options: str) -> str:
    """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    if not options:
        return "üéØ –ù–∞–ø–∏—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
    
    items = [item.strip() for item in options.split(',')]
    if len(items) < 2:
        return "üéØ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    
    chosen = random.choice(items)
    return f"üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä: *{chosen}*"

def get_current_datetime() -> str:
    """–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"""
    now = datetime.now()
    return (f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:\n\n"
           f"‚Ä¢ –î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}\n"
           f"‚Ä¢ –í—Ä–µ–º—è: {now.strftime('%H:%M:%S')}\n"
           f"‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å'][now.weekday()]}")

def calculate_expression(expr: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        expr = expr.replace(' ', '').replace('^', '**')
        allowed_chars = set('0123456789+-*/.() ')
        if not all(c in allowed_chars for c in expr):
            return "üî¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ + - * / . ( )"
        
        result = eval(expr)
        return f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}"
    except:
        return "üî¢ –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏"

def get_random_surprise() -> str:
    """–°–ª—É—á–∞–π–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑"""
    surprises = [
        "üéÅ –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –¥–µ–Ω—å!",
        "üí´ –í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è —Ç–µ–±—è –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑",
        "üåü –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ",
        "üéØ –°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π",
        "üíù –ü–æ–º–Ω–∏: —Ç—ã —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –æ—Å–æ–±–µ–Ω–Ω—ã–π",
        "üåà –ó–∞ –∫–∞–∂–¥–æ–π —Ç—É—á–µ–π —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ä–∞–¥—É–≥–∞",
        "ü¶ã –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—ã–ª—å—è –∏ –ª–µ—Ç–µ—Ç—å"
    ]
    return random.choice(surprises)

# =======================
# ===== –ö–û–ú–ê–ù–î–´ =========
# =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in chat_style:
        chat_style[chat_id] = "balanced"
        save_data(chat_style, DATA_FILES['chat_style'])
    
    if chat_id not in user_modes:
        user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"
        save_data(user_modes, DATA_FILES['user_modes'])

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])

    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
        for mode in ["—Å–ø–æ–∫–æ–π–Ω—ã–π", "–æ–±—ã—á–Ω—ã–π", "–∫–æ—Ä–æ—Ç–∫–∏–π", "—É–º–Ω—ã–π"]:
            user_requests_count[chat_id][mode] = 0
        save_data(user_requests_count, DATA_FILES['user_requests_count'])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
    if chat_id not in conversation_memory:
        conversation_memory[chat_id] = []
        save_data(conversation_memory, DATA_FILES['conversation_memory'])

    current_mode = user_modes[chat_id]
    remaining_days = get_remaining_days(chat_id)
    current_tariff = get_user_tariff(chat_id)
    
    welcome_text = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n\n"
        f"üíé *–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ:* {TARIFFS[current_tariff]['name']}\n"
        f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
        f"üé≠ –†–µ–∂–∏–º: {get_mode_description(current_mode)}\n"
        f"üíæ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: {get_user_memory_limit(chat_id)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ üëá")

    await message.answer(welcome_text,
                         reply_markup=get_main_keyboard(chat_id))

@dp.message(F.text == "üíé –¢–∞—Ä–∏—Ñ—ã")
async def handle_tariffs(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    tariffs_text = "üíé **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã**\n\n"
    
    for tariff_key, tariff_info in TARIFFS.items():
        tariffs_text += f"{tariff_info['name']}\n"
        tariffs_text += f"*{tariff_info['description']}*\n"
        tariffs_text += f"–°—Ä–æ–∫: {tariff_info['days']} –¥–Ω–µ–π\n"
        tariffs_text += f"–¶–µ–Ω–∞: {tariff_info['price']}\n\n"
        
        for feature in tariff_info['features']:
            tariffs_text += f"{feature}\n"
        
        tariffs_text += "\n" + "‚îÄ" * 30 + "\n\n"
    
    tariffs_text += "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ üëá"
    
    await message.answer(tariffs_text,
                         reply_markup=get_tariffs_keyboard())

@dp.message(F.text == "üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ")
async def handle_my_tariff(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    current_tariff = get_user_tariff(chat_id)
    remaining_days = get_remaining_days(chat_id)
    tariff_info = TARIFFS[current_tariff]
    
    my_tariff_text = (
        f"üíé **–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ**\n\n"
        f"{tariff_info['name']}\n"
        f"*{tariff_info['description']}*\n\n"
        f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
        f"üíæ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {get_user_memory_limit(chat_id)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {get_user_cooldown(chat_id)} —Å–µ–∫\n\n"
        f"**–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n")
    
    for feature in tariff_info['features']:
        my_tariff_text += f"{feature}\n"
    
    if current_tariff == "default":
        my_tariff_text += "\nüí° *–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Pro –∏–ª–∏ Ultimate —Ç–∞—Ä–∏—Ñ!*"
    
    await message.answer(my_tariff_text)

@dp.message(F.text.in_(["üöÄ Default", "‚≠ê Pro", "üëë Ultimate"]))
async def handle_tariff_info(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    tariff_mapping = {
        "üöÄ Default": "default",
        "‚≠ê Pro": "pro", 
        "üëë Ultimate": "ultimate"
    }
    
    tariff_key = tariff_mapping.get(message.text, "default")
    tariff_info = TARIFFS[tariff_key]
    
    tariff_text = (
        f"{tariff_info['name']}\n"
        f"*{tariff_info['description']}*\n\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {tariff_info['days']} –¥–Ω–µ–π\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff_info['price']}\n\n"
        f"**–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n")
    
    for feature in tariff_info['features']:
        tariff_text += f"{feature}\n"
    
    tariff_text += f"\nüíé *–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É*"
    
    await message.answer(tariff_text)

@dp.message(F.text.in_(["üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "üöÄ –°—Ç–∞—Ä—Ç"]))
async def handle_start_button(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return
    await cmd_start(message)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ —Ç–µ—Ö —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç get_remaining_free_days - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ get_remaining_days)

@dp.message(F.text == "üåü –û–±–æ –º–Ω–µ")
async def handle_about(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    about_text = (
        "ü§ñ –ú–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç\n\n"
        "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ú–Ω–æ–≥–æ—Ä–µ–∂–∏–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É—Ç–∏–ª–∏—Ç—ã\n"
        "‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–µ–Ω–≥–∞\n"
        "‚Ä¢ –ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–∏—Ñ–æ–≤\n\n"
        "üíé **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**\n"
        "‚Ä¢ üöÄ Default - –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n" 
        "‚Ä¢ ‚≠ê Pro - —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
        "‚Ä¢ üëë Ultimate - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç")
    
    await message.answer(about_text,
                         reply_markup=get_main_keyboard(message.chat.id))

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
    used = user_requests_count.get(chat_id, {}).get(current_mode, 0)
    remaining_days = get_remaining_days(chat_id)
    memory_count = len(conversation_memory.get(chat_id, []))
    current_tariff = get_user_tariff(chat_id)
    memory_limit = get_user_memory_limit(chat_id)
    
    stats_text = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"üíé –¢–∞—Ä–∏—Ñ: {TARIFFS[current_tariff]['name']}\n"
        f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
        f"üé≠ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}\n"
        f"üì® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {used}\n"
        f"üíæ –ü–∞–º—è—Ç—å: {memory_count}/{memory_limit} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if is_subscription_active(chat_id) else '‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω'}")
    
    await message.answer(stats_text)

# =======================
# ===== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–†–ò–§–ê–ú–ò =====
# =======================
@dp.message(F.text == "üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")
async def handle_tariff_management(message: types.Message):
    if message.chat.id != ADMIN_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
        
    tariff_text = (
        "üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –í—ã–¥–∞—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º")
    
    await message.answer(tariff_text,
                         reply_markup=get_tariff_management_keyboard())

@dp.message(F.text.in_(["üöÄ –í—ã–¥–∞—Ç—å Default", "‚≠ê –í—ã–¥–∞—Ç—å Pro", "üëë –í—ã–¥–∞—Ç—å Ultimate"]))
async def handle_give_tariff(message: types.Message):
    if message.chat.id != ADMIN_ID:
        return
        
    tariff_mapping = {
        "üöÄ –í—ã–¥–∞—Ç—å Default": "default",
        "‚≠ê –í—ã–¥–∞—Ç—å Pro": "pro",
        "üëë –í—ã–¥–∞—Ç—å Ultimate": "ultimate"
    }
    
    tariff_key = tariff_mapping.get(message.text, "default")
    tariff_info = TARIFFS[tariff_key]
    
    await message.answer(
        f"üíé –í—ã–¥–∞—á–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_info['name']}\n\n"
        f"–î–ª—è –≤—ã–¥–∞—á–∏ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        f"/givetariff [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–¥–Ω–∏]\n\n"
        f"–ü—Ä–∏–º–µ—Ä: /givetariff 123456789 {tariff_info['days']}\n\n"
        f"–¢–∞—Ä–∏—Ñ: {tariff_info['name']}\n"
        f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫: {tariff_info['days']} –¥–Ω–µ–π")

@dp.message(Command("givetariff"))
async def handle_give_tariff_command(message: types.Message):
    if message.chat.id != ADMIN_ID:
        return
        
    try:
        parts = message.text.split()
        if len(parts) == 3:
            user_id = int(parts[1])
            days = int(parts[2])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π
            if days <= 7:
                tariff = "default"
            elif days <= 30:
                tariff = "pro"
            else:
                tariff = "ultimate"
            
            activate_tariff(user_id, tariff, days)
            
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω —Ç–∞—Ä–∏—Ñ {TARIFFS[tariff]['name']}\n"
                f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
                f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {user_subscription_end[user_id].strftime('%d.%m.%Y %H:%M')}")
                
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /givetariff [ID] [–¥–Ω–∏]")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤")
async def handle_tariff_stats(message: types.Message):
    if message.chat.id != ADMIN_ID:
        return
        
    tariff_stats = {"default": 0, "pro": 0, "ultimate": 0}
    active_users = 0
    
    for user_id in user_tariffs:
        if is_subscription_active(user_id):
            tariff = user_tariffs[user_id]
            tariff_stats[tariff] += 1
            active_users += 1
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤\n\n"
        f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n\n"
        f"üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º:\n"
        f"‚Ä¢ üöÄ Default: {tariff_stats['default']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ ‚≠ê Pro: {tariff_stats['pro']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ üëë Ultimate: {tariff_stats['ultimate']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"üíé –í—Å–µ–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤ –≤—ã–¥–∞–Ω–æ: {sum(tariff_stats.values())}")
    
    await message.answer(stats_text)

@dp.message(F.text == "‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ")
async def handle_extend_tariff(message: types.Message):
    if message.chat.id != ADMIN_ID:
        return
        
    await message.answer(
        "‚è∞ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞\n\n"
        "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/extendtariff [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–¥–Ω–∏]\n\n"
        "–ü—Ä–∏–º–µ—Ä: /extendtariff 123456789 30")

@dp.message(Command("extendtariff"))
async def handle_extend_tariff_command(message: types.Message):
    if message.chat.id != ADMIN_ID:
        return
        
    try:
        parts = message.text.split()
        if len(parts) == 3:
            user_id = int(parts[1])
            days = int(parts[2])
            
            if user_id in user_subscription_end:
                user_subscription_end[user_id] += timedelta(days=days)
                save_data(user_subscription_end, DATA_FILES['user_subscription_end'])
                
                await message.answer(
                    f"‚úÖ –¢–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π\n"
                    f"–ù–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: {user_subscription_end[user_id].strftime('%d.%m.%Y %H:%M')}")
            else:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /extendtariff [ID] [–¥–Ω–∏]")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –≤–µ–∑–¥–µ –≥–¥–µ –±—ã–ª–æ get_remaining_free_days –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ get_remaining_days)

# =======================
# ===== RUN BOT =========
# =======================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")
    print(f"üíé –°–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–∏—Ñ–æ–≤: {len(TARIFFS)} —É—Ä–æ–≤–Ω—è")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    print(f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è ADMIN_ID")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_registration_date)}")
    print(f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤: {len([uid for uid in user_tariffs if is_subscription_active(uid)])}")
    asyncio.run(main())
