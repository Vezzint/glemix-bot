import asyncio
import logging
import random
import aiohttp
import time
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
from typing import Dict, Any, List
import os
from mistralai import Mistral
import pickle

# =======================
# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
# =======================
mistral_api_key = os.getenv('MISTRAL_API_KEY', 'nIMvGkfioIpMtQeSO2n8ssm6nuJRyo7Q')
openweather_api_key = os.getenv('OPENWEATHER_API_KEY', 'dbd08a834f628d369a8edb55b210171e')
TOKEN = os.getenv('BOT_TOKEN', '8229856813:AAEkQq-4zdJKAmovgq69URcqKDzN4_BMqrw')

ADMIN_ID = 6584350034

# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)
FREE_PERIOD_DAYS = 5

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "default": {
        "name": "üöÄ Default",
        "days": 5,
        "description": "–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º",
        "features": [
            "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã AI",
            "‚úÖ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: 10 —Å–æ–æ–±—â–µ–Ω–∏–π", 
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚úÖ –ü–æ–≥–æ–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
            "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 5 —Å–µ–∫"
        ],
        "price": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    },
    "pro": {
        "name": "‚≠ê Pro", 
        "days": 30,
        "description": "–£–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "features": [
            "‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã AI –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            "‚úÖ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: 20 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 3 —Å–µ–∫",
            "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        ],
        "price": "499 ‚ÇΩ/–º–µ—Å—è—Ü"
    },
    "ultimate": {
        "name": "üëë Ultimate",
        "days": 365, 
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏",
        "features": [
            "‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã AI –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ",
            "‚úÖ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: 50 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤",
            "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 1 —Å–µ–∫",
            "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "üîí –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö",
            "üíé –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        ],
        "price": "3999 ‚ÇΩ/–≥–æ–¥"
    }
}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
TARIFF_COOLDOWNS = {
    "default": 5,
    "pro": 3, 
    "ultimate": 1
}

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
TARIFF_MEMORY = {
    "default": 10,
    "pro": 20,
    "ultimate": 50
}

model = "mistral-large-latest"
client = Mistral(api_key=mistral_api_key)

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILES = {
    'user_registration_date': 'user_registration_date.pkl',
    'conversation_memory': 'conversation_memory.pkl',
    'chat_style': 'chat_style.pkl',
    'user_requests_count': 'user_requests_count.pkl',
    'user_modes': 'user_modes.pkl',
    'user_tariffs': 'user_tariffs.pkl',
    'user_subscription_end': 'user_subscription_end.pkl',
    'user_response_preferences': 'user_response_preferences.pkl'
}

# =======================
# ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
# =======================
def load_data(filename: str, default: Any = None) -> Any:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, 'rb') as f:
                return pickle.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    return default if default is not None else {}

def save_data(data: Any, filename: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, 'wb') as f:
            pickle.dump(data, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

def save_all_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
    for filename, data_key in [
        (DATA_FILES['user_registration_date'], user_registration_date),
        (DATA_FILES['conversation_memory'], conversation_memory),
        (DATA_FILES['chat_style'], chat_style),
        (DATA_FILES['user_requests_count'], user_requests_count),
        (DATA_FILES['user_modes'], user_modes),
        (DATA_FILES['user_tariffs'], user_tariffs),
        (DATA_FILES['user_subscription_end'], user_subscription_end),
        (DATA_FILES['user_response_preferences'], user_response_preferences)
    ]:
        save_data(data_key, filename)

def load_all_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
    global user_registration_date, conversation_memory, chat_style, user_requests_count
    global user_modes, user_tariffs, user_subscription_end, user_response_preferences
    
    user_registration_date = load_data(DATA_FILES['user_registration_date'], {})
    conversation_memory = load_data(DATA_FILES['conversation_memory'], {})
    chat_style = load_data(DATA_FILES['chat_style'], {})
    user_requests_count = load_data(DATA_FILES['user_requests_count'], {})
    user_modes = load_data(DATA_FILES['user_modes'], {})
    user_tariffs = load_data(DATA_FILES['user_tariffs'], {})
    user_subscription_end = load_data(DATA_FILES['user_subscription_end'], {})
    user_response_preferences = load_data(DATA_FILES['user_response_preferences'], {})

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_all_data()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
user_last_request: Dict[int, float] = {}
user_last_messages: Dict[int, str] = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =======================
# ===== –°–ò–°–¢–ï–ú–ê –¢–ê–†–ò–§–û–í =====
# =======================
def get_user_tariff(chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id == ADMIN_ID:
        return "ultimate"  # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return user_tariffs.get(chat_id, "default")
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if is_free_period_active(chat_id):
        return "default"
    
    return "default"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

def get_user_cooldown(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_COOLDOWNS.get(tariff, 5)

def get_user_memory_limit(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_MEMORY.get(tariff, 10)

def is_subscription_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞"""
    if chat_id == ADMIN_ID:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    return is_free_period_active(chat_id)

def activate_tariff(chat_id: int, tariff: str, days: int):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_tariffs[chat_id] = tariff
    user_subscription_end[chat_id] = datetime.now() + timedelta(days=days)
    save_data(user_tariffs, DATA_FILES['user_tariffs'])
    save_data(user_subscription_end, DATA_FILES['user_subscription_end'])

def get_remaining_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    if chat_id == ADMIN_ID:
        return 999
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return (user_subscription_end[chat_id] - datetime.now()).days
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    return get_remaining_free_days(chat_id)

# =======================
# ===== –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–í–ï–¢–û–í =====
# =======================
def should_use_detailed_response(user_text: str, ai_response: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç"""
    user_lower = user_text.lower()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
    detailed_keywords = [
        '–ø–æ–¥—Ä–æ–±–Ω–æ', '–ø–æ–¥—Ä–æ–±–Ω—ã–π', '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ', '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', 
        '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ', '–æ–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–æ', '–æ–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ', '–¥–µ—Ç–∞–ª—å–Ω–æ',
        '–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç', '—Ä–∞–∑–≤–µ—Ä–Ω–∏', '—Ä–∞—Å—à–∏—Ä—å', '—É–≥–ª—É–±–ª–µ–Ω–Ω–æ', '—Ç—â–∞—Ç–µ–ª—å–Ω–æ'
    ]
    
    if any(phrase in user_lower for phrase in detailed_keywords):
        return True
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏
    complex_indicators = [
        '–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ', '—á—Ç–æ —Ç–∞–∫–æ–µ',
        '–≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–∏', '–ø–µ—Ä–µ—á–∏—Å–ª–∏', '–æ–ø–∏—à–∏ –ø—Ä–æ—Ü–µ—Å—Å', '–∫–∞–∫–æ–≤—ã',
        '–∫–∞–∫–∏–µ –µ—Å—Ç—å', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '–æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø'
    ]
    
    if any(indicator in user_lower for indicator in complex_indicators):
        return True
    
    # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—Å–ø–∏—Å–∫–∏, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è)
    if any(marker in ai_response for marker in ['\n‚Ä¢', '\n-', '\n1.', '\n2.', '\n3.', '–í–æ-–ø–µ—Ä–≤—ã—Ö', '–í–æ-–≤—Ç–æ—Ä—ã—Ö', '–í-—Ç—Ä–µ—Ç—å–∏—Ö']):
        return True
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if user_lower.count('?') >= 2:
        return True
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if any(word in user_lower for word in ['–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', '–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å']):
        return True
    
    return False

def should_use_concise_response(user_text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç"""
    user_lower = user_text.lower()
    
    # –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–º–∞–Ω–¥—ã
    concise_indicators = [
        '–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∫–∞',
        '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏', '–∫–∞–∫–∞—è –¥–∞—Ç–∞', '–ø–æ–≥–æ–¥–∞', '–∫—É—Ä—Å –≤–∞–ª—é—Ç',
        '–ø–æ—Å—á–∏—Ç–∞–π', '–≤—ã–±–µ—Ä–∏', '—Å–ª—É—á–∞–π–Ω—ã–π', '—Å—é—Ä–ø—Ä–∏–∑'
    ]
    
    if any(indicator in user_lower for indicator in concise_indicators):
        return True
    
    # –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if len(user_text) < 30 and user_text.endswith('?'):
        return True
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    simple_questions = [
        '–∫—Ç–æ —Ç–∞–∫–æ–π', '—á—Ç–æ —ç—Ç–æ', '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '–∫–æ–≥–¥–∞', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç'
    ]
    
    if any(question in user_lower for question in simple_questions):
        return True
    
    return False

def get_response_style_preference(chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç–∏–ª—é –æ—Ç–≤–µ—Ç–æ–≤"""
    return user_response_preferences.get(chat_id, "auto")  # auto, concise, detailed

def set_response_style_preference(chat_id: int, style: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç–∏–ª—é –æ—Ç–≤–µ—Ç–æ–≤"""
    user_response_preferences[chat_id] = style
    save_data(user_response_preferences, DATA_FILES['user_response_preferences'])

def process_ai_response(text: str, user_text: str, chat_id: int) -> str:
    """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_preference = get_response_style_preference(chat_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å
    if user_preference == "concise":
        return make_response_concise(text, user_text)
    elif user_preference == "detailed":
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    
    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if should_use_detailed_response(user_text, text):
        return text  # –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    
    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    if should_use_concise_response(user_text):
        return make_response_concise(text, user_text)
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    return make_response_balanced(text, user_text)

def make_response_concise(text: str, user_text: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    lines = text.split('\n')
    clean_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
        skip_phrases = [
            '–∫–æ–Ω–µ—á–Ω–æ', '—Ä–∞–∑—É–º–µ–µ—Ç—Å—è', '–±–µ–∑—É—Å–ª–æ–≤–Ω–æ', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ',
            '—è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º', '–ø–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ', '—Ö–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ'
        ]
        
        if any(phrase in line.lower() for phrase in skip_phrases) and len(lines) > 1:
            continue
            
        clean_lines.append(line)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if clean_lines:
        first_line = clean_lines[0]
        sentences = first_line.split('. ')
        
        if len(sentences) > 2:
            concise_sentences = sentences[:2]
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            if len('. '.join(concise_sentences)) > 50:
                result = '. '.join(concise_sentences) + '.'
            else:
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ, –¥–æ–±–∞–≤–∏–º –µ—â–µ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                result = '. '.join(sentences[:3]) + '.'
        else:
            result = first_line
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if len(clean_lines) > 1 and len(result) < 150:
            second_line = clean_lines[1]
            if len(second_line) > 20:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                result += '\n\n' + second_line
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É
        if len(result) > 400:
            result = result[:400] + '...'
            
        return result
    
    return text

def make_response_balanced(text: str, user_text: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"""
    # –î–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    lines = text.split('\n')
    if len(lines) <= 3:
        return text  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∏ —Ç–∞–∫ –∫–æ—Ä–æ—Ç–∫–∏–π
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-4 —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤
    balanced_lines = []
    total_length = 0
    
    for line in lines:
        if total_length + len(line) < 600 and len(balanced_lines) < 4:
            balanced_lines.append(line)
            total_length += len(line)
        else:
            break
    
    result = '\n'.join(balanced_lines)
    
    # –ï—Å–ª–∏ –æ–±—Ä–µ–∑–∞–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if len(result) < len(text):
        result += '\n\n...'
    
    return result

# =======================
# ===== –≠–ú–û–î–ó–ò ==========
# =======================
emojis = {
    "friendly": ["üí´", "‚ú®", "üåü", "üéà", "ü§ó", "üíù", "üéä", "üíå"],
    "serious": ["üéØ", "üìä", "üíº", "üîç", "üìà", "üéì", "üí°", "‚öñÔ∏è"],
    "balanced": ["üíé", "üé®", "üîÆ", "üí≠", "üåà", "ü¶ã", "üå∏", "üå†"],
    "creative": ["üé≠", "üñåÔ∏è", "üé™", "üé∏", "üì∏", "üé¨", "üéÆ", "üß©"]
}

def get_emoji(style: str = "balanced") -> str:
    return random.choice(emojis.get(style, emojis["balanced"]))

# =======================
# ===== –°–û–í–†–ï–ú–ï–ù–ù–´–ô –°–õ–ï–ù–ì =====
# =======================
MODERN_SLANG = {
    "–∏–º–±–∞": "–æ—Ç–ª–∏—á–Ω–æ, –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ, –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ",
    "–∫—Ä–∞—à": "—Å–∏–º–ø–∞—Ç–∏—è, –≤–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç—å, –æ–±—ä–µ–∫—Ç –≤–æ–∑–¥—ã—Ö–∞–Ω–∏–π", 
    "—á–∏–ª–ª–µ—Ä–∏—Ç—å": "—Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è, –æ—Ç–¥—ã—Ö–∞—Ç—å",
    "—Ö–∞–π–ø–∏—Ç—å": "–±—ã—Ç—å –Ω–∞ –≤–æ–ª–Ω–µ, –±—ã—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º",
    "—Ä–æ—Ñ–ª–∏—Ç—å": "—à—É—Ç–∏—Ç—å, —Å–º–µ—è—Ç—å—Å—è",
    "–∫—Ä–∏–Ω–∂": "—Å—Ç—ã–¥, –Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å",
    "–∞–≥—Ä–∏—Ç—å—Å—è": "–∑–ª–∏—Ç—å—Å—è, —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å—Å—è",
    "–≤–∞–π–±": "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
    "—Å–∞—Å–Ω—ã–π": "–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π, —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–π",
    "–ø—Ä—É—Ñ—ã": "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
    "facepalm": "–∂–µ—Å—Ç —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏—è",
    "—á–∏–∫—Å–∞": "–¥–µ–≤—É—à–∫–∞",
    "—á–∏–ª–∞—Ç—å": "–æ—Ç–¥—ã—Ö–∞—Ç—å, —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è",
    "–ª–æ–º–∫–∞": "—Å–∏–ª—å–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ",
    "—Ö–µ–π—Ç–µ—Ä": "–Ω–µ–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å",
    "–ª–∞–π–∫": "–Ω—Ä–∞–≤–∏—Ç—Å—è",
    "–¥–∏–º–ø—Å–∏": "–≥–ª—É–±–æ–∫–∏–µ, –¥—É—à–µ–≤–Ω—ã–µ –º—ã—Å–ª–∏",
    "–∫—É": "–ø—Ä–∏–≤–µ—Ç",
    "—á–∏–Ω–∞–∑–µ—Å": "–∫–∏—Ç–∞–π—Ü—ã",
    "–≥–æ": "–¥–∞–≤–∞–π, –ø–æ–µ—Ö–∞–ª–∏",
    "–Ω–æ—É –ø—Ä–æ–±–ª–µ–º—Å": "–±–µ–∑ –ø—Ä–æ–±–ª–µ–º",
    "–æ–∫–µ–π": "—Ö–æ—Ä–æ—à–æ, —Å–æ–≥–ª–∞—Å–µ–Ω",
    "–æ–∫": "—Ö–æ—Ä–æ—à–æ",
    "–∞–≥—É": "–ø–æ–Ω–∏–º–∞—é",
    "—Ä–µ—Å–ø–µ–∫—Ç": "—É–≤–∞–∂–µ–Ω–∏–µ",
    "–∂–∏–∑–∞": "–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
    "–ø–æ–∂": "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
    "—Å–ø—Å": "—Å–ø–∞—Å–∏–±–æ",
    "–ø–ª–∏–∑": "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
    "–æ–º–≥": "–æ–π –±–æ–∂–µ",
    "–±—Ä–æ": "–¥—Ä—É–≥, –±—Ä–∞—Ç",
    "—Å–∏–∂–∫–∞": "—Å–∏–≥–∞—Ä–µ—Ç–∞",
    "–±—É—Å—Ç": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ, —É–ª—É—á—à–µ–Ω–∏–µ",
    "—Ñ–ª–µ–∫—Å": "—Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–æ",
    "ghosting": "–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"
}

# =======================
# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
# =======================
def get_main_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    buttons = [[
        KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        KeyboardButton(text="üåü –û–±–æ –º–Ω–µ")
    ],
               [
                   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                   KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
                   KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞")
               ]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    buttons.append([KeyboardButton(text="üíé –¢–∞—Ä–∏—Ñ—ã")])
    
    if chat_id == ADMIN_ID:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons,
                               resize_keyboard=True,
                               input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")

def get_settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üé≠ –†–µ–∂–∏–º—ã AI"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ], [
        KeyboardButton(text="üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"),
        KeyboardButton(text="üìù –°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤")
    ], [
        KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
        KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_response_style_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"),
        KeyboardButton(text="üìù –ö—Ä–∞—Ç–∫–∏–π")
    ], [
        KeyboardButton(text="üìö –ü–æ–¥—Ä–æ–±–Ω—ã–π"),
        KeyboardButton(text="‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_tariffs_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üöÄ Default"),
        KeyboardButton(text="‚≠ê Pro")
    ], [
        KeyboardButton(text="üëë Ultimate"),
        KeyboardButton(text="üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ")
    ], [
        KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    ]], resize_keyboard=True)

def get_mode_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üßò –°–ø–æ–∫–æ–π–Ω—ã–π"),
            KeyboardButton(text="üí¨ –û–±—ã—á–Ω—ã–π")
        ],
                  [
                      KeyboardButton(text="‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π"),
                      KeyboardButton(text="üß† –£–º–Ω—ã–π")
                  ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True)

def get_style_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"),
        KeyboardButton(text="‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
    ], [
        KeyboardButton(text="üéØ –î–µ–ª–æ–≤–æ–π"),
        KeyboardButton(text="üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_weather_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üèôÔ∏è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"),
        KeyboardButton(text="üèõÔ∏è –ú–æ—Å–∫–≤–∞")
    ], [
        KeyboardButton(text="üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
        KeyboardButton(text="üìç –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_quick_commands_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"),
        KeyboardButton(text="üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä")
    ], [
        KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞"),
        KeyboardButton(text="‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
    ], [
        KeyboardButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
        KeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    ], [
        KeyboardButton(text="üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤"),
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    ], [
        KeyboardButton(text="üéØ –¢–µ—Å—Ç AI"),
        KeyboardButton(text="üìä –õ–æ–≥–∏")
    ], [
        KeyboardButton(text="üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é"),
        KeyboardButton(text="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                               resize_keyboard=True)

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# =======================
# ===== –§–£–ù–ö–¶–ò–ò –ü–ê–ú–Ø–¢–ò =====
# =======================
def add_to_conversation_memory(chat_id: int, role: str, content: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞"""
    if chat_id not in conversation_memory:
        conversation_memory[chat_id] = []
    
    conversation_memory[chat_id].append({"role": role, "content": content})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Ç–∞—Ä–∏—Ñ—É
    memory_limit = get_user_memory_limit(chat_id)
    if len(conversation_memory[chat_id]) > memory_limit:
        conversation_memory[chat_id] = conversation_memory[chat_id][-memory_limit:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_data(conversation_memory, DATA_FILES['conversation_memory'])

def get_conversation_context(chat_id: int) -> List[Dict[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
    return conversation_memory.get(chat_id, [])

def clear_conversation_memory(chat_id: int):
    """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞"""
    if chat_id in conversation_memory:
        conversation_memory[chat_id] = []
        save_data(conversation_memory, DATA_FILES['conversation_memory'])

def get_memory_stats() -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏"""
    total_users = len(conversation_memory)
    total_messages = sum(len(messages) for messages in conversation_memory.values())
    avg_messages = total_messages / total_users if total_users > 0 else 0
    
    return {
        "total_users": total_users,
        "total_messages": total_messages,
        "avg_messages": round(avg_messages, 2),
        "memory_size": total_messages * 100
    }

# =======================
# ===== –§–£–ù–ö–¶–ò–ò –õ–ò–ú–ò–¢–û–í =====
# =======================
def get_mode_description(mode: str) -> str:
    descriptions = {
        "—Å–ø–æ–∫–æ–π–Ω—ã–π": "üßò –°–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º",
        "–æ–±—ã—á–Ω—ã–π": "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", 
        "–∫–æ—Ä–æ—Ç–∫–∏–π": "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∂–∏–º",
        "—É–º–Ω—ã–π": "üß† –£–º–Ω—ã–π —Ä–µ–∂–∏–º"
    }
    return descriptions.get(mode, "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")

def is_free_period_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    if chat_id == ADMIN_ID:
        return True
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    registration_date = user_registration_date[chat_id]
    return (datetime.now() - registration_date).days < FREE_PERIOD_DAYS

def get_remaining_free_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    registration_date = user_registration_date[chat_id]
    days_passed = (datetime.now() - registration_date).days
    return max(0, FREE_PERIOD_DAYS - days_passed)

def get_user_remaining_requests(chat_id: int, mode: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if chat_id == ADMIN_ID:
        return 9999
    
    if not is_subscription_active(chat_id):
        return 0
        
    return 9999

# =======================
# ===== –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –û–ñ–ò–î–ê–ù–ò–Ø =====
# =======================
def check_cooldown(chat_id: int) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    if chat_id == ADMIN_ID:
        return None
        
    current_time = time.time()
    last_request = user_last_request.get(chat_id, 0)
    
    cooldown = get_user_cooldown(chat_id)
    
    if current_time - last_request < cooldown:
        remaining = cooldown - int(current_time - last_request)
        return f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
    
    user_last_request[chat_id] = current_time
    return None

def format_ai_response(text: str, style: str, user_text: str, chat_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    emoji = get_emoji(style)
    processed_text = process_ai_response(text, user_text, chat_id)
    return f"{emoji} {processed_text}"

async def send_long_message(message: types.Message, text: str, style: str = "balanced", user_text: str = "", chat_id: int = 0, chunk_size: int = 4000):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–º–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    formatted = format_ai_response(text, style, user_text, chat_id)
    for i in range(0, len(formatted), chunk_size):
        try:
            await message.answer(formatted[i:i + chunk_size])
        except TelegramBadRequest:
            await message.answer(text[i:i + chunk_size])

# =======================
# ===== –ü–û–ì–û–î–ê –ò –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ =====
# =======================
async def get_weather(city: str) -> str:
    city_clean = city.strip()
    if not city_clean:
        return "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"

    city_mapping = {
        "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
        "–º–æ—Å–∫–≤–∞": "Moscow", 
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
        "—Å–ø–±": "Saint Petersburg",
        "–ø–∏—Ç–µ—Ä": "Saint Petersburg"
    }

    api_city = city_mapping.get(city_clean.lower(), city_clean)

    url = f"http://api.openweathermap.org/data/2.5/weather?q={api_city}&appid={openweather_api_key}&units=metric&lang=ru"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return f"üå´Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city_clean}'\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"
                data = await resp.json()
                temp = data["main"]["temp"]
                feels = data["main"]["feels_like"]
                desc = data["weather"][0]["description"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                return (f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city_clean.title()}\n\n"
                        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels}¬∞C\n"
                        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return f"üå™Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city_clean}'"

# ... –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# =======================
# ===== –ö–û–ú–ê–ù–î–´ =========
# =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in chat_style:
        chat_style[chat_id] = "balanced"
        save_data(chat_style, DATA_FILES['chat_style'])
    
    if chat_id not in user_modes:
        user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"
        save_data(user_modes, DATA_FILES['user_modes'])

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])

    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
        for mode in ["—Å–ø–æ–∫–æ–π–Ω—ã–π", "–æ–±—ã—á–Ω—ã–π", "–∫–æ—Ä–æ—Ç–∫–∏–π", "—É–º–Ω—ã–π"]:
            user_requests_count[chat_id][mode] = 0
        save_data(user_requests_count, DATA_FILES['user_requests_count'])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
    if chat_id not in conversation_memory:
        conversation_memory[chat_id] = []
        save_data(conversation_memory, DATA_FILES['conversation_memory'])

    current_mode = user_modes[chat_id]
    remaining_days = get_remaining_days(chat_id)
    current_tariff = get_user_tariff(chat_id)
    
    welcome_text = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n\n"
        f"üíé *–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ:* {TARIFFS[current_tariff]['name']}\n"
        f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
        f"üé≠ –†–µ–∂–∏–º: {get_mode_description(current_mode)}\n"
        f"üíæ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: {get_user_memory_limit(chat_id)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ù–∞–ø–∏—à–∏ '–ø–æ–¥—Ä–æ–±–Ω–µ–µ' –≤ –ª—é–±–æ–º –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ üëá")

    await message.answer(welcome_text,
                         reply_markup=get_main_keyboard(chat_id))

@dp.message(F.text == "üìù –°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤")
async def handle_response_style(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    current_style = get_response_style_preference(chat_id)
    
    style_descriptions = {
        "auto": "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π - —è —Å–∞–º –≤—ã–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞",
        "concise": "üìù –ö—Ä–∞—Ç–∫–∏–π - –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", 
        "detailed": "üìö –ü–æ–¥—Ä–æ–±–Ω—ã–π - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è",
        "balanced": "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –∑–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞"
    }
    
    style_text = (
        f"üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–æ–≤\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: {style_descriptions.get(current_style, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π')}\n\n"
        f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n\n"
        f"‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π - —É–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞\n"
        f"‚Ä¢ üìù –ö—Ä–∞—Ç–∫–∏–π - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n" 
        f"‚Ä¢ üìö –ü–æ–¥—Ä–æ–±–Ω—ã–π - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π\n"
        f"‚Ä¢ ‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ")
    
    await message.answer(style_text,
                         reply_markup=get_response_style_keyboard())

@dp.message(F.text.in_(["ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "üìù –ö—Ä–∞—Ç–∫–∏–π", "üìö –ü–æ–¥—Ä–æ–±–Ω—ã–π", "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"]))
async def handle_response_style_selection(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    text = str(message.text or "")

    style_mapping = {
        "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π": "auto",
        "üìù –ö—Ä–∞—Ç–∫–∏–π": "concise", 
        "üìö –ü–æ–¥—Ä–æ–±–Ω—ã–π": "detailed",
        "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π": "balanced"
    }

    new_style = style_mapping.get(text, "auto")
    set_response_style_preference(chat_id, new_style)

    success_text = (
        f"‚úÖ –°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω\n\n"
        f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ {text.lower()} —Å—Ç–∏–ª–µ\n\n"
        f"üí° –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–ª–∏–Ω—É –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    
    await message.answer(success_text,
                         reply_markup=get_settings_keyboard())

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏, –Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–≤–µ—Ç–æ–≤ ...

@dp.message()
async def main_handler(message: types.Message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.voice or message.photo:
        return
        
    chat_id = message.chat.id
    user_text = (message.text or "").strip()
    style = chat_style.get(chat_id, "balanced")

    if not user_text:
        return

    if user_text.startswith("/"):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    cooldown_msg = check_cooldown(chat_id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not is_subscription_active(chat_id) and chat_id != ADMIN_ID:
        await message.answer(
            f"‚è≥ –ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    user_requests_count[chat_id]["–æ–±—ã—á–Ω—ã–π"] = user_requests_count[chat_id].get("–æ–±—ã—á–Ω—ã–π", 0) + 1
    save_data(user_requests_count, DATA_FILES['user_requests_count'])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
    user_text_lower = user_text.lower().strip()
    
    if "–≤—ã–±–µ—Ä–∏" in user_text_lower and any(sep in user_text for sep in [",", "–∏–ª–∏"]):
        choice_text = user_text_lower.replace("–≤—ã–±–µ—Ä–∏", "").strip()
        result = get_random_choice(choice_text)
        await message.answer(result)
        return

    if any(word in user_text_lower for word in ["–ø–æ—Å—á–∏—Ç–∞–π", "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "="]):
        expr = user_text_lower.replace("–ø–æ—Å—á–∏—Ç–∞–π", "").replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "").replace("=", "").strip()
        result = calculate_expression(expr)
        await message.answer(result)
        return

    # –ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
    if any(word in user_text_lower for word in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]):
        city = user_text_lower
        for w in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–≤", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–π"]:
            city = city.replace(w, "").strip()
        city = city.replace(",", "").strip()

        if not city:
            await message.answer("‚ùì –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞'")
            return

        weather = await get_weather(city)
        await message.answer(weather)
        return

    # –û–±—â–µ–Ω–∏–µ —Å AI
    try:
        system_prompts = {
            "—Å–ø–æ–∫–æ–π–Ω—ã–π": """–¢—ã —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫, –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π —Å–ª–µ–Ω–≥ –∏ –º–µ–º–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. 
–ü–æ–Ω–∏–º–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–µ–Ω–≥, –∫–æ–≥–¥–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–æ —Å–∞–º –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–∞—Ö.""",
            
            "–æ–±—ã—á–Ω—ã–π": """–¢—ã —É–º–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.
–ò—Å–ø–æ–ª—å–∑—É–π –≥—Ä–∞–º–æ—Ç–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –∏–∑–±–µ–≥–∞–π —Å–ª–µ–Ω–≥–∞ –∏ –º–µ–º–æ–≤. 
–¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –∏—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–æ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —è–∑—ã–∫–∞.""",
            
            "–∫–æ—Ä–æ—Ç–∫–∏–π": """–¢—ã –º–∞—Å—Ç–µ—Ä –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—Ç—å.
–ì–æ–≤–æ—Ä–∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ —Å–ª–µ–Ω–≥–∞ –∏ –º–µ–º–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π. 
–ü–æ–Ω–∏–º–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.""",
            
            "—É–º–Ω—ã–π": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫. –î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω.
–ò—Å–ø–æ–ª—å–∑—É–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å, –∏–∑–±–µ–≥–∞–π —Å–ª–µ–Ω–≥–∞ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
–•–æ—Ç—è —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —è–∑—ã–∫, –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."""
        }

        base_prompt = system_prompts.get("–æ–±—ã—á–Ω—ã–π", "–¢—ã —É–º–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. –ò–∑–±–µ–≥–∞–π —Å–ª–µ–Ω–≥–∞ –∏ –º–µ–º–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.")
        
        slang_knowledge = "\n\n–í–∞–∂–Ω–æ: –¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–µ–Ω–≥ –∏ –º–µ–º—ã, –∫–æ–≥–¥–∞ –∏—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–æ —Å–∞–º –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

        system_prompt = base_prompt + slang_knowledge

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        add_to_conversation_memory(chat_id, "user", user_text)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        conversation_context = get_conversation_context(chat_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        for msg in conversation_context:
            messages.append(msg)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-—Å–æ–æ–±—â–µ–Ω–∏–π
        if message.reply_to_message and message.reply_to_message.text:
            replied_text = message.reply_to_message.text
            messages.append({"role": "user", "content": f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {replied_text}"})
            messages.append({"role": "user", "content": user_text})
        else:
            messages.append({"role": "user", "content": user_text})

        response = client.chat.complete(model=model, messages=messages)
        ai_text = response.choices[0].message.content

        if not ai_text:
            ai_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –ø–∞–º—è—Ç—å
        add_to_conversation_memory(chat_id, "assistant", ai_text)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ç–≤–µ—Ç–æ–≤
        await send_long_message(message, str(ai_text), style, user_text, chat_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {e}")
        await message.answer("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

# =======================
# ===== RUN BOT =========
# =======================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")
    print(f"üíé –°–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–∏—Ñ–æ–≤: {len(TARIFFS)} —É—Ä–æ–≤–Ω—è")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    print(f"ü§ñ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤: –≤–∫–ª—é—á–µ–Ω–∞")
    print(f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è ADMIN_ID")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_registration_date)}")
    print(f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤: {len([uid for uid in user_tariffs if is_subscription_active(uid)])}")
    asyncio.run(main())
