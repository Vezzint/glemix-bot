import asyncio
import logging
import random
import aiohttp
import time
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from typing import Dict, Any, List, Optional
import os
from mistralai import Mistral
import pickle
import json

# =======================
# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
# =======================
mistral_api_key = os.getenv('MISTRAL_API_KEY', 'nIMvGkfioIpMtQeSO2n8ssm6nuJRyo7Q')
openweather_api_key = os.getenv('OPENWEATHER_API_KEY', 'dbd08a834f628d369a8edb55b210171e')
TOKEN = os.getenv('BOT_TOKEN', '8229856813:AAEkQq-4zdJKAmovgq69URcqKDzN4_BMqrw')

ADMIN_ID = 6584350034

# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)
FREE_PERIOD_DAYS = 5

# –¢–∞—Ä–∏—Ñ—ã (—Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –≤ –º–µ—Å—è—Ü)
TARIFFS = {
    "default": {
        "name": "üöÄ Default",
        "days": 30,
        "description": "–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø",
        "features": [
            "‚úÖ 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å",
            "‚úÖ –ü–∞–º—è—Ç—å: 10 —Å–æ–æ–±—â–µ–Ω–∏–π", 
            "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã AI",
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: 5 —Å–µ–∫"
        ],
        "price": "10 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 20,
        "is_free_first": True
    },
    "pro": {
        "name": "‚≠ê Pro", 
        "days": 30,
        "description": "–î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "features": [
            "‚úÖ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å",
            "‚úÖ –ü–∞–º—è—Ç—å: 20 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã AI",
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 3 —Å–µ–∫"
        ],
        "price": "50 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 50,
        "is_free_first": False
    },
    "advanced": {
        "name": "üíé Advanced",
        "days": 30,
        "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "features": [
            "‚úÖ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å", 
            "‚úÖ –ü–∞–º—è—Ç—å: 35 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 2 —Å–µ–∫"
        ],
        "price": "150 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 100,
        "is_free_first": False
    },
    "ultimate": {
        "name": "üëë Ultimate",
        "days": 30, 
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "features": [
            "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
            "‚úÖ –ü–∞–º—è—Ç—å: 100 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 1 —Å–µ–∫",
            "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ],
        "price": "300 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 99999,
        "is_free_first": False
    }
}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
TARIFF_COOLDOWNS = {
    "default": 5,
    "pro": 3,
    "advanced": 2, 
    "ultimate": 1
}

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤
TARIFF_MEMORY = {
    "default": 10,
    "pro": 20,
    "advanced": 35,
    "ultimate": 100
}

model = "mistral-large-latest"
client = Mistral(api_key=mistral_api_key)

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILES = {
    'user_registration_date': 'user_registration_date.pkl',
    'conversation_memory': 'conversation_memory.pkl',
    'chat_style': 'chat_style.pkl',
    'user_requests_count': 'user_requests_count.pkl',
    'user_modes': 'user_modes.pkl',
    'user_tariffs': 'user_tariffs.pkl',
    'user_subscription_end': 'user_subscription_end.pkl',
    'user_daily_requests': 'user_daily_requests.pkl',
    'admin_logs': 'admin_logs.pkl',
    'admin_temp_data': 'admin_temp_data.pkl'
}

# =======================
# ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
# =======================
def load_data(filename: str, default: Any = None) -> Any:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, 'rb') as f:
                return pickle.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    return default if default is not None else {}

def save_data(data: Any, filename: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, 'wb') as f:
            pickle.dump(data, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_registration_date = load_data(DATA_FILES['user_registration_date'], {})
conversation_memory = load_data(DATA_FILES['conversation_memory'], {})
chat_style = load_data(DATA_FILES['chat_style'], {})
user_requests_count = load_data(DATA_FILES['user_requests_count'], {})
user_modes = load_data(DATA_FILES['user_modes'], {})
user_tariffs = load_data(DATA_FILES['user_tariffs'], {})
user_subscription_end = load_data(DATA_FILES['user_subscription_end'], {})
user_daily_requests = load_data(DATA_FILES['user_daily_requests'], {})
admin_logs = load_data(DATA_FILES['admin_logs'], [])
admin_temp_data = load_data(DATA_FILES['admin_temp_data'], {})

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_last_request: Dict[int, float] = {}
user_thinking_messages: Dict[int, int] = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =======================
# ===== –°–ò–°–¢–ï–ú–ê –¢–ê–†–ò–§–û–í –ò –õ–ò–ú–ò–¢–û–í =====
# =======================
def get_user_tariff(chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id == ADMIN_ID:
        return "ultimate"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return user_tariffs.get(chat_id, "default")
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è Default —Ç–∞—Ä–∏—Ñ–∞
    if is_free_period_active(chat_id):
        return "default"
    
    # –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    return "default"  # –ù–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω

def get_user_cooldown(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_COOLDOWNS.get(tariff, 5)

def get_user_memory_limit(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_MEMORY.get(tariff, 10)

def get_user_daily_limit(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    tariff = get_user_tariff(chat_id)
    return TARIFFS[tariff]["daily_limits"]

def get_remaining_daily_requests(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().date()
    daily_data = user_daily_requests.get(chat_id, {})
    if daily_data.get("date") != today:
        return get_user_daily_limit(chat_id)
    return max(0, get_user_daily_limit(chat_id) - daily_data.get("count", 0))

def increment_daily_requests(chat_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    today = datetime.now().date()
    if chat_id not in user_daily_requests or user_daily_requests[chat_id].get("date") != today:
        user_daily_requests[chat_id] = {"date": today, "count": 1}
    else:
        user_daily_requests[chat_id]["count"] += 1
    save_data(user_daily_requests, DATA_FILES['user_daily_requests'])

def is_subscription_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–ª–∏ –ø–ª–∞—Ç–Ω–∞—è)"""
    if chat_id == ADMIN_ID:
        return True
    
    # –ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return True
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    return is_free_period_active(chat_id)

def activate_tariff(chat_id: int, tariff: str, days: int):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_tariffs[chat_id] = tariff
    user_subscription_end[chat_id] = datetime.now() + timedelta(days=days)
    save_data(user_tariffs, DATA_FILES['user_tariffs'])
    save_data(user_subscription_end, DATA_FILES['user_subscription_end'])

def get_remaining_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    if chat_id == ADMIN_ID:
        return 999
    
    # –ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return (user_subscription_end[chat_id] - datetime.now()).days
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    return get_remaining_free_days(chat_id)

def is_free_period_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    if chat_id == ADMIN_ID:
        return True
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    registration_date = user_registration_date[chat_id]
    days_passed = (datetime.now() - registration_date).days
    return days_passed < FREE_PERIOD_DAYS

def get_remaining_free_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    registration_date = user_registration_date[chat_id]
    days_passed = (datetime.now() - registration_date).days
    return max(0, FREE_PERIOD_DAYS - days_passed)

def can_user_make_request(chat_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not is_subscription_active(chat_id) and chat_id != ADMIN_ID:
        remaining_free = get_remaining_free_days(chat_id)
        if remaining_free <= 0:
            return False, f"‚è≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç–∞—Ä–∏—Ñ."
        else:
            return True, ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    remaining_requests = get_remaining_daily_requests(chat_id)
    if remaining_requests <= 0:
        current_tariff = get_user_tariff(chat_id)
        daily_limit = TARIFFS[current_tariff]["daily_limits"]
        return False, f"üìä –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ({daily_limit}/–¥–µ–Ω—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ —Ç–∞—Ä–∏—Ñ."
    
    return True, ""

# =======================
# ===== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ =====
# =======================
def add_admin_log(action: str, admin_id: int = ADMIN_ID, target_user: Optional[int] = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "admin_id": admin_id,
        "action": action,
        "target_user": target_user
    }
    admin_logs.append(log_entry)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
    if len(admin_logs) > 100:
        admin_logs.pop(0)
    save_data(admin_logs, DATA_FILES['admin_logs'])

def get_main_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = [
        [
            KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            KeyboardButton(text="üåü –û–±–æ –º–Ω–µ")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
            KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞")
        ],
        [
            KeyboardButton(text="üíé –¢–∞—Ä–∏—Ñ—ã")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if chat_id == ADMIN_ID:
        keyboard.append([KeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
                KeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [
                KeyboardButton(text="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏"),
                KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
            ],
            [
                KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                KeyboardButton(text="üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")
            ],
            [
                KeyboardButton(text="‚öôÔ∏è –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                KeyboardButton(text="üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤")
            ],
            [
                KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            ]
        ],
        resize_keyboard=True
    )

def get_tariff_management_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üöÄ –í—ã–¥–∞—Ç—å Default"),
                KeyboardButton(text="‚≠ê –í—ã–¥–∞—Ç—å Pro")
            ],
            [
                KeyboardButton(text="üíé –í—ã–¥–∞—Ç—å Advanced"),
                KeyboardButton(text="üëë –í—ã–¥–∞—Ç—å Ultimate")
            ],
            [
                KeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ"),
                KeyboardButton(text="üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π")
            ],
            [
                KeyboardButton(text="‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            ]
        ],
        resize_keyboard=True
    )

async def get_user_info(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user = await bot.get_chat(user_id)
        username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
        first_name = user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        last_name = user.last_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        tariff = get_user_tariff(user_id)
        remaining_days = get_remaining_days(user_id)
        remaining_requests = get_remaining_daily_requests(user_id)
        total_requests = user_requests_count.get(user_id, {}).get("total", 0)
        reg_date = user_registration_date.get(user_id, "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        if isinstance(reg_date, datetime):
            reg_date = reg_date.strftime("%Y-%m-%d %H:%M")
        
        info = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        info += f"üÜî ID: {user_id}\n"
        info += f"üë§ –ò–º—è: {first_name} {last_name}\n"
        info += f"üì± Username: {username}\n"
        info += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
        info += f"üíé –¢–∞—Ä–∏—Ñ: {TARIFFS[tariff]['name']}\n"
        info += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
        info += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}/{TARIFFS[tariff]['daily_limits']}\n"
        info += f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        info += f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if is_subscription_active(user_id) else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        
        return info
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"

def set_admin_temp(admin_id: int, key: str, value: Any):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞"""
    if admin_id not in admin_temp_data:
        admin_temp_data[admin_id] = {}
    admin_temp_data[admin_id][key] = value
    save_data(admin_temp_data, DATA_FILES['admin_temp_data'])

def get_admin_temp(admin_id: int, key: str, default: Any = None) -> Any:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞"""
    return admin_temp_data.get(admin_id, {}).get(key, default)

# =======================
# ===== –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–í–ï–¢–û–í =====
# =======================
def create_concise_response(text: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    if not text or len(text.strip()) == 0:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
    
    lines = text.split('\n')
    clean_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        skip_phrases = [
            '–∫–æ–Ω–µ—á–Ω–æ', '—Ä–∞–∑—É–º–µ–µ—Ç—Å—è', '–±–µ–∑—É—Å–ª–æ–≤–Ω–æ', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ',
            '—è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º', '–ø–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ', '—Ö–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ',
            '–æ—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å', '—á—Ç–æ –∂,',
            '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ'
        ]
        
        if any(phrase in line.lower() for phrase in skip_phrases):
            continue
            
        clean_lines.append(line)
    
    if not clean_lines:
        return text[:200] + "..." if len(text) > 200 else text
    
    first_line = clean_lines[0]
    sentences = first_line.split('. ')
    
    if len(sentences) > 1:
        if len(sentences[0]) < 50 and len(sentences) > 1:
            result = '. '.join(sentences[:2]) + '.'
        else:
            result = sentences[0] + '.'
    else:
        result = first_line
    
    if len(clean_lines) > 1 and len(result) < 150:
        second_line = clean_lines[1]
        if len(second_line) > 10 and len(second_line) < 100:
            result += ' ' + second_line
    
    if len(result) > 250:
        result = result[:250] + '...'
    
    return result.strip()

# =======================
# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
# =======================
def get_settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üé≠ –†–µ–∂–∏–º—ã AI"),
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [
                KeyboardButton(text="üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"),
                KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            ],
            [
                KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã")
            ],
            [
                KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )

def get_tariffs_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üöÄ Default"),
                KeyboardButton(text="‚≠ê Pro")
            ],
            [
                KeyboardButton(text="üíé Advanced"),
                KeyboardButton(text="üëë Ultimate")
            ],
            [
                KeyboardButton(text="üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ")
            ],
            [
                KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )

def get_mode_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üßò –°–ø–æ–∫–æ–π–Ω—ã–π"),
                KeyboardButton(text="üí¨ –û–±—ã—á–Ω—ã–π")
            ],
            [
                KeyboardButton(text="‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π"),
                KeyboardButton(text="üß† –£–º–Ω—ã–π")
            ],
            [
                KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )

def get_style_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"),
                KeyboardButton(text="‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
            ],
            [
                KeyboardButton(text="üéØ –î–µ–ª–æ–≤–æ–π"),
                KeyboardButton(text="üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π")
            ],
            [
                KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )

def get_quick_commands_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"),
                KeyboardButton(text="üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä")
            ],
            [
                KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞"),
                KeyboardButton(text="‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            ],
            [
                KeyboardButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
                KeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑")
            ],
            [
                KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )

# =======================
# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
# =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    
    if chat_id not in user_modes:
        user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"
        save_data(user_modes, DATA_FILES['user_modes'])
    
    if chat_id not in chat_style:
        chat_style[chat_id] = "balanced"
        save_data(chat_style, DATA_FILES['chat_style'])

    current_mode = user_modes[chat_id]
    remaining_days = get_remaining_days(chat_id)
    current_tariff = get_user_tariff(chat_id)
    remaining_requests = get_remaining_daily_requests(chat_id)
    is_free = is_free_period_active(chat_id)
    
    welcome_text = f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
    
    if is_free:
        welcome_text += f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {remaining_days} –¥–Ω–µ–π\n"
    else:
        welcome_text += f"üíé –¢–∞—Ä–∏—Ñ: {TARIFFS[current_tariff]['name']}\n"
        welcome_text += f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
    
    welcome_text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}/{TARIFFS[current_tariff]['daily_limits']}\n"
    welcome_text += f"üé≠ –†–µ–∂–∏–º: {current_mode}\n"
    welcome_text += f"üíæ –ü–∞–º—è—Ç—å: {get_user_memory_limit(chat_id)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    welcome_text += f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n\n"
    
    if is_free and remaining_days <= 2:
        welcome_text += "üí° –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!\n\n"
    
    welcome_text += "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá"

    await message.answer(welcome_text, reply_markup=get_main_keyboard(chat_id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù –ö–ù–û–ü–û–ö =====
# =======================
@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    admin_text = "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await message.answer(admin_text, reply_markup=get_admin_keyboard())
    add_admin_log("–û—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

@dp.message(F.text == "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def handle_users_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    total_users = len(user_registration_date)
    active_today = 0
    today = datetime.now().date()
    
    for user_id, daily_data in user_daily_requests.items():
        if isinstance(daily_data, dict) and daily_data.get("date") == today:
            active_today += 1
    
    premium_users = len([uid for uid in user_tariffs if user_tariffs.get(uid) != "default"])
    
    stats_text = f"üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    stats_text += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
    stats_text += f"üíé –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}\n"
    stats_text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {total_users - premium_users}\n"
    
    await message.answer(stats_text)
    add_admin_log("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@dp.message(F.text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_general_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    total_requests = sum(data.get("total", 0) for data in user_requests_count.values() if isinstance(data, dict))
    today_requests = sum(data.get("count", 0) for data in user_daily_requests.values() if isinstance(data, dict) and data.get("date") == datetime.now().date())
    
    stats_text = f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    stats_text += f"üì® –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
    stats_text += f"üìÖ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_requests}\n"
    stats_text += f"üíæ –î–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(conversation_memory)}\n"
    stats_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(user_last_request)}\n"
    stats_text += f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {total_requests // max(1, len(user_registration_date))}\n"
    
    await message.answer(stats_text)
    add_admin_log("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(F.text == "üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")
async def handle_tariff_management(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_tariff_management_keyboard())
    add_admin_log("–û—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")

@dp.message(F.text.startswith("üöÄ –í—ã–¥–∞—Ç—å ") | F.text.startswith("‚≠ê –í—ã–¥–∞—Ç—å ") | 
           F.text.startswith("üíé –í—ã–¥–∞—Ç—å ") | F.text.startswith("üëë –í—ã–¥–∞—Ç—å "))
async def handle_give_tariff(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    tariff_mapping = {
        "üöÄ –í—ã–¥–∞—Ç—å Default": "default",
        "‚≠ê –í—ã–¥–∞—Ç—å Pro": "pro",
        "üíé –í—ã–¥–∞—Ç—å Advanced": "advanced", 
        "üëë –í—ã–¥–∞—Ç—å Ultimate": "ultimate"
    }
    
    tariff_key = tariff_mapping.get(message.text)
    if not tariff_key:
        return
    
    set_admin_temp(ADMIN_ID, "action", f"give_tariff_{tariff_key}")
    await message.answer(f"üíé –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–∞—Ä–∏—Ñ–∞ {TARIFFS[tariff_key]['name']}:")
    add_admin_log(f"–ù–∞—á–∞–ª –≤—ã–¥–∞—á—É —Ç–∞—Ä–∏—Ñ–∞ {tariff_key}")

@dp.message(F.text == "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ")
async def handle_reset_tariff(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    set_admin_temp(ADMIN_ID, "action", "reset_tariff")
    await message.answer("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞—Ä–∏—Ñ–∞ (–≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ Default):")
    add_admin_log("–ù–∞—á–∞–ª —Å–±—Ä–æ—Å —Ç–∞—Ä–∏—Ñ–∞")

@dp.message(F.text == "üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π")
async def handle_extend_subscription(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    set_admin_temp(ADMIN_ID, "action", "extend_subscription")
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π:")
    add_admin_log("–ù–∞—á–∞–ª –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def handle_broadcast(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    set_admin_temp(ADMIN_ID, "action", "broadcast")
    await message.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    add_admin_log("–ù–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_search_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    set_admin_temp(ADMIN_ID, "action", "search_user")
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    add_admin_log("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message(F.text == "üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")
async def handle_action_logs(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    logs_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞:\n\n"
    for log in admin_logs[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        timestamp = datetime.fromisoformat(log["timestamp"]).strftime("%m-%d %H:%M:%S")
        action = log['action']
        target = f" (user: {log['target_user']})" if log['target_user'] else ""
        logs_text += f"üïí {timestamp}: {action}{target}\n"
    
    await message.answer(logs_text)
    add_admin_log("–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π")

@dp.message(F.text == "‚öôÔ∏è –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_reset_user_data(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    set_admin_temp(ADMIN_ID, "action", "reset_user_data")
    await message.answer("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–∞–º—è—Ç—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):")
    add_admin_log("–ù–∞—á–∞–ª —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message(F.text == "üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤")
async def handle_reset_daily_limits(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    # –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    for user_id in user_daily_requests:
        user_daily_requests[user_id] = {"date": datetime.now().date(), "count": 0}
    save_data(user_daily_requests, DATA_FILES['user_daily_requests'])
    
    await message.answer("‚úÖ –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã!")
    add_admin_log("–°–±—Ä–æ—Å–∏–ª –≤—Å–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã")

@dp.message(F.text == "‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_back_to_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())

@dp.message(F.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(message.from_user.id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –î–ï–ô–°–¢–í–ò–ô =====
# =======================
@dp.message(lambda message: message.from_user.id == ADMIN_ID and get_admin_temp(ADMIN_ID, "action"))
async def handle_admin_actions(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    action = get_admin_temp(ADMIN_ID, "action")
    user_input = message.text.strip()
    
    try:
        if action.startswith("give_tariff_"):
            tariff_key = action.replace("give_tariff_", "")
            user_id = int(user_input)
            activate_tariff(user_id, tariff_key, 30)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω —Ç–∞—Ä–∏—Ñ {TARIFFS[tariff_key]['name']} –Ω–∞ 30 –¥–Ω–µ–π!")
            add_admin_log(f"–í—ã–¥–∞–ª —Ç–∞—Ä–∏—Ñ {tariff_key}", target_user=user_id)
            
        elif action == "reset_tariff":
            user_id = int(user_input)
            if user_id in user_tariffs:
                user_tariffs[user_id] = "default"
                save_data(user_tariffs, DATA_FILES['user_tariffs'])
            await message.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω –¥–æ Default!")
            add_admin_log("–°–±—Ä–æ—Å–∏–ª —Ç–∞—Ä–∏—Ñ", target_user=user_id)
            
        elif action == "extend_subscription":
            user_id = int(user_input)
            if user_id in user_subscription_end:
                user_subscription_end[user_id] += timedelta(days=30)
            else:
                user_subscription_end[user_id] = datetime.now() + timedelta(days=30)
            save_data(user_subscription_end, DATA_FILES['user_subscription_end'])
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!")
            add_admin_log("–ü—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É", target_user=user_id)
            
        elif action == "broadcast":
            # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users_to_notify = list(user_registration_date.keys())
            success = 0
            failed = 0
            
            await message.answer(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            for user_id in users_to_notify:
                try:
                    await bot.send_message(user_id, user_input)
                    success += 1
                    await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
                except Exception as e:
                    failed += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")
            add_admin_log(f"–°–¥–µ–ª–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É: {user_input[:50]}...")
            
        elif action == "search_user":
            user_id = int(user_input)
            user_info = await get_user_info(user_id)
            await message.answer(user_info)
            add_admin_log("–ò—Å–∫–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", target_user=user_id)
            
        elif action == "reset_user_data":
            user_id = int(user_input)
            # –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in conversation_memory:
                del conversation_memory[user_id]
            if user_id in user_requests_count:
                del user_requests_count[user_id]
            if user_id in user_daily_requests:
                del user_daily_requests[user_id]
                
            save_data(conversation_memory, DATA_FILES['conversation_memory'])
            save_data(user_requests_count, DATA_FILES['user_requests_count'])
            save_data(user_daily_requests, DATA_FILES['user_daily_requests'])
            
            await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω—ã!")
            add_admin_log("–°–±—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", target_user=user_id)
            
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    set_admin_temp(ADMIN_ID, "action", None)

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====
# =======================
async def send_thinking_message(chat_id: int) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–î—É–º–∞—é' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
    message = await bot.send_message(chat_id, "üí≠ –î—É–º–∞—é...")
    return message.message_id

async def delete_thinking_message(chat_id: int, message_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–î—É–º–∞—é'"""
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.message(F.voice)
async def handle_voice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    can_request, error_msg = can_user_make_request(chat_id)
    if not can_request:
        await message.answer(error_msg)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–î—É–º–∞—é"
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        response_text = "üé§ –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
        
        # –£–¥–∞–ª—è–µ–º "–î—É–º–∞—é" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await delete_thinking_message(chat_id, thinking_msg_id)
        concise_response = create_concise_response(response_text)
        await message.answer(concise_response)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        increment_daily_requests(chat_id)
        
    except Exception as e:
        logger.error(f"Voice processing error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º"""
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    can_request, error_msg = can_user_make_request(chat_id)
    if not can_request:
        await message.answer(error_msg)
        return
    
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        if message.caption:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å, —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–µ–π
            response_text = f"üì∏ –í–∏–∂—É —Ñ–æ—Ç–æ! –¢–µ–∫—Å—Ç: '{message.caption}'. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"
        else:
            response_text = "üì∏ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ! –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –æ–ø–∏—à–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å."
        
        await delete_thinking_message(chat_id, thinking_msg_id)
        concise_response = create_concise_response(response_text)
        await message.answer(concise_response)
        increment_daily_requests(chat_id)
        
    except Exception as e:
        logger.error(f"Photo processing error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
async def handle_start_work(message: types.Message):
    await cmd_start(message)

@dp.message(F.text == "üåü –û–±–æ –º–Ω–µ")
async def handle_about(message: types.Message):
    about_text = (
        "ü§ñ –û–±–æ –º–Ω–µ\n\n"
        "–Ø - AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
        "‚Ä¢ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–≥–æ–¥–∞, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–∏—Ñ–æ–≤\n\n"
        "–û—Ç–≤–µ—á–∞—é –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É!")
    await message.answer(about_text, reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: types.Message):
    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await message.answer(settings_text, reply_markup=get_settings_keyboard())

@dp.message(F.text == "üíé –¢–∞—Ä–∏—Ñ—ã")
async def handle_tariffs(message: types.Message):
    tariffs_text = "üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
    
    for tariff_key, tariff_info in TARIFFS.items():
        free_info = " (5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ)" if tariff_info.get("is_free_first", False) else ""
        tariffs_text += f"{tariff_info['name']}{free_info}\n"
        tariffs_text += f"{tariff_info['description']}\n"
        tariffs_text += f"üíµ {tariff_info['price']}\n"
        tariffs_text += f"üìä {tariff_info['daily_limits']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å\n\n"
    
    tariffs_text += "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π üëá"
    await message.answer(tariffs_text, reply_markup=get_tariffs_keyboard())

@dp.message(F.text == "üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ")
async def handle_my_tariff(message: types.Message):
    chat_id = message.chat.id
    current_tariff = get_user_tariff(chat_id)
    tariff_info = TARIFFS[current_tariff]
    remaining_days = get_remaining_days(chat_id)
    remaining_requests = get_remaining_daily_requests(chat_id)
    is_free = is_free_period_active(chat_id)
    
    my_tariff_text = f"üíé –¢–≤–æ–π —Ç–∞—Ä–∏—Ñ: {tariff_info['name']}\n\n"
    
    if is_free:
        my_tariff_text += f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {remaining_days} –¥–Ω–µ–π\n"
    else:
        my_tariff_text += f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
    
    my_tariff_text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}/{tariff_info['daily_limits']}\n"
    my_tariff_text += f"üíæ –ü–∞–º—è—Ç—å: {get_user_memory_limit(chat_id)} —Å–æ–æ–±—â.\n"
    my_tariff_text += f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n\n"
    my_tariff_text += f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    
    for feature in tariff_info['features']:
        my_tariff_text += f"{feature}\n"
    
    if is_free and remaining_days <= 2:
        my_tariff_text += f"\nüí° –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {tariff_info['price']}"
    
    await message.answer(my_tariff_text)

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats(message: types.Message):
    chat_id = message.chat.id
    current_tariff = get_user_tariff(chat_id)
    remaining_days = get_remaining_days(chat_id)
    remaining_requests = get_remaining_daily_requests(chat_id)
    total_requests = user_requests_count.get(chat_id, {}).get("total", 0)
    memory_usage = len(conversation_memory.get(chat_id, []))
    is_free = is_free_period_active(chat_id)
    
    stats_text = f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    
    if is_free:
        stats_text += f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {remaining_days} –¥–Ω–µ–π\n"
    else:
        stats_text += f"üíé –¢–∞—Ä–∏—Ñ: {TARIFFS[current_tariff]['name']}\n"
        stats_text += f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
    
    stats_text += f"üì® –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}/{TARIFFS[current_tariff]['daily_limits']}\n"
    stats_text += f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
    stats_text += f"üíæ –ü–∞–º—è—Ç—å: {memory_usage}/{get_user_memory_limit(chat_id)}\n"
    stats_text += f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n"
    stats_text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if is_subscription_active(chat_id) else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
    
    await message.answer(stats_text)

@dp.message(F.text.in_(["üöÄ Default", "‚≠ê Pro", "üíé Advanced", "üëë Ultimate"]))
async def handle_tariff_selection(message: types.Message):
    tariff_mapping = {
        "üöÄ Default": "default",
        "‚≠ê Pro": "pro", 
        "üíé Advanced": "advanced",
        "üëë Ultimate": "ultimate"
    }
    
    tariff_key = tariff_mapping.get(message.text, "default")
    tariff_info = TARIFFS[tariff_key]
    
    tariff_text = f"{tariff_info['name']}\n\n"
    tariff_text += f"{tariff_info['description']}\n\n"
    
    if tariff_info.get("is_free_first", False):
        tariff_text += f"üéÅ 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∑–∞—Ç–µ–º {tariff_info['price']}\n"
    else:
        tariff_text += f"üíµ {tariff_info['price']}\n"
    
    tariff_text += f"üìä {tariff_info['daily_limits']} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
    tariff_text += f"üíæ –ü–∞–º—è—Ç—å: {TARIFF_MEMORY[tariff_key]} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    tariff_text += f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {TARIFF_COOLDOWNS[tariff_key]} —Å–µ–∫\n\n"
    tariff_text += "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    
    for feature in tariff_info['features']:
        tariff_text += f"{feature}\n"
    
    tariff_text += f"\nüíé –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    
    await message.answer(tariff_text)

@dp.message(F.text == "üé≠ –†–µ–∂–∏–º—ã AI")
async def handle_modes(message: types.Message):
    mode_text = "üé≠ –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    await message.answer(mode_text, reply_markup=get_mode_keyboard())

@dp.message(F.text.in_(["üßò –°–ø–æ–∫–æ–π–Ω—ã–π", "üí¨ –û–±—ã—á–Ω—ã–π", "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π", "üß† –£–º–Ω—ã–π"]))
async def handle_mode_selection(message: types.Message):
    chat_id = message.chat.id
    mode_mapping = {
        "üßò –°–ø–æ–∫–æ–π–Ω—ã–π": "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "üí¨ –û–±—ã—á–Ω—ã–π": "–æ–±—ã—á–Ω—ã–π", 
        "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π": "–∫–æ—Ä–æ—Ç–∫–∏–π",
        "üß† –£–º–Ω—ã–π": "—É–º–Ω—ã–π"
    }
    
    new_mode = mode_mapping.get(message.text, "–æ–±—ã—á–Ω—ã–π")
    user_modes[chat_id] = new_mode
    save_data(user_modes, DATA_FILES['user_modes'])
    
    await message.answer(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {message.text}", reply_markup=get_settings_keyboard())

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(message.from_user.id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
# =======================
@dp.message()
async def handle_all_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    user_text = message.text or ""
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    button_texts = [
        "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "üåü –û–±–æ –º–Ω–µ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å", 
        "üå§Ô∏è –ü–æ–≥–æ–¥–∞", "üíé –¢–∞—Ä–∏—Ñ—ã", "üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üé≠ –†–µ–∂–∏–º—ã AI", "üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üöÄ Default", "‚≠ê Pro",
        "üíé Advanced", "üëë Ultimate", "üßò –°–ø–æ–∫–æ–π–Ω—ã–π", "üí¨ –û–±—ã—á–Ω—ã–π",
        "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π", "üß† –£–º–Ω—ã–π", "üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
        "üéØ –î–µ–ª–æ–≤–æ–π", "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", "üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä",
        "üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞", "‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", "üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üéÅ –°—é—Ä–ø—Ä–∏–∑",
        "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
        "üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", "‚öôÔ∏è –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤",
        "üöÄ –í—ã–¥–∞—Ç—å Default", "‚≠ê –í—ã–¥–∞—Ç—å Pro", "üíé –í—ã–¥–∞—Ç—å Advanced", "üëë –í—ã–¥–∞—Ç—å Ultimate",
        "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π", "‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    
    if user_text.startswith('/') or user_text in button_texts:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    can_request, error_msg = can_user_make_request(chat_id)
    if not can_request:
        await message.answer(error_msg)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    current_time = time.time()
    last_request = user_last_request.get(chat_id, 0)
    cooldown = get_user_cooldown(chat_id)
    
    if current_time - last_request < cooldown:
        remaining = cooldown - int(current_time - last_request)
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫.")
        return
    
    user_last_request[chat_id] = current_time
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–î—É–º–∞—é"
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        increment_daily_requests(chat_id)
        user_requests_count[chat_id] = user_requests_count.get(chat_id, {})
        user_requests_count[chat_id]["total"] = user_requests_count[chat_id].get("total", 0) + 1
        save_data(user_requests_count, DATA_FILES['user_requests_count'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
        user_text_lower = user_text.lower()
        
        if any(word in user_text_lower for word in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É"]):
            city = user_text_lower.replace("–ø–æ–≥–æ–¥–∞", "").replace("–ø–æ–≥–æ–¥—É", "").strip()
            if not city:
                city = "–ú–æ—Å–∫–≤–∞"
            weather_info = await get_weather(city)
            response_text = weather_info
            
        elif "–∫—É—Ä—Å" in user_text_lower or "–≤–∞–ª—é—Ç" in user_text_lower:
            response_text = "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\nUSD ‚Üí 90.5 ‚ÇΩ\nEUR ‚Üí 98.2 ‚ÇΩ\nCNY ‚Üí 12.5 ‚ÇΩ"
            
        elif any(word in user_text_lower for word in ["–ø–æ—Å—á–∏—Ç–∞–π", "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "="]):
            # –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            try:
                expr = user_text_lower.replace("–ø–æ—Å—á–∏—Ç–∞–π", "").replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "").replace("=", "").strip()
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
                allowed_chars = set('0123456789+-*/.() ')
                if all(c in allowed_chars for c in expr):
                    result = eval(expr)
                    response_text = f"üî¢ {expr} = {result}"
                else:
                    response_text = "‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            except:
                response_text = "‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å"
                
        else:
            # AI-–æ—Ç–≤–µ—Ç
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if chat_id not in conversation_memory:
                    conversation_memory[chat_id] = []
                
                messages = [
                    {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ —Å—É—Ç—å. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."},
                    {"role": "user", "content": user_text}
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                for msg in conversation_memory[chat_id][-3:]:  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
                    messages.insert(1, msg)
                
                response = client.chat.complete(model=model, messages=messages)
                ai_text = response.choices[0].message.content
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                conversation_memory[chat_id].append({"role": "user", "content": user_text})
                conversation_memory[chat_id].append({"role": "assistant", "content": ai_text})
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å
                memory_limit = get_user_memory_limit(chat_id)
                if len(conversation_memory[chat_id]) > memory_limit:
                    conversation_memory[chat_id] = conversation_memory[chat_id][-memory_limit:]
                
                save_data(conversation_memory, DATA_FILES['conversation_memory'])
                response_text = ai_text
                
            except Exception as e:
                logger.error(f"AI error: {e}")
                response_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
        await delete_thinking_message(chat_id, thinking_msg_id)
        concise_response = create_concise_response(response_text)
        await message.answer(concise_response)
        
    except Exception as e:
        logger.error(f"Handler error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

async def get_weather(city: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
    try:
        city_clean = city.strip()
        city_mapping = {
            "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
            "–º–æ—Å–∫–≤–∞": "Moscow", 
            "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
            "—Å–ø–±": "Saint Petersburg",
            "–ø–∏—Ç–µ—Ä": "Saint Petersburg"
        }

        api_city = city_mapping.get(city_clean.lower(), city_clean)
        url = f"http://api.openweathermap.org/data/2.5/weather?q={api_city}&appid={openweather_api_key}&units=metric&lang=ru"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    temp = data["main"]["temp"]
                    feels = data["main"]["feels_like"]
                    desc = data["weather"][0]["description"]
                    return f"üå§Ô∏è {city_clean.title()}: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {feels}¬∞C), {desc}"
                else:
                    return f"üå´Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city_clean}"
    except Exception as e:
        return "üå™Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"

# =======================
# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
# =======================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üíé –¢–∞—Ä–∏—Ñ—ã: {len(TARIFFS)} –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    print(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_registration_date)}")
    print(f"üõ†Ô∏è –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    asyncio.run(main())
