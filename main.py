from mistralai import MistralClient
import asyncio
import logging
import random
import aiohttp
from aiogram import Bot, Dispatcher, types,
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
from typing import Optional, Dict, Any
import os
# =======================
# ===== CONFIG ==========
# =======================


mistral_api_key = os.getenv('nIMvGkfioIpMtQeSO2n8ssm6nuJRyo7Q')
openweather_api_key = os.getenv('dbd08a834f628d369a8edb55b210171e') 
TOKEN = os.getenv('8229856813:AAEkQq-4zdJKAmovgq69URcqKDzN4_BMqrw')

ADMIN_ID = 6584350034

# –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
USER_LIMITS = {"–∫–æ—Ä–æ—Ç–∫–∏–π": 13, "–æ–±—ã—á–Ω—ã–π": 10, "—Å–ø–æ–∫–æ–π–Ω—ã–π": 15, "—É–º–Ω—ã–π": 3}

model = "mistral-large-latest"
client = MistralClient(api_key=mistral_api_key)

chat_style: Dict[int, str] = {}
chat_memory: Dict[int, Dict[str, Any]] = {}
user_requests_count: Dict[int,
                          Dict[str,
                               int]] = {}  # –¢–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
user_last_messages: Dict[int, str] = {}
user_modes: Dict[int, str] = {}

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

# =======================
# ===== EMOJIS ==========
# =======================
emojis = {
    "friendly": ["üí°", "üëç", "üëå", "üéØ", "‚ö°", "üîç", "üí´", "üåü"],
    "serious": ["üí≠", "üìö", "üéØ", "‚ö°", "üîç", "üìä", "üí°", "üéì"],
    "balanced": ["üí°", "üëç", "üéØ", "‚ö°", "üí´", "üåü", "üîç"]
}


def get_emoji(style: str = "balanced") -> str:
    return random.choice(emojis.get(style, emojis["balanced"]))


# =======================
# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
# =======================
def get_main_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    buttons = [[
        KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç"),
        KeyboardButton(text="‚ÑπÔ∏è –û–±–æ –º–Ω–µ")
    ],
               [
                   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                   KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
                   KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞")
               ]]
    if chat_id == ADMIN_ID:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")])
    return ReplyKeyboardMarkup(keyboard=buttons,
                               resize_keyboard=True,
                               input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")


def get_settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üé≠ –ú–∞–Ω–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è"),
        KeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
                               resize_keyboard=True)


def get_mode_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15 –∑–∞–ø—Ä–æ—Å–æ–≤)"),
            KeyboardButton(text="üí¨ –û–±—ã—á–Ω—ã–π (10 –∑–∞–ø—Ä–æ—Å–æ–≤)")
        ],
                  [
                      KeyboardButton(text="‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13 –∑–∞–ø—Ä–æ—Å–æ–≤)"),
                      KeyboardButton(text="üß† –£–º–Ω—ã–π (3 –∑–∞–ø—Ä–æ—Å–∞)")
                  ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]],
        resize_keyboard=True)


def get_tariffs_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã"),
        KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]],
                               resize_keyboard=True)


def get_weather_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"),
        KeyboardButton(text="–ú–æ—Å–∫–≤–∞")
    ], [
        KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
        KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    ]],
                               resize_keyboard=True)


def get_admin_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="/view_memory"),
            KeyboardButton(text="/clear_memory")
        ],
                  [
                      KeyboardButton(text="/reset_user"),
                      KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
                  ]],
        resize_keyboard=True)


# =======================
# ===== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ =====
# =======================
SPECIAL_RESPONSES = {
    "–∫—Ç–æ —Ç—ã":
    "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫! ü§ñ‚ú®",
    "–ø—Ä–∏–≤–µ—Ç":
    "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä",
    "–∫–∞–∫ –¥–µ–ª–∞":
    "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üí™",
    "—Å–ø–∞—Å–∏–±–æ":
    "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! ‚ù§Ô∏è",
    "–ø–æ–∫–∞":
    "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! üëã",
    "—à—É—Ç–∫–∞":
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤—Å–µ–≥–¥–∞ —Ö–æ–¥–∏—Ç –≤ –¥—É—à —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –Ω—É–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º step by step! üòÑ"
}


def get_style_name(style: str) -> str:
    names = {
        "friendly": "–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π üí´",
        "balanced": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚öñÔ∏è",
        "serious": "–î–µ–ª–æ–≤–æ–π üéØ"
    }
    return names.get(style, "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚öñÔ∏è")


def get_mode_description(mode: str) -> str:
    descriptions = {
        "—Å–ø–æ–∫–æ–π–Ω—ã–π":
        "üßò *–°–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º*\n‚Ä¢ –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n‚Ä¢ 15 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è",
        "–æ–±—ã—á–Ω—ã–π":
        "üí¨ *–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º*\n‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n‚Ä¢ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á",
        "–∫–æ—Ä–æ—Ç–∫–∏–π":
        "‚ö° *–ö–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∂–∏–º*\n‚Ä¢ –ö—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n‚Ä¢ 13 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –º–∏–Ω–∏–º—É–º–µ —Å–ª–æ–≤",
        "—É–º–Ω—ã–π":
        "üß† *–£–º–Ω—ã–π —Ä–µ–∂–∏–º*\n‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑\n‚Ä¢ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞\n‚Ä¢ –°–∞–º—ã–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"
    }
    return descriptions.get(mode, "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")


def get_user_remaining_requests(chat_id: int, mode: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞"""
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    if mode not in user_requests_count[chat_id]:
        user_requests_count[chat_id][mode] = 0
    return USER_LIMITS[mode] - user_requests_count[chat_id][mode]


# =======================
# ===== –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í =====
# =======================
def format_ai_response(text: str, style: str, mode: str) -> str:
    emoji = get_emoji(style)
    formatted = text.strip()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º –∫ –æ—Ç–≤–µ—Ç—É
    if mode == "–∫–æ—Ä–æ—Ç–∫–∏–π":
        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
        sentences = formatted.split('. ')
        if len(sentences) > 2:
            formatted = '. '.join(sentences[:2]) + '.'
    elif mode == "—Å–ø–æ–∫–æ–π–Ω—ã–π":
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ–∫–æ–π–Ω—ã–µ —ç–º–æ–¥–∑–∏
        calm_emojis = ["üåø", "üçÉ", "üåº", "üå∏", "üíÆ", "ü™∑"]
        if random.random() > 0.7:
            formatted = f"{random.choice(calm_emojis)} {formatted}"

    keywords = [
        "–≤–∞–∂–Ω–æ", "—Å—Ä–æ—á–Ω–æ", "–æ—à–∏–±–∫–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "—Å–æ–≤–µ—Ç", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
    ]
    for kw in keywords:
        formatted = formatted.replace(kw, f"*{kw}*")

    if style == "serious":
        formatted = f"üí¨ ```\n{formatted}\n```"
    elif style == "friendly":
        formatted = f"{emoji} *{formatted}* {emoji}"
    else:
        formatted = f"{emoji} _{formatted}_ {emoji}"

    return formatted


async def send_long_message(message: types.Message,
                            text: str,
                            style: str = "balanced",
                            mode: str = "–æ–±—ã—á–Ω—ã–π",
                            chunk_size: int = 4000):
    formatted = format_ai_response(text, style, mode)
    for i in range(0, len(formatted), chunk_size):
        try:
            await message.answer(formatted[i:i + chunk_size],
                                 parse_mode="Markdown")
        except TelegramBadRequest:
            await message.answer(text[i:i + chunk_size])


# =======================
# ===== –ü–û–ì–û–î–ê =====
# =======================
async def get_weather(city: str) -> str:
    city_clean = city.strip()
    if not city_clean:
        return "‚ùì –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'"

    city_mapping = {
        "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
        "–º–æ—Å–∫–≤–∞": "Moscow",
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
        "—Å–ø–±": "Saint Petersburg",
        "–ø–∏—Ç–µ—Ä": "Saint Petersburg"
    }

    api_city = city_mapping.get(city_clean.lower(), city_clean)

    url = f"http://api.openweathermap.org/data/2.5/weather?q={api_city}&appid={openweather_api_key}&units=metric&lang=ru"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city_clean}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
                data = await resp.json()
                temp = data["main"]["temp"]
                feels = data["main"]["feels_like"]
                desc = data["weather"][0]["description"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                return (f"üå§ –ü–æ–≥–æ–¥–∞ –≤ *{city_clean.title()}*:\n"
                        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels}¬∞C\n"
                        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city_clean}'."


# =======================
# ===== –ü–ê–ú–Ø–¢–¨ –¢–ï–ú =====
# =======================
def start_new_topic(chat_id: int, topic_name: str):
    if chat_id not in chat_memory:
        chat_memory[chat_id] = {"current_topic": None, "topics": {}}
    chat_memory[chat_id]["current_topic"] = topic_name
    if topic_name not in chat_memory[chat_id]["topics"]:
        chat_memory[chat_id]["topics"][topic_name] = []


def add_to_memory(chat_id: int, text: str):
    if chat_id in chat_memory and chat_memory[chat_id]["current_topic"]:
        topic = chat_memory[chat_id]["current_topic"]
        chat_memory[chat_id]["topics"][topic].append(text)


def end_current_topic(chat_id: int):
    if chat_id in chat_memory:
        chat_memory[chat_id]["current_topic"] = None


# =======================
# ===== –ö–û–ú–ê–ù–î–´ =========
# =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    chat_style[chat_id] = "balanced"
    user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"  # –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    for mode in USER_LIMITS.keys():
        if mode not in user_requests_count[chat_id]:
            user_requests_count[chat_id][mode] = 0

    chat_memory.setdefault(chat_id, {"current_topic": None, "topics": {}})

    current_mode = user_modes[chat_id]
    remaining = get_user_remaining_requests(chat_id, current_mode)

    welcome_text = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫!* üåü\n\n"
        "–Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω!\n\n"
        f"üìä *–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:* {get_mode_description(current_mode)}\n"
        f"üîÑ *–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤:* {remaining}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá")

    await message.answer(welcome_text,
                         parse_mode="Markdown",
                         reply_markup=get_main_keyboard(chat_id))


@dp.message(Command("style"))
async def cmd_style(message: types.Message):
    current_style = chat_style.get(message.chat.id, "balanced")
    style_text = ("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è:*\n\n"
                  f"–¢–µ–∫—É—â–∏–π: {get_style_name(current_style)}\n\n"
                  "–í–∞—Ä–∏–∞–Ω—Ç—ã:\n"
                  "‚Ä¢ /style_balanced - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π\n"
                  "‚Ä¢ /style_serious - –¥–µ–ª–æ–≤–æ–π\n"
                  "‚Ä¢ /style_friendly - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π")
    await message.answer(style_text, parse_mode="Markdown")


@dp.message(Command("style_friendly"))
async def cmd_style_friendly(message: types.Message):
    chat_style[message.chat.id] = "friendly"
    await message.answer("üí´ –°—Ç–∏–ª—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π",
                         reply_markup=get_main_keyboard(message.chat.id))


@dp.message(Command("style_balanced"))
async def cmd_style_balanced(message: types.Message):
    chat_style[message.chat.id] = "balanced"
    await message.answer("‚öñÔ∏è –°—Ç–∏–ª—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
                         reply_markup=get_main_keyboard(message.chat.id))


@dp.message(Command("style_serious"))
async def cmd_style_serious(message: types.Message):
    chat_style[message.chat.id] = "serious"
    await message.answer("üéØ –°—Ç–∏–ª—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –¥–µ–ª–æ–≤–æ–π",
                         reply_markup=get_main_keyboard(message.chat.id))


@dp.message(Command("view_memory"))
async def view_memory(message: types.Message):
    if message.chat.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    memory = chat_memory.get(message.chat.id, {"topics": {}})
    await message.answer(f"üß† –ü–∞–º—è—Ç—å: {memory}",
                         reply_markup=get_admin_keyboard())


@dp.message(Command("clear_memory"))
async def clear_memory(message: types.Message):
    if message.chat.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    chat_memory[message.chat.id] = {"current_topic": None, "topics": {}}
    await message.answer("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.",
                         reply_markup=get_admin_keyboard())


@dp.message(Command("reset_user"))
async def reset_user(message: types.Message):
    if message.chat.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    chat_memory.clear()
    user_requests_count.clear()
    user_last_messages.clear()
    user_modes.clear()
    await message.answer("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.",
                         reply_markup=get_admin_keyboard())


# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö =====
# =======================
@dp.message(
    F.text.in_([
        "üöÄ –°—Ç–∞—Ä—Ç", "‚ÑπÔ∏è –û–±–æ –º–Ω–µ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å", "üå§ –ü–æ–≥–æ–¥–∞",
        "üëë –ê–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    ]))
async def handle_main_buttons(message: types.Message):
    text = message.text
    chat_id = message.chat.id

    if text == "üå§ –ü–æ–≥–æ–¥–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã:",
                             reply_markup=get_weather_keyboard())
    elif text == "üöÄ –°—Ç–∞—Ä—Ç":
        await cmd_start(message)
    elif text == "‚ÑπÔ∏è –û–±–æ –º–Ω–µ":
        about_text = ("ü§ñ *–û–±–æ –º–Ω–µ*\n\n"
                      "–Ø - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è! üöÄ\n\n"
                      "üåü *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:*\n"
                      "‚Ä¢ üßò –°–ø–æ–∫–æ–π–Ω—ã–π - 15 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                      "‚Ä¢ üí¨ –û–±—ã—á–Ω—ã–π - 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                      "‚Ä¢ ‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π - 13 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                      "‚Ä¢ üß† –£–º–Ω—ã–π - 3 –∑–∞–ø—Ä–æ—Å–∞\n\n"
                      "üí´ *–ß—Ç–æ –¥–µ–ª–∞—é –ª—É—á—à–µ –≤—Å–µ–≥–æ:*\n"
                      "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤\n"
                      "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                      "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á\n\n"
                      "–ù–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π —Ä–µ–∂–∏–º –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'! ‚ú®")
        await message.answer(about_text,
                             parse_mode="Markdown",
                             reply_markup=get_main_keyboard(chat_id))
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                             parse_mode="Markdown",
                             reply_markup=get_settings_keyboard())
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
        remaining = get_user_remaining_requests(chat_id, current_mode)
        help_text = ("‚ùì *–ö–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n\n"
                     "üìù *–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏:*\n"
                     "‚Ä¢ '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ...'\n"
                     "‚Ä¢ '–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç' (–æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                     "‚Ä¢ '–î–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏'\n\n"
                     "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤:*\n"
                     "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–ú–∞–Ω–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è'\n"
                     "‚Ä¢ –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∂–∏–º\n\n"
                     f"üìä *–¢–≤–æ–π —Ä–µ–∂–∏–º:* {current_mode}\n"
                     f"üîÑ *–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤:* {remaining}")
        await message.answer(help_text,
                             parse_mode="Markdown",
                             reply_markup=get_main_keyboard(chat_id))
    elif text == "üëë –ê–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" and chat_id == ADMIN_ID:
        await message.answer("üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*",
                             parse_mode="Markdown",
                             reply_markup=get_admin_keyboard())


@dp.message(
    F.text.in_(["üé≠ –ú–∞–Ω–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è", "üí≥ –¢–∞—Ä–∏—Ñ—ã", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"]))
async def handle_settings_buttons(message: types.Message):
    text = message.text
    chat_id = message.chat.id

    if text == "üé≠ –ú–∞–Ω–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è":
        current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
        remaining = get_user_remaining_requests(chat_id, current_mode)
        mode_text = ("üé≠ *–ú–∞–Ω–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è*\n\n"
                     f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {get_mode_description(current_mode)}\n"
                     f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n\n"
                     "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º:\n"
                     "‚Ä¢ üßò –°–ø–æ–∫–æ–π–Ω—ã–π - 15 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                     "‚Ä¢ üí¨ –û–±—ã—á–Ω—ã–π - 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                     "‚Ä¢ ‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π - 13 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                     "‚Ä¢ üß† –£–º–Ω—ã–π - 3 –∑–∞–ø—Ä–æ—Å–∞")
        await message.answer(mode_text,
                             parse_mode="Markdown",
                             reply_markup=get_mode_keyboard())
    elif text == "üí≥ –¢–∞—Ä–∏—Ñ—ã":
        current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
        stats_text = (
            "üí≥ *–¢–∞—Ä–∏—Ñ—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üìä *–¢–≤–æ–π —Ä–µ–∂–∏–º:* {current_mode}\n"
            f"üîÑ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {user_requests_count.get(chat_id, {}).get(current_mode, 0)}\n"
            f"üìà *–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤:* {get_user_remaining_requests(chat_id, current_mode)}\n\n"
            "üí∞ *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:*\n"
            "‚Ä¢ –°–ø–æ–∫–æ–π–Ω—ã–π: 15 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –û–±—ã—á–Ω—ã–π: 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π: 13 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –£–º–Ω—ã–π: 3 –∑–∞–ø—Ä–æ—Å–∞\n\n"
            "‚ö° *–ö–∞–∂–¥—ã–π —Ä–µ–∂–∏–º –∏–º–µ–µ—Ç —Å–≤–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!*")
        await message.answer(stats_text,
                             parse_mode="Markdown",
                             reply_markup=get_tariffs_keyboard())
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º":
        await message.answer("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*",
                             parse_mode="Markdown",
                             reply_markup=get_settings_keyboard())


@dp.message(
    F.text.in_([
        "üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15 –∑–∞–ø—Ä–æ—Å–æ–≤)", "üí¨ –û–±—ã—á–Ω—ã–π (10 –∑–∞–ø—Ä–æ—Å–æ–≤)",
        "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13 –∑–∞–ø—Ä–æ—Å–æ–≤)", "üß† –£–º–Ω—ã–π (3 –∑–∞–ø—Ä–æ—Å–∞)"
    ]))
async def handle_mode_buttons(message: types.Message):

    chat_id = message.chat.id
    text = str(message.text or "")  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ

    mode_mapping = {
        "üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15 –∑–∞–ø—Ä–æ—Å–æ–≤)": "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "üí¨ –û–±—ã—á–Ω—ã–π (10 –∑–∞–ø—Ä–æ—Å–æ–≤)": "–æ–±—ã—á–Ω—ã–π",
        "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13 –∑–∞–ø—Ä–æ—Å–æ–≤)": "–∫–æ—Ä–æ—Ç–∫–∏–π",
        "üß† –£–º–Ω—ã–π (3 –∑–∞–ø—Ä–æ—Å–∞)": "—É–º–Ω—ã–π"
    }

    new_mode = mode_mapping.get(text, "–æ–±—ã—á–Ω—ã–π")

    # old_mode –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
    old_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")

    user_modes[chat_id] = new_mode

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    if new_mode not in user_requests_count[chat_id]:
        user_requests_count[chat_id][new_mode] = 0

    remaining = USER_LIMITS[new_mode] - user_requests_count[chat_id][new_mode]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if chat_id not in user_modes:
        user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"

    old_mode = user_modes[chat_id]
    user_modes[chat_id] = new_mode

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    if new_mode not in user_requests_count[chat_id]:
        user_requests_count[chat_id][new_mode] = 0

    remaining = USER_LIMITS[new_mode] - user_requests_count[chat_id][new_mode]

    # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫! –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
    remaining = get_user_remaining_requests(chat_id, new_mode)

    success_text = (f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω!\n\n"
                    f"{get_mode_description(new_mode)}\n\n"
                    f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}")
    await message.answer(success_text,
                         parse_mode="Markdown",
                         reply_markup=get_settings_keyboard())


@dp.message(F.text.in_(["üí∞ –ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
async def handle_tariff_buttons(message: types.Message):
    text = message.text
    chat_id = message.chat.id

    if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
        remaining = get_user_remaining_requests(chat_id, current_mode)
        used = user_requests_count.get(chat_id, {}).get(current_mode, 0)

        stats_text = ("üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                      f"üé≠ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}\n"
                      f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{USER_LIMITS[current_mode]}\n"
                      f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}\n\n"
                      "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ä–µ–∂–∏–º–∞–º:*\n")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ä–µ–∂–∏–º–∞–º
        for mode in USER_LIMITS.keys():
            mode_used = user_requests_count.get(chat_id, {}).get(mode, 0)
            mode_remaining = USER_LIMITS[mode] - mode_used
            stats_text += f"‚Ä¢ {mode}: {mode_used}/{USER_LIMITS[mode]} ({mode_remaining} –æ—Å—Ç–∞–ª–æ—Å—å)\n"

        await message.answer(stats_text,
                             parse_mode="Markdown",
                             reply_markup=get_tariffs_keyboard())
    elif text == "üí∞ –ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã":
        await message.answer(
            "üí∞ *–ü–æ–∫—É–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤*\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã.\n\n"
            "‚ö° *–ö–∞–∂–¥—ã–π —Ä–µ–∂–∏–º –∏–º–µ–µ—Ç —Å–≤–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!*",
            parse_mode="Markdown",
            reply_markup=get_tariffs_keyboard())


@dp.message(F.text.in_(["–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]))
async def send_weather_city(message: types.Message):
    try:
        city = str(message.text)
        weather = await get_weather(city)
        await message.answer(weather,
                             parse_mode="Markdown",
                             reply_markup=get_main_keyboard(message.chat.id))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_weather_city: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã",
                             reply_markup=get_main_keyboard(message.chat.id))


@dp.message(F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]))
async def handle_back_buttons(message: types.Message):
    chat_id = message.chat.id
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=get_main_keyboard(chat_id))


# =======================
# ===== –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–† =====
# =======================
@dp.message()
async def main_handler(message: types.Message):
    chat_id = message.chat.id
    user_text = (message.text or "").strip()
    style = chat_style.get(chat_id, "balanced")
    mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")

    if not user_text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    if user_text.startswith("/"):
        return

    # –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã –±–µ–∑ –ª–∏–º–∏—Ç–∞)
    if chat_id != ADMIN_ID:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if chat_id not in user_requests_count:
            user_requests_count[chat_id] = {}
        if mode not in user_requests_count[chat_id]:
            user_requests_count[chat_id][mode] = 0

        remaining = get_user_remaining_requests(chat_id, mode)

        if remaining <= 0:
            await message.answer(
                f"‚ö†Ô∏è *–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"
                f"–†–µ–∂–∏–º: {mode}\n"
                f"–õ–∏–º–∏—Ç: {USER_LIMITS[mode]} –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                "‚ö° –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!",
                parse_mode="Markdown")
            return

        user_requests_count[chat_id][mode] += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_last_messages[chat_id] = user_text

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    user_text_lower = user_text.lower().strip()

    if user_text_lower in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ —Å–≤—è–∑–∏"]:
        await message.answer("–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! üëã")
        return

    special_found = False
    for key, value in SPECIAL_RESPONSES.items():
        if key in user_text_lower and key != "–ø–æ–∫–∞":
            await message.answer(value)
            special_found = True
            break

    if special_found:
        return

    # –ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
    if any(word in user_text_lower
           for word in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]):
        city = user_text_lower
        for w in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–≤", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–π"]:
            city = city.replace(w, "").strip()
        city = city.replace(",", "").strip()

        if not city:
            await message.answer("‚ùì –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞'")
            return

        weather = await get_weather(city)
        await message.answer(weather, parse_mode="Markdown")
        return

    # –°—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if "–∫—Ä–∞—Å–∏–≤–µ–µ" in user_text_lower or "–ª—É—á—à–µ" in user_text_lower or "—Ö—É–∂–µ" in user_text_lower:
        await message.answer(
            f"ü§î –°—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ ‚Äî {random.choice(['–ø–µ—Ä–≤–æ–µ', '–≤—Ç–æ—Ä–æ–µ', '–æ–±–∞ —Ö–æ—Ä–æ—à–∏–µ'])}"
        )
        return

    # –ü–∞–º—è—Ç—å
    chat_memory.setdefault(chat_id, {"current_topic": None, "topics": {}})
    if chat_memory[chat_id]["current_topic"] is None:
        start_new_topic(chat_id, user_text[:20])
    add_to_memory(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}")

    # –û–±—â–µ–Ω–∏–µ —Å AI
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        system_prompts = {
            "—Å–ø–æ–∫–æ–π–Ω—ã–π":
            "–¢—ã —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.",
            "–æ–±—ã—á–Ω—ã–π":
            "–¢—ã —É–º–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–∞—Ö.",
            "–∫–æ—Ä–æ—Ç–∫–∏–π":
            "–¢—ã –º–∞—Å—Ç–µ—Ä –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—Ç—å.",
            "—É–º–Ω—ã–π":
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–∞–≤–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
        }

        system_prompt = system_prompts.get(
            mode, "–¢—ã —É–º–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫.")
        user_content = user_text

        # –î–ª—è —É–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if mode == "—É–º–Ω—ã–π":
            system_prompt += " –¢—â–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –∏ –¥–∞–≤–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-—Å–æ–æ–±—â–µ–Ω–∏–π
        if message.reply_to_message and message.reply_to_message.text:
            replied_text = message.reply_to_message.text

            if any(w in user_text_lower for w in [
                    "–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å", "—É–ª—É—á—à–∏—Ç—å", "—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å", "–ø–æ–∫—Ä—É—á–µ",
                    "–ø–æ—Å–æ–≤–µ—Ç—É–π", "–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–≤–µ—Ä—Å–∏–∏"
            ]):
                system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏."
                user_content = f"–ü—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {replied_text}"

            elif any(
                    w in user_text_lower for w in
                ["—Å–æ–∫—Ä–∞—Ç–∏", "—Å–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ", "—É–∫–æ—Ä–æ—Ç–∏", "–∫—Ä–∞—Ç–∫–æ", "–∫–æ—Ä–æ—á–µ"]):
                system_prompt = "–¢—ã –º–∞—Å—Ç–µ—Ä —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤. –°–æ—Ö—Ä–∞–Ω—è–π –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –∏ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏."
                user_content = f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {replied_text}"

            elif any(w in user_text_lower for w in [
                    "–Ω–æ—Ä–º–∞–ª—å–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–∏—Å–ø—Ä–∞–≤–∏—Ç—å", "–º–Ω–µ–Ω–∏–µ",
                    "—á—Ç–æ –¥—É–º–∞–µ—à—å", "–∫—Ä–∏—Ç–∏–∫–∞", "—Å–æ–≤–µ—Ç"
            ]):
                system_prompt = "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Ç–µ–∫—Å—Ç—É."
                user_content = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {replied_text}. –í–æ–ø—Ä–æ—Å: {user_text}"

        response = client.chat.complete(model=model,
                                        messages=[{
                                            "role": "system",
                                            "content": system_prompt
                                        }, {
                                            "role": "user",
                                            "content": user_content
                                        }])
        ai_text = response.choices[0].message.content

        if not ai_text:
            ai_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"

        add_to_memory(chat_id, f"AI: {ai_text}")
        await send_long_message(message, str(ai_text), style, mode)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {e}")
        await message.answer("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# =======================
# ===== RUN BOT =========
# =======================
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("üöÄ AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∂–∏–º–æ–≤ –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())


