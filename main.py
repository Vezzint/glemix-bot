import asyncio
import logging
import random
import aiohttp
import time
import base64
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from typing import Dict, Any, List, Optional
import os
from mistralai import Mistral
import pickle
import json

# =======================
# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
# =======================
mistral_api_key = os.getenv('MISTRAL_API_KEY', 'nIMvGkfioIpMtQeSO2n8ssm6nuJRyo7Q')
openweather_api_key = os.getenv('OPENWEATHER_API_KEY', 'dbd08a834f628d369a8edb55b210171e')
TOKEN = os.getenv('BOT_TOKEN', '8229856813:AAEkQq-4zdJKAmovgq69URcqKDzN4_BMqrw')

ADMIN_ID = 6584350034

# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)
FREE_PERIOD_DAYS = 5

# –¢–∞—Ä–∏—Ñ—ã (—Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –≤ –º–µ—Å—è—Ü)
TARIFFS = {
    "default": {
        "name": "üöÄ Default",
        "days": 30,
        "description": "–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø",
        "features": [
            "‚úÖ 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å",
            "‚úÖ –ü–∞–º—è—Ç—å: 10 —Å–æ–æ–±—â–µ–Ω–∏–π", 
            "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã AI",
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: 5 —Å–µ–∫"
        ],
        "price": "10 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 20,
        "is_free_first": True
    },
    "pro": {
        "name": "‚≠ê Pro", 
        "days": 30,
        "description": "–î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "features": [
            "‚úÖ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å",
            "‚úÖ –ü–∞–º—è—Ç—å: 20 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã AI",
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 3 —Å–µ–∫"
        ],
        "price": "50 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 50,
        "is_free_first": False
    },
    "advanced": {
        "name": "üíé Advanced",
        "days": 30,
        "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "features": [
            "‚úÖ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å", 
            "‚úÖ –ü–∞–º—è—Ç—å: 35 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 2 —Å–µ–∫"
        ],
        "price": "150 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 100,
        "is_free_first": False
    },
    "ultimate": {
        "name": "üëë Ultimate",
        "days": 30, 
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "features": [
            "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
            "‚úÖ –ü–∞–º—è—Ç—å: 100 —Å–æ–æ–±—â–µ–Ω–∏–π",
            "‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: 1 —Å–µ–∫",
            "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ],
        "price": "300 ‚ÇΩ/–º–µ—Å—è—Ü",
        "daily_limits": 99999,
        "is_free_first": False
    }
}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
TARIFF_COOLDOWNS = {
    "default": 5,
    "pro": 3,
    "advanced": 2, 
    "ultimate": 1
}

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤
TARIFF_MEMORY = {
    "default": 10,
    "pro": 20,
    "advanced": 35,
    "ultimate": 100
}

# –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏" –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
HOMEWORK_FREE_LIMITS = 9

model = "mistral-large-latest"
client = Mistral(api_key=mistral_api_key)

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILES = {
    'user_registration_date': 'user_registration_date.pkl',
    'conversation_memory': 'conversation_memory.pkl',
    'chat_style': 'chat_style.pkl',
    'user_requests_count': 'user_requests_count.pkl',
    'user_modes': 'user_modes.pkl',
    'user_tariffs': 'user_tariffs.pkl',
    'user_subscription_end': 'user_subscription_end.pkl',
    'user_daily_requests': 'user_daily_requests.pkl',
    'admin_logs': 'admin_logs.pkl',
    'admin_temp_data': 'admin_temp_data.pkl',
    'user_homework_requests': 'user_homework_requests.pkl',
    'user_promo_codes': 'user_promo_codes.pkl',
    'user_language': 'user_language.pkl'
}

# =======================
# ===== –ë–û–õ–¨–®–ê–Ø –ë–ê–ó–ê –ì–û–†–û–î–û–í –î–õ–Ø –ü–û–ì–û–î–´ =====
# =======================
CITY_MAPPING = {
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
    "–º–æ—Å–∫–≤–∞": "Moscow", "–º—Å–∫": "Moscow", "–º–æ—Å–∫–≤–µ": "Moscow",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg", "–ø–∏—Ç–µ—Ä": "Saint Petersburg", "—Å–ø–±": "Saint Petersburg", "–ø–µ—Ç–µ—Ä–±—É—Ä–≥–µ": "Saint Petersburg",
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk", "–Ω—Å–∫": "Novosibirsk", "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ": "Novosibirsk",
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "Yekaterinburg", "–µ–∫–±": "Yekaterinburg", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ": "Yekaterinburg",
    "–∫–∞–∑–∞–Ω—å": "Kazan", "–∫–∞–∑–∞–Ω–∏": "Kazan",
    "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "Nizhny Novgorod", "–Ω–∏–∂–Ω–∏–π": "Nizhny Novgorod", "–Ω–∏–∂–Ω–µ–º –Ω–æ–≤–≥–æ—Ä–æ–¥–µ": "Nizhny Novgorod",
    "—á–µ–ª—è–±–∏–Ω—Å–∫": "Chelyabinsk", "—á–µ–ª—è–±–∏–Ω—Å–∫–µ": "Chelyabinsk",
    "—Å–∞–º–∞—Ä–∞": "Samara", "—Å–∞–º–∞—Ä–µ": "Samara",
    "–æ–º—Å–∫": "Omsk", "–æ–º—Å–∫–µ": "Omsk",
    "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É": "Rostov-on-Don", "—Ä–æ—Å—Ç–æ–≤": "Rostov-on-Don", "—Ä–æ—Å—Ç–æ–≤–µ": "Rostov-on-Don",
    "—É—Ñ–∞": "Ufa", "—É—Ñ–µ": "Ufa",
    "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "Krasnoyarsk", "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–µ": "Krasnoyarsk",
    "–ø–µ—Ä–º—å": "Perm", "–ø–µ—Ä–º–∏": "Perm",
    "–≤–æ—Ä–æ–Ω–µ–∂": "Voronezh", "–≤–æ—Ä–æ–Ω–µ–∂–µ": "Voronezh",
    "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": "Volgograd", "–≤–æ–ª–≥–æ–≥—Ä–∞–¥–µ": "Volgograd",
    "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": "Krasnodar", "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ": "Krasnodar",
    "—Å–∞—Ä–∞—Ç–æ–≤": "Saratov", "—Å–∞—Ä–∞—Ç–æ–≤–µ": "Saratov",
    "—Ç—é–º–µ–Ω—å": "Tyumen", "—Ç—é–º–µ–Ω–∏": "Tyumen",
    "—Ç–æ–ª—å—è—Ç—Ç–∏": "Tolyatti", "—Ç–æ–ª—å—è—Ç—Ç–∏": "Tolyatti",
    "–∏–∂–µ–≤—Å–∫": "Izhevsk", "–∏–∂–µ–≤—Å–∫–µ": "Izhevsk",
    "–±–∞—Ä–Ω–∞—É–ª": "Barnaul", "–±–∞—Ä–Ω–∞—É–ª–µ": "Barnaul",
    "—É–ª—å—è–Ω–æ–≤—Å–∫": "Ulyanovsk", "—É–ª—å—è–Ω–æ–≤—Å–∫–µ": "Ulyanovsk",
    "–∏—Ä–∫—É—Ç—Å–∫": "Irkutsk", "–∏—Ä–∫—É—Ç—Å–∫–µ": "Irkutsk",
    "—Ö–∞–±–∞—Ä–æ–≤—Å–∫": "Khabarovsk", "—Ö–∞–±–∞—Ä–æ–≤—Å–∫–µ": "Khabarovsk",
    "—è—Ä–æ—Å–ª–∞–≤–ª—å": "Yaroslavl", "—è—Ä–æ—Å–ª–∞–≤–ª–µ": "Yaroslavl",
    "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": "Vladivostok", "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ": "Vladivostok",
    "–º–∞—Ö–∞—á–∫–∞–ª–∞": "Makhachkala", "–º–∞—Ö–∞—á–∫–∞–ª–µ": "Makhachkala",
    "—Ç–æ–º—Å–∫": "Tomsk", "—Ç–æ–º—Å–∫–µ": "Tomsk",
    "–æ—Ä–µ–Ω–±—É—Ä–≥": "Orenburg", "–æ—Ä–µ–Ω–±—É—Ä–≥–µ": "Orenburg",
    "–∫–µ–º–µ—Ä–æ–≤–æ": "Kemerovo", "–∫–µ–º–µ—Ä–æ–≤–æ": "Kemerovo",
    "–Ω–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫": "Novokuznetsk", "–Ω–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–µ": "Novokuznetsk",
    "—Ä—è–∑–∞–Ω—å": "Ryazan", "—Ä—è–∑–∞–Ω–∏": "Ryazan",
    "–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å": "Astrakhan", "–∞—Å—Ç—Ä–∞—Ö–∞–Ω–∏": "Astrakhan",
    "–Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ —á–µ–ª–Ω—ã": "Naberezhnye Chelny", "–Ω–∞–±–µ—Ä–µ–∂–Ω—ã—Ö —á–µ–ª–Ω–∞—Ö": "Naberezhnye Chelny",
    "–ø–µ–Ω–∑–∞": "Penza", "–ø–µ–Ω–∑–µ": "Penza",
    "–∫–∏—Ä–æ–≤": "Kirov", "–∫–∏—Ä–æ–≤–µ": "Kirov",
    "–ª–∏–ø–µ—Ü–∫": "Lipetsk", "–ª–∏–ø–µ—Ü–∫–µ": "Lipetsk",
    "—á–µ–±–æ–∫—Å–∞—Ä—ã": "Cheboksary", "—á–µ–±–æ–∫—Å–∞—Ä–∞—Ö": "Cheboksary",
    "–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": "Kaliningrad", "–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–µ": "Kaliningrad",
    "—Ç—É–ª–∞": "Tula", "—Ç—É–ª–µ": "Tula",
    "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å": "Stavropol", "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª–µ": "Stavropol",
    "–∫—É—Ä—Å–∫": "Kursk", "–∫—É—Ä—Å–∫–µ": "Kursk",
    "—Å–æ—á–∏": "Sochi", "—Å–æ—á–∏": "Sochi",
    "—Ç–≤–µ—Ä—å": "Tver", "—Ç–≤–µ—Ä–∏": "Tver",
    "–º–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫": "Magnitogorsk", "–º–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫–µ": "Magnitogorsk",
    "—Å–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": "Sevastopol", "—Å–µ–≤–∞—Å—Ç–æ–ø–æ–ª–µ": "Sevastopol",
    "—Å—É—Ä–≥—É—Ç": "Surgut", "—Å—É—Ä–≥—É—Ç–µ": "Surgut",
    
    # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    "–Ω—å—é-–π–æ—Ä–∫": "New York", "–Ω—å—é –π–æ—Ä–∫": "New York", "new york": "New York", "–Ω—å—é-–π–æ—Ä–∫–µ": "New York",
    "–ª–æ–Ω–¥–æ–Ω": "London", "–ª–æ–Ω–¥–æ–Ω–µ": "London",
    "–ø–∞—Ä–∏–∂": "Paris", "–ø–∞—Ä–∏–∂–µ": "Paris",
    "—Ç–æ–∫–∏–æ": "Tokyo", "—Ç–æ–∫–∏–æ": "Tokyo",
    "–¥—É–±–∞–π": "Dubai", "–¥—É–±–∞–µ": "Dubai",
    "—Å–∏–¥–Ω–µ–π": "Sydney", "—Å–∏–¥–Ω–µ–µ": "Sydney",
    "–±–µ—Ä–ª–∏–Ω": "Berlin", "–±–µ—Ä–ª–∏–Ω–µ": "Berlin",
    "–º–∞–¥—Ä–∏–¥": "Madrid", "–º–∞–¥—Ä–∏–¥–µ": "Madrid",
    "—Ä–∏–º": "Rome", "—Ä–∏–º–µ": "Rome",
    "–∞–º—Å—Ç–µ—Ä–¥–∞–º": "Amsterdam", "–∞–º—Å—Ç–µ—Ä–¥–∞–º–µ": "Amsterdam",
    "–ø—Ä–∞–≥–∞": "Prague", "–ø—Ä–∞–≥–µ": "Prague",
    "–≤–µ–Ω–∞": "Vienna", "–≤–µ–Ω–µ": "Vienna",
    "–≤–∞—Ä—à–∞–≤–∞": "Warsaw", "–≤–∞—Ä—à–∞–≤–µ": "Warsaw",
    "—Å—Ç–∞–º–±—É–ª": "Istanbul", "—Å—Ç–∞–º–±—É–ª–µ": "Istanbul",
    "–ø–µ–∫–∏–Ω": "Beijing", "–ø–µ–∫–∏–Ω–µ": "Beijing",
    "—à–∞–Ω—Ö–∞–π": "Shanghai", "—à–∞–Ω—Ö–∞–µ": "Shanghai",
    "–≥–æ–Ω–∫–æ–Ω–≥": "Hong Kong", "–≥–æ–Ω–∫–æ–Ω–≥–µ": "Hong Kong",
    "—Å–µ—É–ª": "Seoul", "—Å–µ—É–ª–µ": "Seoul",
    "–±–∞–Ω–≥–∫–æ–∫": "Bangkok", "–±–∞–Ω–≥–∫–æ–∫–µ": "Bangkok",
    "—Å–∏–Ω–≥–∞–ø—É—Ä": "Singapore", "—Å–∏–Ω–≥–∞–ø—É—Ä–µ": "Singapore",
    "–∫—É–∞–ª–∞-–ª—É–º–ø—É—Ä": "Kuala Lumpur", "–∫—É–∞–ª–∞-–ª—É–º–ø—É—Ä–µ": "Kuala Lumpur",
    "–º–µ–ª—å–±—É—Ä–Ω": "Melbourne", "–º–µ–ª—å–±—É—Ä–Ω–µ": "Melbourne",
    "–±—Ä–∏—Å–±–µ–Ω": "Brisbane", "–±—Ä–∏—Å–±–µ–Ω–µ": "Brisbane",
    "–æ—Å–ª–æ": "Oslo", "–æ—Å–ª–æ": "Oslo",
    "—Å—Ç–æ–∫–≥–æ–ª—å–º": "Stockholm", "—Å—Ç–æ–∫–≥–æ–ª—å–º–µ": "Stockholm",
    "—Ö–µ–ª—å—Å–∏–Ω–∫–∏": "Helsinki", "—Ö–µ–ª—å—Å–∏–Ω–∫–∏": "Helsinki",
    "–∫–æ–ø–µ–Ω–≥–∞–≥–µ–Ω": "Copenhagen", "–∫–æ–ø–µ–Ω–≥–∞–≥–µ–Ω–µ": "Copenhagen",
    "–º–∏–ª–∞–Ω": "Milan", "–º–∏–ª–∞–Ω–µ": "Milan",
    "–±–∞—Ä—Å–µ–ª–æ–Ω–∞": "Barcelona", "–±–∞—Ä—Å–µ–ª–æ–Ω–µ": "Barcelona",
    "–ª–∏—Å—Å–∞–±–æ–Ω": "Lisbon", "–ª–∏—Å—Å–∞–±–æ–Ω–µ": "Lisbon",
    "–±—Ä—é—Å—Å–µ–ª—å": "Brussels", "–±—Ä—é—Å—Å–µ–ª–µ": "Brussels",
    "–∞—Ñ–∏–Ω—ã": "Athens", "–∞—Ñ–∏–Ω–∞—Ö": "Athens",
    "–±—É–¥–∞–ø–µ—à—Ç": "Budapest", "–±—É–¥–∞–ø–µ—à—Ç–µ": "Budapest",
    "–±—É—Ö–∞—Ä–µ—Å—Ç": "Bucharest", "–±—É—Ö–∞—Ä–µ—Å—Ç–µ": "Bucharest",
    "–∫–∏–µ–≤": "Kyiv", "–∫–∏–µ–≤–µ": "Kyiv",
    "–º–∏–Ω—Å–∫": "Minsk", "–º–∏–Ω—Å–∫–µ": "Minsk",
    "–∞–ª–º–∞—Ç—ã": "Almaty", "–∞–ª–º–∞—Ç—ã": "Almaty",
    "—Ç–∞—à–∫–µ–Ω—Ç": "Tashkent", "—Ç–∞—à–∫–µ–Ω—Ç–µ": "Tashkent",
    "–±–∞–∫—É": "Baku", "–±–∞–∫—É": "Baku",
    "–µ—Ä–µ–≤–∞–Ω": "Yerevan", "–µ—Ä–µ–≤–∞–Ω–µ": "Yerevan",
    "—Ç–µ–ª—è–≤–∏": "Tbilisi", "—Ç–µ–ª—è–≤–∏": "Tbilisi",
    
    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
    "—Ö–∞—Ä—å–∫–æ–≤": "Kharkiv", "—Ö–∞—Ä—å–∫–æ–≤–µ": "Kharkiv",
    "–æ–¥–µ—Å—Å–∞": "Odesa", "–æ–¥–µ—Å—Å–µ": "Odesa",
    "–¥–Ω–µ–ø—Ä": "Dnipro", "–¥–Ω–µ–ø—Ä–µ": "Dnipro",
    "–¥–æ–Ω–µ—Ü–∫": "Donetsk", "–¥–æ–Ω–µ—Ü–∫–µ": "Donetsk",
    "–∑–∞–ø–æ—Ä–æ–∂—å–µ": "Zaporizhzhia", "–∑–∞–ø–æ—Ä–æ–∂—å–µ": "Zaporizhzhia",
    "–ª—å–≤–æ–≤": "Lviv", "–ª—å–≤–æ–≤–µ": "Lviv",
    
    # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
    "–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω": "Nur-Sultan", "–∞—Å—Ç–∞–Ω–∞": "Nur-Sultan", "–∞—Å—Ç–∞–Ω–µ": "Nur-Sultan",
    "—à—ã–º–∫–µ–Ω—Ç": "Shymkent", "—à—ã–º–∫–µ–Ω—Ç–µ": "Shymkent",
    "–∞–∫—Ç–æ–±–µ": "Aktobe", "–∞–∫—Ç–æ–±–µ": "Aktobe",
    "–∫–∞—Ä–∞–≥–∞–Ω–¥–∞": "Karaganda", "–∫–∞—Ä–∞–≥–∞–Ω–¥–µ": "Karaganda",
    
    # –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
    "–≥–æ–º–µ–ª—å": "Gomel", "–≥–æ–º–µ–ª–µ": "Gomel",
    "–º–æ–≥–∏–ª–µ–≤": "Mogilev", "–º–æ–≥–∏–ª–µ–≤–µ": "Mogilev",
    "–≤–∏—Ç–µ–±—Å–∫": "Vitebsk", "–≤–∏—Ç–µ–±—Å–∫–µ": "Vitebsk",
    "–≥—Ä–æ–¥–Ω–æ": "Grodno", "–≥—Ä–æ–¥–Ω–æ": "Grodno",
    "–±—Ä–µ—Å—Ç": "Brest", "–±—Ä–µ—Å—Ç–µ": "Brest",
}

# =======================
# ===== –£–õ–£–ß–®–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
# =======================
def load_data(filename: str, default: Any = None) -> Any:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if os.path.exists(filename):
            with open(filename, 'rb') as f:
                data = pickle.load(f)
                if data is not None:
                    return data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        if os.path.exists(filename):
            backup_name = f"{filename}.backup_{int(time.time())}"
            try:
                os.rename(filename, backup_name)
                logging.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_name}")
            except:
                pass
    return default if default is not None else {}

def save_data(data: Any, filename: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        temp_filename = f"{filename}.tmp"
        with open(temp_filename, 'wb') as f:
            pickle.dump(data, f)
        if os.path.exists(filename):
            os.replace(temp_filename, filename)
        else:
            os.rename(temp_filename, filename)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
        try:
            if os.path.exists(temp_filename):
                os.remove(temp_filename)
        except:
            pass

def initialize_user_data(chat_id: int):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
    if chat_id not in user_registration_date:
        user_registration_date[chat_id] = datetime.now()
        save_data(user_registration_date, DATA_FILES['user_registration_date'])
    
    if chat_id not in user_modes:
        user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"
        save_data(user_modes, DATA_FILES['user_modes'])
    
    if chat_id not in chat_style:
        chat_style[chat_id] = "balanced"
        save_data(chat_style, DATA_FILES['chat_style'])
    
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {"total": 0, "today": 0}
        save_data(user_requests_count, DATA_FILES['user_requests_count'])
    
    if chat_id not in user_tariffs:
        user_tariffs[chat_id] = "default"
        save_data(user_tariffs, DATA_FILES['user_tariffs'])
    
    if chat_id not in user_subscription_end:
        user_subscription_end[chat_id] = datetime.now() + timedelta(days=FREE_PERIOD_DAYS)
        save_data(user_subscription_end, DATA_FILES['user_subscription_end'])
    
    if chat_id not in user_homework_requests:
        user_homework_requests[chat_id] = {"used": 0, "last_reset": datetime.now().date()}
        save_data(user_homework_requests, DATA_FILES['user_homework_requests'])
    
    if chat_id not in user_promo_codes:
        user_promo_codes[chat_id] = {}
        save_data(user_promo_codes, DATA_FILES['user_promo_codes'])
    
    if chat_id not in user_language:
        user_language[chat_id] = None  # –Ø–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
        save_data(user_language, DATA_FILES['user_language'])

def increment_user_requests(chat_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    initialize_user_data(chat_id)
    
    user_requests_count[chat_id]["total"] = user_requests_count[chat_id].get("total", 0) + 1
    save_data(user_requests_count, DATA_FILES['user_requests_count'])
    
    increment_daily_requests(chat_id)

def increment_homework_requests(chat_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–º–æ—â–∏ —Å —É—Ä–æ–∫–∞–º–∏"""
    initialize_user_data(chat_id)
    
    today = datetime.now().date()
    if user_homework_requests[chat_id].get("last_reset") != today:
        user_homework_requests[chat_id] = {"used": 0, "last_reset": today}
    
    user_homework_requests[chat_id]["used"] = user_homework_requests[chat_id].get("used", 0) + 1
    save_data(user_homework_requests, DATA_FILES['user_homework_requests'])

def get_remaining_homework_requests(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–º–æ—â–∏ —Å —É—Ä–æ–∫–∞–º–∏"""
    if chat_id == ADMIN_ID:
        return 99999  # –ê–¥–º–∏–Ω –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    
    initialize_user_data(chat_id)
    
    today = datetime.now().date()
    if user_homework_requests[chat_id].get("last_reset") != today:
        return HOMEWORK_FREE_LIMITS
    
    used = user_homework_requests[chat_id].get("used", 0)
    return max(0, HOMEWORK_FREE_LIMITS - used)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_registration_date = load_data(DATA_FILES['user_registration_date'], {})
conversation_memory = load_data(DATA_FILES['conversation_memory'], {})
chat_style = load_data(DATA_FILES['chat_style'], {})
user_requests_count = load_data(DATA_FILES['user_requests_count'], {})
user_modes = load_data(DATA_FILES['user_modes'], {})
user_tariffs = load_data(DATA_FILES['user_tariffs'], {})
user_subscription_end = load_data(DATA_FILES['user_subscription_end'], {})
user_daily_requests = load_data(DATA_FILES['user_daily_requests'], {})
admin_logs = load_data(DATA_FILES['admin_logs'], [])
admin_temp_data = load_data(DATA_FILES['admin_temp_data'], {})
user_homework_requests = load_data(DATA_FILES['user_homework_requests'], {})
user_promo_codes = load_data(DATA_FILES['user_promo_codes'], {})
user_language = load_data(DATA_FILES['user_language'], {})

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_last_request: Dict[int, float] = {}
user_thinking_messages: Dict[int, int] = {}
user_awaiting_promo: Dict[int, bool] = {}
user_last_photo_text: Dict[int, str] = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ
user_awaiting_language: Dict[int, bool] = {}  # –î–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# =======================
# ===== –°–ò–°–¢–ï–ú–ê –¢–ê–†–ò–§–û–í –ò –õ–ò–ú–ò–¢–û–í =====
# =======================
def get_user_tariff(chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id == ADMIN_ID:
        return "ultimate"
    
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return user_tariffs.get(chat_id, "default")
    
    if is_free_period_active(chat_id):
        return "default"
    
    return "default"

def get_user_cooldown(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id == ADMIN_ID:
        return 0  # –ê–¥–º–∏–Ω –±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞
    
    tariff = get_user_tariff(chat_id)
    return TARIFF_COOLDOWNS.get(tariff, 5)

def get_user_memory_limit(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tariff = get_user_tariff(chat_id)
    return TARIFF_MEMORY.get(tariff, 10)

def get_user_daily_limit(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if chat_id == ADMIN_ID:
        return 99999  # –ê–¥–º–∏–Ω –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    
    tariff = get_user_tariff(chat_id)
    return TARIFFS[tariff]["daily_limits"]

def get_remaining_daily_requests(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if chat_id == ADMIN_ID:
        return 99999  # –ê–¥–º–∏–Ω –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    
    today = datetime.now().date()
    daily_data = user_daily_requests.get(chat_id, {})
    if daily_data.get("date") != today:
        return get_user_daily_limit(chat_id)
    return max(0, get_user_daily_limit(chat_id) - daily_data.get("count", 0))

def increment_daily_requests(chat_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if chat_id == ADMIN_ID:
        return  # –ê–¥–º–∏–Ω –Ω–µ —Ç—Ä–∞—Ç–∏—Ç –∑–∞–ø—Ä–æ—Å—ã
    
    today = datetime.now().date()
    if chat_id not in user_daily_requests or user_daily_requests[chat_id].get("date") != today:
        user_daily_requests[chat_id] = {"date": today, "count": 1}
    else:
        user_daily_requests[chat_id]["count"] += 1
    save_data(user_daily_requests, DATA_FILES['user_daily_requests'])

def is_subscription_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–ª–∏ –ø–ª–∞—Ç–Ω–∞—è)"""
    if chat_id == ADMIN_ID:
        return True
    
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return True
    
    return is_free_period_active(chat_id)

def activate_tariff(chat_id: int, tariff: str, days: int):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_tariffs[chat_id] = tariff
    user_subscription_end[chat_id] = datetime.now() + timedelta(days=days)
    save_data(user_tariffs, DATA_FILES['user_tariffs'])
    save_data(user_subscription_end, DATA_FILES['user_subscription_end'])

def get_remaining_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    if chat_id == ADMIN_ID:
        return 999
    
    if chat_id in user_subscription_end and user_subscription_end[chat_id] > datetime.now():
        return (user_subscription_end[chat_id] - datetime.now()).days
    
    return get_remaining_free_days(chat_id)

def is_free_period_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    if chat_id == ADMIN_ID:
        return True
    
    initialize_user_data(chat_id)
    registration_date = user_registration_date[chat_id]
    days_passed = (datetime.now() - registration_date).days
    return days_passed < FREE_PERIOD_DAYS

def get_remaining_free_days(chat_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    initialize_user_data(chat_id)
    registration_date = user_registration_date[chat_id]
    days_passed = (datetime.now() - registration_date).days
    return max(0, FREE_PERIOD_DAYS - days_passed)

def can_user_make_request(chat_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
    if chat_id == ADMIN_ID:
        return True, ""  # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç
    
    if not is_subscription_active(chat_id):
        remaining_free = get_remaining_free_days(chat_id)
        if remaining_free <= 0:
            return False, f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤."
        else:
            return True, ""
    
    remaining_requests = get_remaining_daily_requests(chat_id)
    if remaining_requests <= 0:
        current_tariff = get_user_tariff(chat_id)
        daily_limit = TARIFFS[current_tariff]["daily_limits"]
        return False, f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ({daily_limit}/–¥–µ–Ω—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ —Ç–∞—Ä–∏—Ñ."
    
    return True, ""

def can_user_make_homework_request(chat_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–º–æ—â–∏ —Å —É—Ä–æ–∫–∞–º–∏"""
    if chat_id == ADMIN_ID:
        return True, ""  # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç
    
    remaining_homework = get_remaining_homework_requests(chat_id)
    if remaining_homework <= 0:
        return False, f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ '–ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏' –∏—Å—á–µ—Ä–ø–∞–Ω ({HOMEWORK_FREE_LIMITS}/–¥–µ–Ω—å). –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
    
    return True, ""

# =======================
# ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û =====
# =======================
async def process_image_with_instructions(image_bytes: bytes, user_instruction: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')
        
        user_instruction_lower = user_instruction.lower()
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if any(word in user_instruction_lower for word in ["—Ä–∞—Å–ø–æ–∑–Ω–∞–π —Ç–µ–∫—Å—Ç", "–≤—ã–ø–∏—à–∏ —Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "–Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç", "—Ä–∞—Å—à–∏—Ñ—Ä—É–π —Ç–µ–∫—Å—Ç"]):
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω–∏ –µ–≥–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –≤–∏–¥–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –°–æ—Ö—Ä–∞–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞."
        elif any(word in user_instruction_lower for word in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–æ–¥", "translate"]):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            target_language = "—Ä—É—Å—Å–∫–∏–π"
            if "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in user_instruction_lower or "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º" in user_instruction_lower:
                target_language = "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
            elif "–Ω–∞ —Ä—É—Å—Å–∫–∏–π" in user_instruction_lower or "–Ω–∞ —Ä—É—Å—Å–∫–æ–º" in user_instruction_lower:
                target_language = "—Ä—É—Å—Å–∫–∏–π"
            elif "–Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π" in user_instruction_lower:
                target_language = "–∏—Å–ø–∞–Ω—Å–∫–∏–π"
            elif "–Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" in user_instruction_lower:
                target_language = "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"
            elif "–Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π" in user_instruction_lower:
                target_language = "–Ω–µ–º–µ—Ü–∫–∏–π"
            elif "–Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π" in user_instruction_lower:
                target_language = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
            elif "–Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–π" in user_instruction_lower:
                target_language = "–∫–∏—Ç–∞–π—Å–∫–∏–π"
            elif "–Ω–∞ —è–ø–æ–Ω—Å–∫–∏–π" in user_instruction_lower:
                target_language = "—è–ø–æ–Ω—Å–∫–∏–π"
            elif "–Ω–∞ –∫–æ—Ä–µ–π—Å–∫–∏–π" in user_instruction_lower:
                target_language = "–∫–æ—Ä–µ–π—Å–∫–∏–π"
            
            prompt = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ –Ω–∞ {target_language} —è–∑—ã–∫. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
        elif any(word in user_instruction_lower for word in ["—Å—É–º–º–∞", "—Å—É–º–º–∏—Ä—É–π", "—Å–ª–æ–∂–∏", "–ø–æ—Å—á–∏—Ç–∞–π"]):
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ –≤—Å–µ —á–∏—Å–ª–∞ —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ—Å—á–∏—Ç–∞–π –∏—Ö —Å—É–º–º—É. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–°—É–º–º–∞: X'"
        elif any(word in user_instruction_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "—Ä–∞—Å—Å–∫–∞–∂–∏", "–æ–ø–∏—à–∏"]):
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –∏–ª–∏ –æ —á–µ–º —Ç–µ–∫—Å—Ç. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."
        elif any(word in user_instruction_lower for word in ["—É–ø—Ä–æ—Å—Ç–∏", "—Å–æ–∫—Ä–∞—Ç–∏", "–∫—Ä–∞—Ç–∫–æ", "–æ—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å"]):
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –µ–≥–æ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã."
        else:
            # –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
        
        messages = [
            {
                "role": "user",
                "content": [
                    {
                        "type": "image_url",
                        "image_url": f"data:image/jpeg;base64,{image_base64}"
                    },
                    {
                        "type": "text", 
                        "text": prompt
                    }
                ]
            }
        ]
        
        response = client.chat.complete(
            model="pixtral-12b-2409",
            messages=messages,
            max_tokens=2000
        )
        
        result = response.choices[0].message.content.strip()
        
        if not result or "–Ω–µ –≤–∏–∂—É —Ç–µ–∫—Å—Ç–∞" in result.lower() or "–Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å" in result.lower():
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ:\n‚Ä¢ –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –º–µ–ª–∫–∏–π –∏–ª–∏ —Ä–∞–∑–º—ã—Ç—ã–π\n‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ\n‚Ä¢ –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ñ–æ—Ç–æ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        
        return result
        
    except Exception as e:
        logger.error(f"Image processing error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

# =======================
# ===== –ü–ï–†–ï–í–û–î –¢–ï–ö–°–¢–ê =====
# =======================
async def translate_text(text: str, target_language: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫"""
    try:
        messages = [
            {
                "role": "user",
                "content": f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_language} —è–∑—ã–∫. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n\n{text}"
            }
        ]
        
        response = client.chat.complete(
            model=model,
            messages=messages,
            max_tokens=2000
        )
        
        translated_text = response.choices[0].message.content.strip()
        return translated_text
        
    except Exception as e:
        logger.error(f"Translation error: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

# =======================
# ===== –£–õ–£–ß–®–ï–ù–ù–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ì–û–õ–û–°–ê =====
# =======================
async def transcribe_audio_with_mistral(audio_bytes: bytes) -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Mistral"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ base64
        audio_base64 = base64.b64encode(audio_bytes).decode('utf-8')
        
        messages = [
            {
                "role": "user",
                "content": [
                    {
                        "type": "audio_url",
                        "audio_url": f"data:audio/ogg;base64,{audio_base64}"
                    },
                    {
                        "type": "text", 
                        "text": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–π —Ä–µ—á—å –≤ —ç—Ç–æ–º –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ —à—É–º—ã, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –∏—Ö –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å."
                    }
                ]
            }
        ]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        response = client.chat.complete(
            model="pixtral-12b-2409",
            messages=messages,
            max_tokens=1000
        )
        
        transcribed_text = response.choices[0].message.content.strip()
        
        if not transcribed_text:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –≤ –±–æ–ª–µ–µ —Ç–∏—Ö–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ."
        
        return f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{transcribed_text}"
        
    except Exception as e:
        logger.error(f"Mistral audio processing error: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
        return "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à–µ –∞—É–¥–∏–æ. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."

# =======================
# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–ì–û–î–´ =====
# =======================
async def get_detailed_weather(city: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    try:
        city_clean = city.strip()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –±–æ–ª—å—à—É—é –±–∞–∑—É –≥–æ—Ä–æ–¥–æ–≤
        api_city = CITY_MAPPING.get(city_clean.lower(), city_clean)
        url = f"http://api.openweathermap.org/data/2.5/weather?q={api_city}&appid={openweather_api_key}&units=metric&lang=ru"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    
                    temp = round(data["main"]["temp"])
                    feels_like = round(data["main"]["feels_like"])
                    humidity = data["main"]["humidity"]
                    pressure = data["main"]["pressure"]
                    wind_speed = data["wind"]["speed"]
                    description = data["weather"][0]["description"]
                    
                    timezone_offset = data["timezone"]
                    sunrise = datetime.fromtimestamp(data["sys"]["sunrise"] + timezone_offset).strftime("%H:%M")
                    sunset = datetime.fromtimestamp(data["sys"]["sunset"] + timezone_offset).strftime("%H:%M")
                    
                    cloudiness = data["clouds"]["all"]
                    
                    weather_report = f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city_clean.title()}:\n\n"
                    weather_report += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    weather_report += f"üìù {description.capitalize()}\n"
                    weather_report += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    weather_report += f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n"
                    weather_report += f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
                    weather_report += f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloudiness}%\n"
                    weather_report += f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise}\n"
                    weather_report += f"üåá –ó–∞–∫–∞—Ç: {sunset}\n"
                    
                    if temp < -10:
                        weather_report += "\n‚ùÑÔ∏è –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –¢–µ–ø–ª–∞—è –æ–¥–µ–∂–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞."
                    elif temp < 0:
                        weather_report += "\nüß• –ú–æ—Ä–æ–∑–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ –∑–∏–º–Ω—é—é –∫—É—Ä—Ç–∫—É –∏ —à–∞–ø–∫—É."
                    elif temp < 10:
                        weather_report += "\nüß£ –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –ö—É—Ä—Ç–∫–∞ –∏ —à–∞—Ä—Ñ –±—É–¥—É—Ç –∫—Å—Ç–∞—Ç–∏."
                    elif temp < 20:
                        weather_report += "\nüëî –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ. –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä."
                    else:
                        weather_report += "\nüòé –¢–µ–ø–ª–æ! –ú–æ–∂–Ω–æ –æ–¥–µ–≤–∞—Ç—å—Å—è –ª–µ–≥–∫–æ."
                    
                    return weather_report
                else:
                    return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city_clean}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
                    
    except Exception as e:
        logger.error(f"Weather API error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# =======================
# ===== –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–í–ï–¢–û–í =====
# =======================
def create_smart_response(text: str, question_type: str = "normal") -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã"""
    
    if not text or len(text.strip()) == 0:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
    
    if question_type == "weather":
        return text
    elif question_type == "calculation":
        return text
    elif question_type == "photo_text":
        return f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n{text}"
    elif question_type == "homework":
        return f"üìö –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ:\n\n{text}"
    elif question_type == "voice":
        return text
    elif question_type == "translation":
        return f"üåê –ü–µ—Ä–µ–≤–æ–¥:\n\n{text}"
    elif question_type == "simple":
        if len(text) > 300:
            sentences = text.split('. ')
            if len(sentences) > 1:
                return '. '.join(sentences[:2]) + '.'
        return text
    else:
        return text

# =======================
# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
# =======================
async def send_thinking_message(chat_id: int) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–î—É–º–∞—é...'"""
    message = await bot.send_message(chat_id, "–î—É–º–∞—é...")
    return message.message_id

async def delete_thinking_message(chat_id: int, message_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–î—É–º–∞—é...'"""
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"Error deleting thinking message: {e}")

async def get_ai_response(message_text: str, chat_id: int, mode: str = "–æ–±—ã—á–Ω—ã–π") -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç–∏–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        memory = conversation_memory.get(chat_id, [])
        memory_limit = get_user_memory_limit(chat_id)
        
        # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        if len(memory) > memory_limit:
            memory = memory[-memory_limit:]
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == "homework":
            system_message = """–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. 

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
1. –î–∞–≤–∞–π –ü–†–Ø–ú–û–ô –û–¢–í–ï–¢ –Ω–∞ –≤–æ–ø—Ä–æ—Å/–∑–∞–¥–∞—á—É
2. –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π 
3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ—à–µ–Ω–∏–µ - –ø–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è
4. –§–æ—Ä–º—É–ª—ã, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –æ—Ç–≤–µ—Ç—ã - –≤—ã–¥–µ–ª—è–π —á–µ—Ç–∫–æ
5. –ë–µ–∑ —Ñ—Ä–∞–∑ "–∏—Ç–∞–∫", "–∏—Ç–∞–∫ –¥–∞–≤–∞–π—Ç–µ", "–Ω—É —á—Ç–æ –∂–µ" –∏ —Ç.–¥.
6. –¢–æ–ª—å–∫–æ —Å—É—Ç—å: —É—Å–ª–æ–≤–∏–µ ‚Üí —Ä–µ—à–µ–Ω–∏–µ ‚Üí –æ—Ç–≤–µ—Ç

–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:
"–ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ 5, 6, 7 —Å–º.

–†–µ—à–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–µ—Ä–æ–Ω–∞:
p = (5+6+7)/2 = 9
S = ‚àö(9√ó(9-5)√ó(9-6)√ó(9-7)) = ‚àö(9√ó4√ó3√ó2) = ‚àö216 ‚âà 14.7

–û—Ç–≤–µ—Ç: 14.7 —Å–º¬≤"

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Ç–∞–∫ - –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É!"""
        else:
            system_message = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ —Ç–æ—á–µ–Ω."
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [{"role": "system", "content": system_message}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        for msg in memory:
            messages.append(msg)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": message_text})
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = client.chat.complete(
            model=model,
            messages=messages,
            max_tokens=2000
        )
        
        ai_response = response.choices[0].message.content.strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
        memory.append({"role": "user", "content": message_text})
        memory.append({"role": "assistant", "content": ai_response})
        
        if len(memory) > memory_limit * 2:  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2 —Ç.–∫. –ø–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            memory = memory[-(memory_limit * 2):]
        
        conversation_memory[chat_id] = memory
        save_data(conversation_memory, DATA_FILES['conversation_memory'])
        
        return ai_response
        
    except Exception as e:
        logger.error(f"AI response error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

# =======================
# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ –° –ü–û–î–î–ï–†–ñ–ö–û–ô –Ø–ó–´–ö–û–í =====
# =======================
def get_language_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá∫üá∏ English")],
            [KeyboardButton(text="üá™üá∏ Espa√±ol"), KeyboardButton(text="üá©üá™ Deutsch")],
            [KeyboardButton(text="üá´üá∑ Fran√ßais"), KeyboardButton(text="üá®üá≥ ‰∏≠Êñá")],
            [KeyboardButton(text="üáØüáµ Êó•Êú¨Ë™û"), KeyboardButton(text="üá∞üá∑ ÌïúÍµ≠Ïñ¥")]
        ],
        resize_keyboard=True
    )

def get_main_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    lang = user_language.get(chat_id, "ru")
    
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    buttons = {
        "ru": {
            "start": "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
            "about": "üåü –û–±–æ –º–Ω–µ", 
            "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "help": "‚ùì –ü–æ–º–æ—â—å",
            "weather": "üå§Ô∏è –ü–æ–≥–æ–¥–∞",
            "tariffs": "üíé –¢–∞—Ä–∏—Ñ—ã",
            "clear": "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å",
            "admin": "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        },
        "en": {
            "start": "üöÄ Start work",
            "about": "üåü About me",
            "settings": "‚öôÔ∏è Settings", 
            "help": "‚ùì Help",
            "weather": "üå§Ô∏è Weather",
            "tariffs": "üíé Tariffs",
            "clear": "üßπ Clear memory",
            "admin": "üõ†Ô∏è Admin panel"
        },
        "es": {
            "start": "üöÄ Iniciar trabajo",
            "about": "üåü Sobre m√≠",
            "settings": "‚öôÔ∏è Configuraci√≥n",
            "help": "‚ùì Ayuda",
            "weather": "üå§Ô∏è Clima", 
            "tariffs": "üíé Tarifas",
            "clear": "üßπ Limpiar memoria",
            "admin": "üõ†Ô∏è Panel admin"
        },
        "de": {
            "start": "üöÄ Arbeit beginnen",
            "about": "üåü √úber mich",
            "settings": "‚öôÔ∏è Einstellungen",
            "help": "‚ùì Hilfe",
            "weather": "üå§Ô∏è Wetter",
            "tariffs": "üíé Tarife",
            "clear": "üßπ Speicher l√∂schen",
            "admin": "üõ†Ô∏è Admin-Panel"
        },
        "fr": {
            "start": "üöÄ Commencer",
            "about": "üåü √Ä propos",
            "settings": "‚öôÔ∏è Param√®tres",
            "help": "‚ùì Aide",
            "weather": "üå§Ô∏è M√©t√©o",
            "tariffs": "üíé Tarifs",
            "clear": "üßπ Effacer m√©moire", 
            "admin": "üõ†Ô∏è Panel admin"
        },
        "zh": {
            "start": "üöÄ ÂºÄÂßãÂ∑•‰Ωú",
            "about": "üåü ÂÖ≥‰∫éÊàë",
            "settings": "‚öôÔ∏è ËÆæÁΩÆ",
            "help": "‚ùì Â∏ÆÂä©",
            "weather": "üå§Ô∏è Â§©Ê∞î",
            "tariffs": "üíé ËµÑË¥π",
            "clear": "üßπ Ê∏ÖÈô§ËÆ∞ÂøÜ",
            "admin": "üõ†Ô∏è ÁÆ°ÁêÜÈù¢Êùø"
        },
        "ja": {
            "start": "üöÄ ‰ªï‰∫ã„ÇíÂßã„ÇÅ„Çã",
            "about": "üåü ÁßÅ„Å´„Å§„ÅÑ„Å¶",
            "settings": "‚öôÔ∏è Ë®≠ÂÆö",
            "help": "‚ùì „Éò„É´„Éó",
            "weather": "üå§Ô∏è Â§©Ê∞ó",
            "tariffs": "üíé ÊñôÈáë",
            "clear": "üßπ „É°„É¢„É™„Çí„ÇØ„É™„Ç¢",
            "admin": "üõ†Ô∏è ÁÆ°ÁêÜ„Éë„Éç„É´"
        },
        "ko": {
            "start": "üöÄ ÏûëÏóÖ ÏãúÏûë",
            "about": "üåü ÎÇ¥ Ï†ïÎ≥¥",
            "settings": "‚öôÔ∏è ÏÑ§Ï†ï",
            "help": "‚ùì ÎèÑÏõÄÎßê",
            "weather": "üå§Ô∏è ÎÇ†Ïî®",
            "tariffs": "üíé ÏöîÍ∏àÏ†ú",
            "clear": "üßπ Î©îÎ™®Î¶¨ ÏßÄÏö∞Í∏∞",
            "admin": "üõ†Ô∏è Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê"
        }
    }
    
    btn = buttons.get(lang, buttons["ru"])
    
    keyboard = [
        [KeyboardButton(text=btn["start"]), KeyboardButton(text=btn["about"])],
        [KeyboardButton(text=btn["settings"]), KeyboardButton(text=btn["help"]), KeyboardButton(text=btn["weather"])],
        [KeyboardButton(text=btn["tariffs"])],
        [KeyboardButton(text=btn["clear"])]
    ]
    
    if chat_id == ADMIN_ID:
        keyboard.append([KeyboardButton(text=btn["admin"])])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_settings_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    lang = user_language.get(chat_id, "ru")
    
    buttons = {
        "ru": {
            "modes": "üé≠ –†–µ–∂–∏–º—ã AI",
            "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            "style": "üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è",
            "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "language": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
            "quick": "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "en": {
            "modes": "üé≠ AI Modes",
            "stats": "üìä Statistics",
            "style": "üé® Communication style", 
            "info": "‚ÑπÔ∏è Information",
            "language": "üåê Change language",
            "quick": "‚ö° Quick commands",
            "back": "‚¨ÖÔ∏è Back"
        },
        "es": {
            "modes": "üé≠ Modos AI",
            "stats": "üìä Estad√≠sticas",
            "style": "üé® Estilo comunicaci√≥n",
            "info": "‚ÑπÔ∏è Informaci√≥n",
            "language": "üåê Cambiar idioma",
            "quick": "‚ö° Comandos r√°pidos", 
            "back": "‚¨ÖÔ∏è Atr√°s"
        },
        "de": {
            "modes": "üé≠ KI-Modi",
            "stats": "üìä Statistiken",
            "style": "üé® Kommunikationsstil",
            "info": "‚ÑπÔ∏è Information",
            "language": "üåê Sprache √§ndern",
            "quick": "‚ö° Schnellbefehle",
            "back": "‚¨ÖÔ∏è Zur√ºck"
        },
        "fr": {
            "modes": "üé≠ Modes IA",
            "stats": "üìä Statistiques", 
            "style": "üé® Style communication",
            "info": "‚ÑπÔ∏è Information",
            "language": "üåê Changer langue",
            "quick": "‚ö° Commandes rapides",
            "back": "‚¨ÖÔ∏è Retour"
        },
        "zh": {
            "modes": "üé≠ AIÊ®°Âºè",
            "stats": "üìä ÁªüËÆ°",
            "style": "üé® ‰∫§ÊµÅÈ£éÊ†º",
            "info": "‚ÑπÔ∏è ‰ø°ÊÅØ",
            "language": "üåê Êõ¥ÊîπËØ≠Ë®Ä",
            "quick": "‚ö° Âø´ÈÄüÂëΩ‰ª§",
            "back": "‚¨ÖÔ∏è ËøîÂõû"
        },
        "ja": {
            "modes": "üé≠ AI„É¢„Éº„Éâ",
            "stats": "üìä Áµ±Ë®à",
            "style": "üé® „Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„Çπ„Çø„Ç§„É´",
            "info": "‚ÑπÔ∏è ÊÉÖÂ†±",
            "language": "üåê Ë®ÄË™ûÂ§âÊõ¥",
            "quick": "‚ö° „ÇØ„Ç§„ÉÉ„ÇØ„Ç≥„Éû„É≥„Éâ",
            "back": "‚¨ÖÔ∏è Êàª„Çã"
        },
        "ko": {
            "modes": "üé≠ AI Î™®Îìú",
            "stats": "üìä ÌÜµÍ≥Ñ",
            "style": "üé® Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ïä§ÌÉÄÏùº",
            "info": "‚ÑπÔ∏è Ï†ïÎ≥¥",
            "language": "üåê Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω",
            "quick": "‚ö° Îπ†Î•∏ Î™ÖÎ†π",
            "back": "‚¨ÖÔ∏è Îí§Î°ú"
        }
    }
    
    btn = buttons.get(lang, buttons["ru"])
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=btn["modes"]), KeyboardButton(text=btn["stats"])],
            [KeyboardButton(text=btn["style"]), KeyboardButton(text=btn["info"])],
            [KeyboardButton(text=btn["language"]), KeyboardButton(text=btn["quick"])],
            [KeyboardButton(text=btn["back"])]
        ],
        resize_keyboard=True
    )

def get_tariffs_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    lang = user_language.get(chat_id, "ru")
    
    back_text = {
        "ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "en": "‚¨ÖÔ∏è Back", 
        "es": "‚¨ÖÔ∏è Atr√°s",
        "de": "‚¨ÖÔ∏è Zur√ºck",
        "fr": "‚¨ÖÔ∏è Retour",
        "zh": "‚¨ÖÔ∏è ËøîÂõû",
        "ja": "‚¨ÖÔ∏è Êàª„Çã",
        "ko": "‚¨ÖÔ∏è Îí§Î°ú"
    }
    
    my_tariff_text = {
        "ru": "üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ",
        "en": "üìä My tariff",
        "es": "üìä Mi tarifa",
        "de": "üìä Mein Tarif",
        "fr": "üìä Mon tarif",
        "zh": "üìä ÊàëÁöÑËµÑË¥π", 
        "ja": "üìä ÁßÅ„ÅÆÊñôÈáë",
        "ko": "üìä ÎÇ¥ ÏöîÍ∏àÏ†ú"
    }
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ Default"), KeyboardButton(text="‚≠ê Pro")],
            [KeyboardButton(text="üíé Advanced"), KeyboardButton(text="üëë Ultimate")],
            [KeyboardButton(text=my_tariff_text.get(lang, "üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ"))],
            [KeyboardButton(text=back_text.get(lang, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))]
        ],
        resize_keyboard=True
    )

def get_mode_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ AI —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    lang = user_language.get(chat_id, "ru")
    
    buttons = {
        "ru": {
            "calm": "üßò –°–ø–æ–∫–æ–π–Ω—ã–π",
            "normal": "üí¨ –û–±—ã—á–Ω—ã–π", 
            "short": "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π",
            "smart": "üß† –£–º–Ω—ã–π",
            "homework": "üìö –ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "en": {
            "calm": "üßò Calm",
            "normal": "üí¨ Normal",
            "short": "‚ö° Short",
            "smart": "üß† Smart", 
            "homework": "üìö Homework help",
            "back": "‚¨ÖÔ∏è Back"
        },
        "es": {
            "calm": "üßò Calmado",
            "normal": "üí¨ Normal",
            "short": "‚ö° Corto",
            "smart": "üß† Inteligente",
            "homework": "üìö Ayuda tareas",
            "back": "‚¨ÖÔ∏è Atr√°s"
        },
        "de": {
            "calm": "üßò Ruhig",
            "normal": "üí¨ Normal", 
            "short": "‚ö° Kurz",
            "smart": "üß† Intelligent",
            "homework": "üìö Hausaufgabenhilfe",
            "back": "‚¨ÖÔ∏è Zur√ºck"
        },
        "fr": {
            "calm": "üßò Calme",
            "normal": "üí¨ Normal",
            "short": "‚ö° Court",
            "smart": "üß† Intelligent",
            "homework": "üìö Aide devoirs",
            "back": "‚¨ÖÔ∏è Retour"
        },
        "zh": {
            "calm": "üßò Âπ≥Èùô",
            "normal": "üí¨ ÊôÆÈÄö",
            "short": "‚ö° ÁÆÄÁü≠", 
            "smart": "üß† Êô∫ËÉΩ",
            "homework": "üìö ‰Ωú‰∏öÂ∏ÆÂä©",
            "back": "‚¨ÖÔ∏è ËøîÂõû"
        },
        "ja": {
            "calm": "üßò ÂÜ∑Èùô",
            "normal": "üí¨ ÈÄöÂ∏∏",
            "short": "‚ö° Áü≠„ÅÑ",
            "smart": "üß† „Çπ„Éû„Éº„Éà",
            "homework": "üìö ÂÆøÈ°å„Éò„É´„Éó",
            "back": "‚¨ÖÔ∏è Êàª„Çã"
        },
        "ko": {
            "calm": "üßò Ï∞®Î∂ÑÌïú",
            "normal": "üí¨ ÏùºÎ∞ò",
            "short": "‚ö° ÏßßÏùÄ",
            "smart": "üß† Ïä§ÎßàÌä∏",
            "homework": "üìö ÏàôÏ†ú ÎèÑÏõÄ",
            "back": "‚¨ÖÔ∏è Îí§Î°ú"
        }
    }
    
    btn = buttons.get(lang, buttons["ru"])
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=btn["calm"]), KeyboardButton(text=btn["normal"])],
            [KeyboardButton(text=btn["short"]), KeyboardButton(text=btn["smart"])],
            [KeyboardButton(text=btn["homework"])],
            [KeyboardButton(text=btn["back"])]
        ],
        resize_keyboard=True
    )

def get_style_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∏–ª–µ–π –æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    lang = user_language.get(chat_id, "ru")
    
    buttons = {
        "ru": {
            "friendly": "üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
            "balanced": "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            "business": "üéØ –î–µ–ª–æ–≤–æ–π", 
            "creative": "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "en": {
            "friendly": "üí´ Friendly",
            "balanced": "‚öñÔ∏è Balanced",
            "business": "üéØ Business",
            "creative": "üé® Creative",
            "back": "‚¨ÖÔ∏è Back"
        },
        "es": {
            "friendly": "üí´ Amigable",
            "balanced": "‚öñÔ∏è Equilibrado",
            "business": "üéØ Empresarial", 
            "creative": "üé® Creativo",
            "back": "‚¨ÖÔ∏è Atr√°s"
        },
        "de": {
            "friendly": "üí´ Freundlich",
            "balanced": "‚öñÔ∏è Ausgeglichen",
            "business": "üéØ Gesch√§ftlich",
            "creative": "üé® Kreativ",
            "back": "‚¨ÖÔ∏è Zur√ºck"
        },
        "fr": {
            "friendly": "üí´ Amical",
            "balanced": "‚öñÔ∏è √âquilibr√©",
            "business": "üéØ Professionnel",
            "creative": "üé® Cr√©atif",
            "back": "‚¨ÖÔ∏è Retour"
        },
        "zh": {
            "friendly": "üí´ ÂèãÂ•Ω",
            "balanced": "‚öñÔ∏è Âπ≥Ë°°", 
            "business": "üéØ ÂïÜÂä°",
            "creative": "üé® ÂàõÊÑè",
            "back": "‚¨ÖÔ∏è ËøîÂõû"
        },
        "ja": {
            "friendly": "üí´ ÂèãÂ•ΩÁöÑ",
            "balanced": "‚öñÔ∏è „Éê„É©„É≥„Çπ",
            "business": "üéØ „Éì„Ç∏„Éç„Çπ",
            "creative": "üé® „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ",
            "back": "‚¨ÖÔ∏è Êàª„Çã"
        },
        "ko": {
            "friendly": "üí´ ÏπúÍ∑ºÌïú",
            "balanced": "‚öñÔ∏è Í∑†Ìòï Ïû°Ìûå",
            "business": "üéØ ÎπÑÏ¶àÎãàÏä§",
            "creative": "üé® Ï∞ΩÏùòÏ†ÅÏù∏",
            "back": "‚¨ÖÔ∏è Îí§Î°ú"
        }
    }
    
    btn = buttons.get(lang, buttons["ru"])
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=btn["friendly"]), KeyboardButton(text=btn["balanced"])],
            [KeyboardButton(text=btn["business"]), KeyboardButton(text=btn["creative"])],
            [KeyboardButton(text=btn["back"])]
        ],
        resize_keyboard=True
    )

def get_weather_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    lang = user_language.get(chat_id, "ru")
    
    buttons = {
        "ru": {
            "other": "üåÉ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "en": {
            "other": "üåÉ Other city", 
            "back": "‚¨ÖÔ∏è Back"
        },
        "es": {
            "other": "üåÉ Otra ciudad",
            "back": "‚¨ÖÔ∏è Atr√°s"
        },
        "de": {
            "other": "üåÉ Andere Stadt",
            "back": "‚¨ÖÔ∏è Zur√ºck"
        },
        "fr": {
            "other": "üåÉ Autre ville",
            "back": "‚¨ÖÔ∏è Retour"
        },
        "zh": {
            "other": "üåÉ ÂÖ∂‰ªñÂüéÂ∏Ç",
            "back": "‚¨ÖÔ∏è ËøîÂõû"
        },
        "ja": {
            "other": "üåÉ ‰ªñ„ÅÆÈÉΩÂ∏Ç",
            "back": "‚¨ÖÔ∏è Êàª„Çã"
        },
        "ko": {
            "other": "üåÉ Îã§Î•∏ ÎèÑÏãú",
            "back": "‚¨ÖÔ∏è Îí§Î°ú"
        }
    }
    
    btn = buttons.get(lang, buttons["ru"])
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåÜ –ú–æ—Å–∫–≤–∞"), KeyboardButton(text="üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
            [KeyboardButton(text="üóΩ –ù—å—é-–ô–æ—Ä–∫"), KeyboardButton(text="üåâ –õ–æ–Ω–¥–æ–Ω")],
            [KeyboardButton(text="üóº –ü–∞—Ä–∏–∂"), KeyboardButton(text="üèØ –¢–æ–∫–∏–æ")],
            [KeyboardButton(text=btn["other"]), KeyboardButton(text=btn["back"])]
        ],
        resize_keyboard=True
    )

def get_quick_commands_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    lang = user_language.get(chat_id, "ru")
    
    buttons = {
        "ru": {
            "currency": "üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç",
            "random": "üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä",
            "date": "üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞",
            "time": "‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", 
            "calc": "üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            "surprise": "üéÅ –°—é—Ä–ø—Ä–∏–∑",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "en": {
            "currency": "üìù Currency converter",
            "random": "üéØ Random choice",
            "date": "üìÖ Current date",
            "time": "‚è∞ Current time",
            "calc": "üî¢ Calculator",
            "surprise": "üéÅ Surprise", 
            "back": "‚¨ÖÔ∏è Back"
        },
        "es": {
            "currency": "üìù Conversor moneda",
            "random": "üéØ Elecci√≥n aleatoria",
            "date": "üìÖ Fecha actual",
            "time": "‚è∞ Hora actual",
            "calc": "üî¢ Calculadora",
            "surprise": "üéÅ Sorpresa",
            "back": "‚¨ÖÔ∏è Atr√°s"
        },
        "de": {
            "currency": "üìù W√§hrungsrechner",
            "random": "üéØ Zuf√§llige Wahl", 
            "date": "üìÖ Aktuelles Datum",
            "time": "‚è∞ Aktuelle Zeit",
            "calc": "üî¢ Rechner",
            "surprise": "üéÅ √úberraschung",
            "back": "‚¨ÖÔ∏è Zur√ºck"
        },
        "fr": {
            "currency": "üìù Convertisseur devise",
            "random": "üéØ Choix al√©atoire",
            "date": "üìÖ Date actuelle",
            "time": "‚è∞ Heure actuelle",
            "calc": "üî¢ Calculatrice",
            "surprise": "üéÅ Surprise",
            "back": "‚¨ÖÔ∏è Retour"
        },
        "zh": {
            "currency": "üìù Ë¥ßÂ∏ÅËΩ¨Êç¢Âô®",
            "random": "üéØ ÈöèÊú∫ÈÄâÊã©", 
            "date": "üìÖ ÂΩìÂâçÊó•Êúü",
            "time": "‚è∞ ÂΩìÂâçÊó∂Èó¥",
            "calc": "üî¢ ËÆ°ÁÆóÂô®",
            "surprise": "üéÅ ÊÉäÂñú",
            "back": "‚¨ÖÔ∏è ËøîÂõû"
        },
        "ja": {
            "currency": "üìù ÈÄöË≤®„Ç≥„É≥„Éê„Éº„Çø„Éº",
            "random": "üéØ „É©„É≥„ÉÄ„É†ÈÅ∏Êäû",
            "date": "üìÖ ÁèæÂú®„ÅÆÊó•‰ªò",
            "time": "‚è∞ ÁèæÂú®ÊôÇÂàª",
            "calc": "üî¢ Ë®àÁÆóÊ©ü",
            "surprise": "üéÅ „Çµ„Éó„É©„Ç§„Ç∫",
            "back": "‚¨ÖÔ∏è Êàª„Çã"
        },
        "ko": {
            "currency": "üìù ÌÜµÌôî Î≥ÄÌôòÍ∏∞",
            "random": "üéØ Î¨¥ÏûëÏúÑ ÏÑ†ÌÉù",
            "date": "üìÖ ÌòÑÏû¨ ÎÇ†Ïßú",
            "time": "‚è∞ ÌòÑÏû¨ ÏãúÍ∞Ñ",
            "calc": "üî¢ Í≥ÑÏÇ∞Í∏∞",
            "surprise": "üéÅ ÏÑúÌîÑÎùºÏù¥Ï¶à",
            "back": "‚¨ÖÔ∏è Îí§Î°ú"
        }
    }
    
    btn = buttons.get(lang, buttons["ru"])
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=btn["currency"]), KeyboardButton(text=btn["random"])],
            [KeyboardButton(text=btn["date"]), KeyboardButton(text=btn["time"])],
            [KeyboardButton(text=btn["calc"]), KeyboardButton(text=btn["surprise"])],
            [KeyboardButton(text=btn["back"])]
        ],
        resize_keyboard=True
    )

def get_admin_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    lang = user_language.get(chat_id, "ru")
    
    buttons = {
        "ru": {
            "users": "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "stats": "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "logs": "üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", 
            "back": "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        },
        "en": {
            "users": "üë• User statistics",
            "stats": "üìä General statistics",
            "logs": "üìã Action logs",
            "back": "‚¨ÖÔ∏è Main menu"
        },
        "es": {
            "users": "üë• Estad√≠sticas usuarios",
            "stats": "üìä Estad√≠sticas generales",
            "logs": "üìã Registros acciones",
            "back": "‚¨ÖÔ∏è Men√∫ principal"
        },
        "de": {
            "users": "üë• Benutzerstatistiken",
            "stats": "üìä Allgemeine Statistiken", 
            "logs": "üìã Aktionsprotokolle",
            "back": "‚¨ÖÔ∏è Hauptmen√º"
        },
        "fr": {
            "users": "üë• Statistiques utilisateurs",
            "stats": "üìä Statistiques g√©n√©rales",
            "logs": "üìã Journaux actions",
            "back": "‚¨ÖÔ∏è Menu principal"
        },
        "zh": {
            "users": "üë• Áî®Êà∑ÁªüËÆ°",
            "stats": "üìä ÊÄª‰ΩìÁªüËÆ°",
            "logs": "üìã Êìç‰ΩúÊó•Âøó",
            "back": "‚¨ÖÔ∏è ‰∏ªËèúÂçï"
        },
        "ja": {
            "users": "üë• „É¶„Éº„Ç∂„ÉºÁµ±Ë®à",
            "stats": "üìä ÂÖ®‰ΩìÁµ±Ë®à", 
            "logs": "üìã „Ç¢„ÇØ„Ç∑„Éß„É≥„É≠„Ç∞",
            "back": "‚¨ÖÔ∏è „É°„Ç§„É≥„É°„Éã„É•„Éº"
        },
        "ko": {
            "users": "üë• ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ",
            "stats": "üìä ÏùºÎ∞ò ÌÜµÍ≥Ñ",
            "logs": "üìã ÏûëÏóÖ Î°úÍ∑∏",
            "back": "‚¨ÖÔ∏è Î©îÏù∏ Î©îÎâ¥"
        }
    }
    
    btn = buttons.get(lang, buttons["ru"])
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=btn["users"]), KeyboardButton(text=btn["stats"])],
            [KeyboardButton(text=btn["logs"])],
            [KeyboardButton(text=btn["back"])]
        ],
        resize_keyboard=True
    )

# =======================
# ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====
# =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    initialize_user_data(chat_id)

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ /start, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
    if user_language.get(chat_id) is None:
        user_awaiting_language[chat_id] = True
        welcome_text = (
            "üåê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! / Welcome! / ¬°Bienvenido! / Willkommen! / Bienvenue! / Ê¨¢ËøéÔºÅ/ „Çà„ÅÜ„Åì„ÅùÔºÅ/ ÌôòÏòÅÌï©ÎãàÎã§ÔºÅ\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select your language:"
        )
        await message.answer(welcome_text, reply_markup=get_language_keyboard())
    else:
        await show_main_menu(message)

async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = message.chat.id
    initialize_user_data(chat_id)

    current_mode = user_modes[chat_id]
    remaining_days = get_remaining_days(chat_id)
    current_tariff = get_user_tariff(chat_id)
    remaining_requests = get_remaining_daily_requests(chat_id)
    remaining_homework = get_remaining_homework_requests(chat_id)
    is_free = is_free_period_active(chat_id)
    
    welcome_text = f"ü§ñ GlemixAI\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
    
    if is_free:
        welcome_text += f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {remaining_days} –¥–Ω–µ–π\n"
        welcome_text += f"üìö –ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏: {remaining_homework} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    else:
        welcome_text += f"üíé –¢–∞—Ä–∏—Ñ: {TARIFFS[current_tariff]['name']}\n"
        welcome_text += f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
    
    welcome_text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}/{TARIFFS[current_tariff]['daily_limits']}\n"
    welcome_text += f"üé≠ –†–µ–∂–∏–º: {current_mode}\n"
    welcome_text += f"üíæ –ü–∞–º—è—Ç—å: {get_user_memory_limit(chat_id)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    welcome_text += f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n\n"
    
    if is_free and remaining_days <= 2:
        welcome_text += "üí° –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.\n\n"
    
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await message.answer(welcome_text, reply_markup=get_main_keyboard(chat_id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –Ø–ó–´–ö–ê =====
# =======================
@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üá∏ English", "üá™üá∏ Espa√±ol", "üá©üá™ Deutsch", "üá´üá∑ Fran√ßais", "üá®üá≥ ‰∏≠Êñá", "üáØüáµ Êó•Êú¨Ë™û", "üá∞üá∑ ÌïúÍµ≠Ïñ¥"]))
async def handle_language_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    chat_id = message.chat.id
    
    language_map = {
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
        "üá∫üá∏ English": "en", 
        "üá™üá∏ Espa√±ol": "es",
        "üá©üá™ Deutsch": "de",
        "üá´üá∑ Fran√ßais": "fr",
        "üá®üá≥ ‰∏≠Êñá": "zh",
        "üáØüáµ Êó•Êú¨Ë™û": "ja",
        "üá∞üá∑ ÌïúÍµ≠Ïñ¥": "ko"
    }
    
    selected_language = language_map.get(message.text, "ru")
    user_language[chat_id] = selected_language
    save_data(user_language, DATA_FILES['user_language'])
    
    user_awaiting_language[chat_id] = False
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    greetings = {
        "ru": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π üá∑üá∫",
        "en": "Language set: English üá∫üá∏",
        "es": "Idioma establecido: Espa√±ol üá™üá∏", 
        "de": "Sprache eingestellt: Deutsch üá©üá™",
        "fr": "Langue d√©finie: Fran√ßais üá´üá∑",
        "zh": "ËØ≠Ë®ÄËÆæÁΩÆÔºö‰∏≠Êñá üá®üá≥",
        "ja": "Ë®ÄË™ûË®≠ÂÆöÔºöÊó•Êú¨Ë™û üáØüáµ",
        "ko": "Ïñ∏Ïñ¥ ÏÑ§Ï†ïÔºöÌïúÍµ≠Ïñ¥ üá∞üá∑"
    }
    
    await message.answer(greetings.get(selected_language, "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"), reply_markup=get_main_keyboard(chat_id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ =====
# =======================
@dp.message(F.text.in_(["üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "üöÄ Start work", "üöÄ Iniciar trabajo", "üöÄ Arbeit beginnen", "üöÄ Commencer", "üöÄ ÂºÄÂßãÂ∑•‰Ωú", "üöÄ ‰ªï‰∫ã„ÇíÂßã„ÇÅ„Çã", "üöÄ ÏûëÏóÖ ÏãúÏûë"]))
async def handle_start_work(message: types.Message):
    await show_main_menu(message)

@dp.message(F.text.in_(["üåü –û–±–æ –º–Ω–µ", "üåü About me", "üåü Sobre m√≠", "üåü √úber mich", "üåü √Ä propos", "üåü ÂÖ≥‰∫éÊàë", "üåü ÁßÅ„Å´„Å§„ÅÑ„Å¶", "üåü ÎÇ¥ Ï†ïÎ≥¥"]))
async def handle_about(message: types.Message):
    about_text = (
        "ü§ñ GlemixAI\n\n"
        "–Ø - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n\n"
        "‚Ä¢ üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ (OCR)\n" 
        "‚Ä¢ üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ üß† –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ üå§Ô∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "‚Ä¢ üìö –ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
        "‚Ä¢ üíé –ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–∏—Ñ–æ–≤\n\n"
        "–†–∞–±–æ—Ç–∞—é –Ω–∞ Mistral AI - –æ–¥–Ω–æ–º –∏–∑ –ª—É—á—à–∏—Ö AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤!"
    )
    await message.answer(about_text, reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text.in_(["‚ùì –ü–æ–º–æ—â—å", "‚ùì Help", "‚ùì Ayuda", "‚ùì Hilfe", "‚ùì Aide", "‚ùì Â∏ÆÂä©", "‚ùì „Éò„É´„Éó", "‚ùì ÎèÑÏõÄÎßê"]))
async def handle_help(message: types.Message):
    help_text = (
        "‚ùì –ü–æ–º–æ—â—å –ø–æ GlemixAI\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ üì∏ –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" 
        "‚Ä¢ üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ üå§Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –ø–æ–≥–æ–¥—É\n"
        "‚Ä¢ üìö –ü–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
        "‚Ä¢ üî¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º - —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ–≥–æ\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞—Å—à–∏—Ñ—Ä—É—é\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç - –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É"
    )
    await message.answer(help_text, reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üå§Ô∏è –ü–æ–≥–æ–¥–∞", "üå§Ô∏è Weather", "üå§Ô∏è Clima", "üå§Ô∏è Wetter", "üå§Ô∏è M√©t√©o", "üå§Ô∏è Â§©Ê∞î", "üå§Ô∏è Â§©Ê∞ó", "üå§Ô∏è ÎÇ†Ïî®"]))
async def handle_weather_button(message: types.Message):
    weather_text = "üå§Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞:"
    await message.answer(weather_text, reply_markup=get_weather_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üíé –¢–∞—Ä–∏—Ñ—ã", "üíé Tariffs", "üíé Tarifas", "üíé Tarife", "üíé Tarifs", "üíé ËµÑË¥π", "üíé ÊñôÈáë", "üíé ÏöîÍ∏àÏ†ú"]))
async def handle_tariffs(message: types.Message):
    tariffs_text = "üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
    
    for tariff_id, tariff_info in TARIFFS.items():
        tariffs_text += f"{tariff_info['name']}\n"
        tariffs_text += f"–¶–µ–Ω–∞: {tariff_info['price']}\n"
        tariffs_text += f"–õ–∏–º–∏—Ç: {tariff_info['daily_limits']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å\n"
        tariffs_text += f"–û–∂–∏–¥–∞–Ω–∏–µ: {TARIFF_COOLDOWNS[tariff_id]} —Å–µ–∫\n\n"
    
    await message.answer(tariffs_text, reply_markup=get_tariffs_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", "üßπ Clear memory", "üßπ Limpiar memoria", "üßπ Speicher l√∂schen", "üßπ Effacer m√©moire", "üßπ Ê∏ÖÈô§ËÆ∞ÂøÜ", "üßπ „É°„É¢„É™„Çí„ÇØ„É™„Ç¢", "üßπ Î©îÎ™®Î¶¨ ÏßÄÏö∞Í∏∞"]))
async def handle_clear_memory(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏"""
    chat_id = message.chat.id
    
    if chat_id in conversation_memory:
        conversation_memory[chat_id] = []
        save_data(conversation_memory, DATA_FILES['conversation_memory'])
    
    if chat_id in user_last_photo_text:
        user_last_photo_text[chat_id] = ""
    
    await message.answer("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —è –∑–∞–±—ã–ª –≤—Å—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –±–µ—Å–µ–¥—É –∏ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.", 
                        reply_markup=get_main_keyboard(chat_id))

@dp.message(F.text.in_(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è Settings", "‚öôÔ∏è Configuraci√≥n", "‚öôÔ∏è Einstellungen", "‚öôÔ∏è Param√®tres", "‚öôÔ∏è ËÆæÁΩÆ", "‚öôÔ∏è Ë®≠ÂÆö", "‚öôÔ∏è ÏÑ§Ï†ï"]))
async def handle_settings(message: types.Message):
    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await message.answer(settings_text, reply_markup=get_settings_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üõ†Ô∏è Admin panel", "üõ†Ô∏è Panel admin", "üõ†Ô∏è Admin-Panel", "üõ†Ô∏è Panel admin", "üõ†Ô∏è ÁÆ°ÁêÜÈù¢Êùø", "üõ†Ô∏è ÁÆ°ÁêÜ„Éë„Éç„É´", "üõ†Ô∏è Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê"]))
async def handle_admin_panel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    total_users = len(user_registration_date)
    today_requests = sum(data.get("count", 0) for data in user_daily_requests.values() if data.get("date") == datetime.now().date())
    active_subscriptions = sum(1 for end_date in user_subscription_end.values() if end_date > datetime.now())
    
    admin_text = (
        "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å GlemixAI\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_requests}\n"
        f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(admin_text, reply_markup=get_admin_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåê Change language", "üåê Cambiar idioma", "üåê Sprache √§ndern", "üåê Changer langue", "üåê Êõ¥ÊîπËØ≠Ë®Ä", "üåê Ë®ÄË™ûÂ§âÊõ¥", "üåê Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω"]))
async def handle_change_language(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    chat_id = message.chat.id
    user_awaiting_language[chat_id] = True
    
    language_text = (
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select your language:\n\n"
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π\n"
        "üá∫üá∏ English\n" 
        "üá™üá∏ Espa√±ol\n"
        "üá©üá™ Deutsch\n"
        "üá´üá∑ Fran√ßais\n"
        "üá®üá≥ ‰∏≠Êñá\n"
        "üáØüáµ Êó•Êú¨Ë™û\n"
        "üá∞üá∑ ÌïúÍµ≠Ïñ¥"
    )
    
    await message.answer(language_text, reply_markup=get_language_keyboard())

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ù–ê–°–¢–†–û–ï–ö =====
# =======================
@dp.message(F.text.in_(["üé≠ –†–µ–∂–∏–º—ã AI", "üé≠ AI Modes", "üé≠ Modos AI", "üé≠ KI-Modi", "üé≠ Modes IA", "üé≠ AIÊ®°Âºè", "üé≠ AI„É¢„Éº„Éâ", "üé≠ AI Î™®Îìú"]))
async def handle_ai_modes(message: types.Message):
    modes_text = (
        "üé≠ –†–µ–∂–∏–º—ã AI\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
        "‚Ä¢ üßò –°–ø–æ–∫–æ–π–Ω—ã–π - –º—è–≥–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ üí¨ –û–±—ã—á–Ω—ã–π - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ ‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π - –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ üß† –£–º–Ω—ã–π - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ üìö –ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"
    )
    await message.answer(modes_text, reply_markup=get_mode_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üìö –ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏", "üìö Homework help", "üìö Ayuda tareas", "üìö Hausaufgabenhilfe", "üìö Aide devoirs", "üìö ‰Ωú‰∏öÂ∏ÆÂä©", "üìö ÂÆøÈ°å„Éò„É´„Éó", "üìö ÏàôÏ†ú ÎèÑÏõÄ"]))
async def handle_homework_mode(message: types.Message):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–º–æ—â–∏ —Å —É—Ä–æ–∫–∞–º–∏"""
    chat_id = message.chat.id
    user_modes[chat_id] = "homework"
    save_data(user_modes, DATA_FILES['user_modes'])
    
    remaining_homework = get_remaining_homework_requests(chat_id)
    
    mode_text = "üìö –†–µ–∂–∏–º '–ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
    mode_text += "–Ø –±—É–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å —Å:\n"
    mode_text += "‚Ä¢ –î–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n‚Ä¢ –£—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏\n"
    mode_text += "‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º\n‚Ä¢ –†–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á\n\n"
    mode_text += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_homework}\n\n"
    mode_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —É—á–µ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:"
    
    await message.answer(mode_text, reply_markup=get_mode_keyboard(chat_id))

@dp.message(F.text.in_(["üí¨ –û–±—ã—á–Ω—ã–π", "üí¨ Normal", "üí¨ Normal", "üí¨ Normal", "üí¨ Normal", "üí¨ ÊôÆÈÄö", "üí¨ ÈÄöÂ∏∏", "üí¨ ÏùºÎ∞ò"]))
async def handle_normal_mode(message: types.Message):
    chat_id = message.chat.id
    user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"
    save_data(user_modes, DATA_FILES['user_modes'])
    await message.answer("üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=get_mode_keyboard(chat_id))

@dp.message(F.text.in_(["‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π", "‚ö° Short", "‚ö° Corto", "‚ö° Kurz", "‚ö° Court", "‚ö° ÁÆÄÁü≠", "‚ö° Áü≠„ÅÑ", "‚ö° ÏßßÏùÄ"]))
async def handle_short_mode(message: types.Message):
    chat_id = message.chat.id
    user_modes[chat_id] = "–∫–æ—Ä–æ—Ç–∫–∏–π"
    save_data(user_modes, DATA_FILES['user_modes'])
    await message.answer("‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=get_mode_keyboard(chat_id))

@dp.message(F.text.in_(["üß† –£–º–Ω—ã–π", "üß† Smart", "üß† Inteligente", "üß† Intelligent", "üß† Intelligent", "üß† Êô∫ËÉΩ", "üß† „Çπ„Éû„Éº„Éà", "üß† Ïä§ÎßàÌä∏"]))
async def handle_smart_mode(message: types.Message):
    chat_id = message.chat.id
    user_modes[chat_id] = "—É–º–Ω—ã–π"
    save_data(user_modes, DATA_FILES['user_modes'])
    await message.answer("üß† –£–º–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=get_mode_keyboard(chat_id))

@dp.message(F.text.in_(["üßò –°–ø–æ–∫–æ–π–Ω—ã–π", "üßò Calm", "üßò Calmado", "üßò Ruhig", "üßò Calme", "üßò Âπ≥Èùô", "üßò ÂÜ∑Èùô", "üßò Ï∞®Î∂ÑÌïú"]))
async def handle_calm_mode(message: types.Message):
    chat_id = message.chat.id
    user_modes[chat_id] = "—Å–ø–æ–∫–æ–π–Ω—ã–π"
    save_data(user_modes, DATA_FILES['user_modes'])
    await message.answer("üßò –°–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=get_mode_keyboard(chat_id))

@dp.message(F.text.in_(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä Statistics", "üìä Estad√≠sticas", "üìä Statistiken", "üìä Statistiques", "üìä ÁªüËÆ°", "üìä Áµ±Ë®à", "üìä ÌÜµÍ≥Ñ"]))
async def handle_user_statistics(message: types.Message):
    chat_id = message.from_user.id
    total_requests = user_requests_count.get(chat_id, {}).get("total", 0)
    remaining_requests = get_remaining_daily_requests(chat_id)
    remaining_homework = get_remaining_homework_requests(chat_id)
    current_tariff = get_user_tariff(chat_id)
    
    stats_text = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    stats_text += f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
    stats_text += f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}/{TARIFFS[current_tariff]['daily_limits']}\n"
    stats_text += f"üìö –ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏: {remaining_homework} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    stats_text += f"üíé –¢–∞—Ä–∏—Ñ: {TARIFFS[current_tariff]['name']}\n"
    stats_text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {get_remaining_days(chat_id)}"
    
    await message.answer(stats_text, reply_markup=get_settings_keyboard(chat_id))

@dp.message(F.text.in_(["üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è", "üé® Communication style", "üé® Estilo comunicaci√≥n", "üé® Kommunikationsstil", "üé® Style communication", "üé® ‰∫§ÊµÅÈ£éÊ†º", "üé® „Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„Çπ„Çø„Ç§„É´", "üé® Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ïä§ÌÉÄÏùº"]))
async def handle_communication_style(message: types.Message):
    style_text = (
        "üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å:\n"
        "‚Ä¢ üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ ‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "‚Ä¢ üéØ –î–µ–ª–æ–≤–æ–π - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω\n"
        "‚Ä¢ üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π - —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã"
    )
    await message.answer(style_text, reply_markup=get_style_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "üí´ Friendly", "üí´ Amigable", "üí´ Freundlich", "üí´ Amical", "üí´ ÂèãÂ•Ω", "üí´ ÂèãÂ•ΩÁöÑ", "üí´ ÏπúÍ∑ºÌïú"]))
async def handle_friendly_style(message: types.Message):
    chat_id = message.chat.id
    chat_style[chat_id] = "friendly"
    save_data(chat_style, DATA_FILES['chat_style'])
    await message.answer("üí´ –°—Ç–∏–ª—å '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=get_style_keyboard(chat_id))

@dp.message(F.text.in_(["‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "‚öñÔ∏è Balanced", "‚öñÔ∏è Equilibrado", "‚öñÔ∏è Ausgeglichen", "‚öñÔ∏è √âquilibr√©", "‚öñÔ∏è Âπ≥Ë°°", "‚öñÔ∏è „Éê„É©„É≥„Çπ", "‚öñÔ∏è Í∑†Ìòï Ïû°Ìûå"]))
async def handle_balanced_style(message: types.Message):
    chat_id = message.chat.id
    chat_style[chat_id] = "balanced"
    save_data(chat_style, DATA_FILES['chat_style'])
    await message.answer("‚öñÔ∏è –°—Ç–∏–ª—å '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=get_style_keyboard(chat_id))

@dp.message(F.text.in_(["üéØ –î–µ–ª–æ–≤–æ–π", "üéØ Business", "üéØ Empresarial", "üéØ Gesch√§ftlich", "üéØ Professionnel", "üéØ ÂïÜÂä°", "üéØ „Éì„Ç∏„Éç„Çπ", "üéØ ÎπÑÏ¶àÎãàÏä§"]))
async def handle_business_style(message: types.Message):
    chat_id = message.chat.id
    chat_style[chat_id] = "business"
    save_data(chat_style, DATA_FILES['chat_style'])
    await message.answer("üéØ –°—Ç–∏–ª—å '–î–µ–ª–æ–≤–æ–π' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=get_style_keyboard(chat_id))

@dp.message(F.text.in_(["üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "üé® Creative", "üé® Creativo", "üé® Kreativ", "üé® Cr√©atif", "üé® ÂàõÊÑè", "üé® „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ", "üé® Ï∞ΩÏùòÏ†ÅÏù∏"]))
async def handle_creative_style(message: types.Message):
    chat_id = message.chat.id
    chat_style[chat_id] = "creative"
    save_data(chat_style, DATA_FILES['chat_style'])
    await message.answer("üé® –°—Ç–∏–ª—å '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=get_style_keyboard(chat_id))

@dp.message(F.text.in_(["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚ÑπÔ∏è Information", "‚ÑπÔ∏è Informaci√≥n", "‚ÑπÔ∏è Information", "‚ÑπÔ∏è Information", "‚ÑπÔ∏è ‰ø°ÊÅØ", "‚ÑπÔ∏è ÊÉÖÂ†±", "‚ÑπÔ∏è Ï†ïÎ≥¥"]))
async def handle_info(message: types.Message):
    info_text = (
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GlemixAI\n\n"
        "ü§ñ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ Mistral AI\n\n"
        "üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n"
        "‚Ä¢ üìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
        "‚Ä¢ üî§ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏\n"
        "‚Ä¢ üßÆ –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª\n"
        "‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\n"
        "‚Ä¢ ‚úÇÔ∏è –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!\n\n"
        "–í–µ—Ä—Å–∏—è: 2.1\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Glemix Team"
    )
    await message.answer(info_text, reply_markup=get_settings_keyboard(message.from_user.id))

@dp.message(F.text.in_(["‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", "‚ö° Quick commands", "‚ö° Comandos r√°pidos", "‚ö° Schnellbefehle", "‚ö° Commandes rapides", "‚ö° Âø´ÈÄüÂëΩ‰ª§", "‚ö° „ÇØ„Ç§„ÉÉ„ÇØ„Ç≥„Éû„É≥„Éâ", "‚ö° Îπ†Î•∏ Î™ÖÎ†π"]))
async def handle_quick_commands(message: types.Message):
    await message.answer("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=get_quick_commands_keyboard(message.from_user.id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –¢–ê–†–ò–§–û–í =====
# =======================
@dp.message(F.text.in_(["üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ", "üìä My tariff", "üìä Mi tarifa", "üìä Mein Tarif", "üìä Mon tarif", "üìä ÊàëÁöÑËµÑË¥π", "üìä ÁßÅ„ÅÆÊñôÈáë", "üìä ÎÇ¥ ÏöîÍ∏àÏ†ú"]))
async def handle_my_tariff(message: types.Message):
    chat_id = message.from_user.id
    current_tariff = get_user_tariff(chat_id)
    remaining_days = get_remaining_days(chat_id)
    remaining_requests = get_remaining_daily_requests(chat_id)
    remaining_homework = get_remaining_homework_requests(chat_id)
    
    tariff_text = f"üìä –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n"
    tariff_text += f"üíé {TARIFFS[current_tariff]['name']}\n"
    tariff_text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
    tariff_text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}/{TARIFFS[current_tariff]['daily_limits']}\n"
    tariff_text += f"üìö –ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏: {remaining_homework} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    tariff_text += f"‚ö° –û–∂–∏–¥–∞–Ω–∏–µ: {get_user_cooldown(chat_id)} —Å–µ–∫\n"
    tariff_text += f"üíæ –ü–∞–º—è—Ç—å: {get_user_memory_limit(chat_id)} —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    await message.answer(tariff_text, reply_markup=get_tariffs_keyboard(chat_id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ü–û–ì–û–î–´ =====
# =======================
@dp.message(F.text.in_(["üåÜ –ú–æ—Å–∫–≤–∞", "üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "üóΩ –ù—å—é-–ô–æ—Ä–∫", "üåâ –õ–æ–Ω–¥–æ–Ω", "üóº –ü–∞—Ä–∏–∂", "üèØ –¢–æ–∫–∏–æ"]))
async def handle_city_weather(message: types.Message):
    city_mapping = {
        "üåÜ –ú–æ—Å–∫–≤–∞": "–ú–æ—Å–∫–≤–∞",
        "üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 
        "üóΩ –ù—å—é-–ô–æ—Ä–∫": "–ù—å—é-–ô–æ—Ä–∫",
        "üåâ –õ–æ–Ω–¥–æ–Ω": "–õ–æ–Ω–¥–æ–Ω",
        "üóº –ü–∞—Ä–∏–∂": "–ü–∞—Ä–∏–∂",
        "üèØ –¢–æ–∫–∏–æ": "–¢–æ–∫–∏–æ"
    }
    
    city = city_mapping.get(message.text, message.text)
    
    thinking_msg_id = await send_thinking_message(message.chat.id)
    
    try:
        weather_info = await get_detailed_weather(city)
        await delete_thinking_message(message.chat.id, thinking_msg_id)
        await message.answer(weather_info, reply_markup=get_weather_keyboard(message.chat.id))
        increment_user_requests(message.chat.id)
        
    except Exception as e:
        await delete_thinking_message(message.chat.id, thinking_msg_id)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_weather_keyboard(message.chat.id))

@dp.message(F.text.in_(["üåÉ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", "üåÉ Other city", "üåÉ Otra ciudad", "üåÉ Andere Stadt", "üåÉ Autre ville", "üåÉ ÂÖ∂‰ªñÂüéÂ∏Ç", "üåÉ ‰ªñ„ÅÆÈÉΩÂ∏Ç", "üåÉ Îã§Î•∏ ÎèÑÏãú"]))
async def handle_other_city(message: types.Message):
    lang = user_language.get(message.chat.id, "ru")
    texts = {
        "ru": "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '–ú–æ—Å–∫–≤–∞'):",
        "en": "üèôÔ∏è Enter city name (e.g.: 'Weather in Moscow' or just 'Moscow'):",
        "es": "üèôÔ∏è Ingrese nombre de ciudad (ej.: 'Clima en Mosc√∫' o solo 'Mosc√∫'):",
        "de": "üèôÔ∏è Geben Sie den Stadtnamen ein (z.B.: 'Wetter in Moskau' oder nur 'Moskau'):",
        "fr": "üèôÔ∏è Entrez le nom de la ville (ex.: 'M√©t√©o √† Moscou' ou juste 'Moscou'):",
        "zh": "üèôÔ∏è ËæìÂÖ•ÂüéÂ∏ÇÂêçÁß∞Ôºà‰æãÂ¶ÇÔºö'Ëé´ÊñØÁßëÂ§©Ê∞î' Êàñ‰ªÖ 'Ëé´ÊñØÁßë'ÔºâÔºö",
        "ja": "üèôÔ∏è ÈÉΩÂ∏ÇÂêç„ÇíÂÖ•ÂäõÔºà‰æãÔºö'„É¢„Çπ„ÇØ„ÉØ„ÅÆÂ§©Ê∞ó' „Åæ„Åü„ÅØ '„É¢„Çπ„ÇØ„ÉØ'ÔºâÔºö",
        "ko": "üèôÔ∏è ÎèÑÏãú Ïù¥Î¶Ñ ÏûÖÎ†• (Ïòà: 'Î™®Ïä§ÌÅ¨Î∞î ÎÇ†Ïî®' ÎòêÎäî 'Î™®Ïä§ÌÅ¨Î∞î'):"
    }
    await message.answer(texts.get(lang, texts["ru"]), reply_markup=get_weather_keyboard(message.chat.id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ë–´–°–¢–†–´–• –ö–û–ú–ê–ù–î =====
# =======================
@dp.message(F.text.in_(["üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", "üìù Currency converter", "üìù Conversor moneda", "üìù W√§hrungsrechner", "üìù Convertisseur devise", "üìù Ë¥ßÂ∏ÅËΩ¨Êç¢Âô®", "üìù ÈÄöË≤®„Ç≥„É≥„Éê„Éº„Çø„Éº", "üìù ÌÜµÌôî Î≥ÄÌôòÍ∏∞"]))
async def handle_currency_converter(message: types.Message):
    await message.answer("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\nUSD ‚Üí 90.5 ‚ÇΩ\nEUR ‚Üí 98.2 ‚ÇΩ\nCNY ‚Üí 12.5 ‚ÇΩ", reply_markup=get_quick_commands_keyboard(message.chat.id))

@dp.message(F.text.in_(["üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä", "üéØ Random choice", "üéØ Elecci√≥n aleatoria", "üéØ Zuf√§llige Wahl", "üéØ Choix al√©atoire", "üéØ ÈöèÊú∫ÈÄâÊã©", "üéØ „É©„É≥„ÉÄ„É†ÈÅ∏Êäû", "üéØ Î¨¥ÏûëÏúÑ ÏÑ†ÌÉù"]))
async def handle_random_choice(message: types.Message):
    choices = ["üçé –Ø–±–ª–æ–∫–æ", "üçå –ë–∞–Ω–∞–Ω", "üçä –ê–ø–µ–ª—å—Å–∏–Ω", "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", "üçì –ö–ª—É–±–Ω–∏–∫–∞"]
    await message.answer(f"üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä: {random.choice(choices)}", reply_markup=get_quick_commands_keyboard(message.chat.id))

@dp.message(F.text.in_(["üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞", "üìÖ Current date", "üìÖ Fecha actual", "üìÖ Aktuelles Datum", "üìÖ Date actuelle", "üìÖ ÂΩìÂâçÊó•Êúü", "üìÖ ÁèæÂú®„ÅÆÊó•‰ªò", "üìÖ ÌòÑÏû¨ ÎÇ†Ïßú"]))
async def handle_current_date(message: types.Message):
    current_date = datetime.now().strftime("%d.%m.%Y")
    await message.answer(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {current_date}", reply_markup=get_quick_commands_keyboard(message.chat.id))

@dp.message(F.text.in_(["‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", "‚è∞ Current time", "‚è∞ Hora actual", "‚è∞ Aktuelle Zeit", "‚è∞ Heure actuelle", "‚è∞ ÂΩìÂâçÊó∂Èó¥", "‚è∞ ÁèæÂú®ÊôÇÂàª", "‚è∞ ÌòÑÏû¨ ÏãúÍ∞Ñ"]))
async def handle_current_time(message: types.Message):
    current_time = datetime.now().strftime("%H:%M:%S")
    await message.answer(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}", reply_markup=get_quick_commands_keyboard(message.chat.id))

@dp.message(F.text.in_(["üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üî¢ Calculator", "üî¢ Calculadora", "üî¢ Rechner", "üî¢ Calculatrice", "üî¢ ËÆ°ÁÆóÂô®", "üî¢ Ë®àÁÆóÊ©ü", "üî¢ Í≥ÑÏÇ∞Í∏∞"]))
async def handle_calculator(message: types.Message):
    lang = user_language.get(message.chat.id, "ru")
    texts = {
        "ru": "üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2+2, 10*5, 100/4):",
        "en": "üî¢ Enter mathematical expression (e.g.: 2+2, 10*5, 100/4):",
        "es": "üî¢ Ingrese expresi√≥n matem√°tica (ej.: 2+2, 10*5, 100/4):",
        "de": "üî¢ Geben Sie einen mathematischen Ausdruck ein (z.B.: 2+2, 10*5, 100/4):",
        "fr": "üî¢ Entrez une expression math√©matique (ex.: 2+2, 10*5, 100/4):",
        "zh": "üî¢ ËæìÂÖ•Êï∞Â≠¶Ë°®ËææÂºèÔºà‰æãÂ¶ÇÔºö2+2, 10*5, 100/4ÔºâÔºö",
        "ja": "üî¢ Êï∞Âºè„ÇíÂÖ•ÂäõÔºà‰æãÔºö2+2, 10*5, 100/4ÔºâÔºö",
        "ko": "üî¢ ÏàòÌïô ÌëúÌòÑÏãù ÏûÖÎ†• (Ïòà: 2+2, 10*5, 100/4):"
    }
    await message.answer(texts.get(lang, texts["ru"]), reply_markup=get_quick_commands_keyboard(message.chat.id))

@dp.message(F.text.in_(["üéÅ –°—é—Ä–ø—Ä–∏–∑", "üéÅ Surprise", "üéÅ Sorpresa", "üéÅ √úberraschung", "üéÅ Surprise", "üéÅ ÊÉäÂñú", "üéÅ „Çµ„Éó„É©„Ç§„Ç∫", "üéÅ ÏÑúÌîÑÎùºÏù¥Ï¶à"]))
async def handle_surprise(message: types.Message):
    surprises = [
        "üéâ –í–æ—Ç –≤–∞—à —Å—é—Ä–ø—Ä–∏–∑! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
        "üåü –£–¥–∞—á–∏ –≤ –¥–µ–ª–∞—Ö!",
        "üí´ –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º!",
        "üéØ –í—ã –ª—É—á—à–∏–π!",
        "üåà –ñ–µ–ª–∞—é –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!"
    ]
    await message.answer(random.choice(surprises), reply_markup=get_quick_commands_keyboard(message.chat.id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ù–ê–ó–ê–î =====
# =======================
@dp.message(F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back", "‚¨ÖÔ∏è Atr√°s", "‚¨ÖÔ∏è Zur√ºck", "‚¨ÖÔ∏è Retour", "‚¨ÖÔ∏è ËøîÂõû", "‚¨ÖÔ∏è Êàª„Çã", "‚¨ÖÔ∏è Îí§Î°ú"]))
async def handle_back(message: types.Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_keyboard(message.from_user.id))

@dp.message(F.text.in_(["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è Main menu", "‚¨ÖÔ∏è Men√∫ principal", "‚¨ÖÔ∏è Hauptmen√º", "‚¨ÖÔ∏è Menu principal", "‚¨ÖÔ∏è ‰∏ªËèúÂçï", "‚¨ÖÔ∏è „É°„Ç§„É≥„É°„Éã„É•„Éº", "‚¨ÖÔ∏è Î©îÏù∏ Î©îÎâ¥"]))
async def handle_admin_back(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(message.from_user.id))

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò =====
# =======================
@dp.message(F.text.in_(["üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üë• User statistics", "üë• Estad√≠sticas usuarios", "üë• Benutzerstatistiken", "üë• Statistiques utilisateurs", "üë• Áî®Êà∑ÁªüËÆ°", "üë• „É¶„Éº„Ç∂„ÉºÁµ±Ë®à", "üë• ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ"]))
async def handle_user_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    total_users = len(user_registration_date)
    active_today = 0
    today = datetime.now().date()
    
    for user_id, daily_data in user_daily_requests.items():
        if daily_data.get("date") == today and daily_data.get("count", 0) > 0:
            active_today += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
    tariff_stats = {}
    for user_id in user_registration_date:
        tariff = get_user_tariff(user_id)
        tariff_stats[tariff] = tariff_stats.get(tariff, 0) + 1
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
    stats_text += f"üìÖ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {sum(1 for reg_date in user_registration_date.values() if isinstance(reg_date, datetime) and reg_date.date() == today)}\n\n"
    
    stats_text += "üíé –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º:\n"
    for tariff, count in tariff_stats.items():
        stats_text += f"‚Ä¢ {TARIFFS[tariff]['name']}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    
    await message.answer(stats_text, reply_markup=get_admin_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä General statistics", "üìä Estad√≠sticas generales", "üìä Allgemeine Statistiken", "üìä Statistiques g√©n√©rales", "üìä ÊÄª‰ΩìÁªüËÆ°", "üìä ÂÖ®‰ΩìÁµ±Ë®à", "üìä ÏùºÎ∞ò ÌÜµÍ≥Ñ"]))
async def handle_general_stats(message: types.Message):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    total_requests = sum(data.get("total", 0) for data in user_requests_count.values())
    today_requests = sum(data.get("count", 0) for data in user_daily_requests.values() if data.get("date") == datetime.now().date())
    
    # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    top_users = sorted(user_requests_count.items(), key=lambda x: x[1].get("total", 0), reverse=True)[:5]
    
    stats_text = f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    stats_text += f"üîÑ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
    stats_text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_requests}\n"
    stats_text += f"üíæ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {len(conversation_memory)}\n\n"
    
    stats_text += "üèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, (user_id, data) in enumerate(top_users, 1):
        try:
            user = await bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else user.first_name
            stats_text += f"{i}. {username}: {data.get('total', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        except:
            stats_text += f"{i}. ID {user_id}: {data.get('total', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    
    await message.answer(stats_text, reply_markup=get_admin_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", "üìã Action logs", "üìã Registros acciones", "üìã Aktionsprotokolle", "üìã Journaux actions", "üìã Êìç‰ΩúÊó•Âøó", "üìã „Ç¢„ÇØ„Ç∑„Éß„É≥„É≠„Ç∞", "üìã ÏûëÏóÖ Î°úÍ∑∏"]))
async def handle_action_logs(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not admin_logs:
        await message.answer("üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç—ã", reply_markup=get_admin_keyboard(message.from_user.id))
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    recent_logs = admin_logs[-10:]
    logs_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞:\n\n"
    
    for log in reversed(recent_logs):
        timestamp = datetime.fromisoformat(log["timestamp"]).strftime("%H:%M:%S")
        action = log["action"]
        target = f" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {log['target_user']})" if log.get('target_user') else ""
        logs_text += f"üïí {timestamp}: {action}{target}\n"
    
    await message.answer(logs_text, reply_markup=get_admin_keyboard(message.from_user.id))

# =======================
# ===== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò =====
# =======================
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    chat_id = message.chat.id
    
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
    if user_awaiting_language.get(chat_id):
        return
    
    initialize_user_data(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    can_request, error_msg = can_user_make_request(chat_id)
    if not can_request:
        await message.answer(error_msg, reply_markup=get_main_keyboard(chat_id))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    current_time = time.time()
    if chat_id in user_last_request:
        cooldown = get_user_cooldown(chat_id)
        time_passed = current_time - user_last_request[chat_id]
        if time_passed < cooldown:
            remaining = cooldown - time_passed
            await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.", reply_markup=get_main_keyboard(chat_id))
            return
    
    user_last_request[chat_id] = current_time
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    user_caption = message.caption or ""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_bytes = await bot.download_file(file_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = await process_image_with_instructions(file_bytes.read(), user_caption)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        user_last_photo_text[chat_id] = result
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
        await delete_thinking_message(chat_id, thinking_msg_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = create_smart_response(result, "photo_text")
        await message.answer(response, reply_markup=get_main_keyboard(chat_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        increment_user_requests(chat_id)
        
    except Exception as e:
        logger.error(f"Photo processing error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard(chat_id))

@dp.message(F.voice)
async def handle_voice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
    if user_awaiting_language.get(chat_id):
        return
    
    initialize_user_data(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    can_request, error_msg = can_user_make_request(chat_id)
    if not can_request:
        await message.answer(error_msg, reply_markup=get_main_keyboard(chat_id))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    current_time = time.time()
    if chat_id in user_last_request:
        cooldown = get_user_cooldown(chat_id)
        time_passed = current_time - user_last_request[chat_id]
        if time_passed < cooldown:
            remaining = cooldown - time_passed
            await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.", reply_markup=get_main_keyboard(chat_id))
            return
    
    user_last_request[chat_id] = current_time
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = message.voice
        file_info = await bot.get_file(voice.file_id)
        file_path = file_info.file_path
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_bytes = await bot.download_file(file_path)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        transcribed_text = await transcribe_audio_with_mistral(file_bytes.read())
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
        await delete_thinking_message(chat_id, thinking_msg_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = create_smart_response(transcribed_text, "voice")
        await message.answer(response, reply_markup=get_main_keyboard(chat_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        increment_user_requests(chat_id)
        
    except Exception as e:
        logger.error(f"Voice processing error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à–µ –∞—É–¥–∏–æ. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_main_keyboard(chat_id))

@dp.message(F.text)
async def handle_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    user_text = message.text.strip()
    
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞
    if user_awaiting_language.get(chat_id):
        if user_text not in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üá∏ English", "üá™üá∏ Espa√±ol", "üá©üá™ Deutsch", "üá´üá∑ Fran√ßais", "üá®üá≥ ‰∏≠Êñá", "üáØüáµ Êó•Êú¨Ë™û", "üá∞üá∑ ÌïúÍµ≠Ïñ¥"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=get_language_keyboard())
        return
    
    initialize_user_data(chat_id)
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    button_texts = [
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "üåü –û–±–æ –º–Ω–µ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å", "üå§Ô∏è –ü–æ–≥–æ–¥–∞", 
        "üíé –¢–∞—Ä–∏—Ñ—ã", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        "üöÄ Start work", "üåü About me", "‚öôÔ∏è Settings", "‚ùì Help", "üå§Ô∏è Weather",
        "üíé Tariffs", "üßπ Clear memory", "üõ†Ô∏è Admin panel",
        "üöÄ Iniciar trabajo", "üåü Sobre m√≠", "‚öôÔ∏è Configuraci√≥n", "‚ùì Ayuda", "üå§Ô∏è Clima",
        "üíé Tarifas", "üßπ Limpiar memoria", "üõ†Ô∏è Panel admin",
        "üöÄ Arbeit beginnen", "üåü √úber mich", "‚öôÔ∏è Einstellungen", "‚ùì Hilfe", "üå§Ô∏è Wetter",
        "üíé Tarife", "üßπ Speicher l√∂schen", "üõ†Ô∏è Admin-Panel",
        "üöÄ Commencer", "üåü √Ä propos", "‚öôÔ∏è Param√®tres", "‚ùì Aide", "üå§Ô∏è M√©t√©o",
        "üíé Tarifs", "üßπ Effacer m√©moire", "üõ†Ô∏è Panel admin",
        "üöÄ ÂºÄÂßãÂ∑•‰Ωú", "üåü ÂÖ≥‰∫éÊàë", "‚öôÔ∏è ËÆæÁΩÆ", "‚ùì Â∏ÆÂä©", "üå§Ô∏è Â§©Ê∞î",
        "üíé ËµÑË¥π", "üßπ Ê∏ÖÈô§ËÆ∞ÂøÜ", "üõ†Ô∏è ÁÆ°ÁêÜÈù¢Êùø",
        "üöÄ ‰ªï‰∫ã„ÇíÂßã„ÇÅ„Çã", "üåü ÁßÅ„Å´„Å§„ÅÑ„Å¶", "‚öôÔ∏è Ë®≠ÂÆö", "‚ùì „Éò„É´„Éó", "üå§Ô∏è Â§©Ê∞ó",
        "üíé ÊñôÈáë", "üßπ „É°„É¢„É™„Çí„ÇØ„É™„Ç¢", "üõ†Ô∏è ÁÆ°ÁêÜ„Éë„Éç„É´",
        "üöÄ ÏûëÏóÖ ÏãúÏûë", "üåü ÎÇ¥ Ï†ïÎ≥¥", "‚öôÔ∏è ÏÑ§Ï†ï", "‚ùì ÎèÑÏõÄÎßê", "üå§Ô∏è ÎÇ†Ïî®",
        "üíé ÏöîÍ∏àÏ†ú", "üßπ Î©îÎ™®Î¶¨ ÏßÄÏö∞Í∏∞", "üõ†Ô∏è Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê",
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        "üé≠ –†–µ–∂–∏–º—ã AI", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "üé≠ AI Modes", "üìä Statistics", "üé® Communication style", "‚ÑπÔ∏è Information", "‚ö° Quick commands", "üåê Change language", "‚¨ÖÔ∏è Back",
        "üé≠ Modos AI", "üìä Estad√≠sticas", "üé® Estilo comunicaci√≥n", "‚ÑπÔ∏è Informaci√≥n", "‚ö° Comandos r√°pidos", "üåê Cambiar idioma", "‚¨ÖÔ∏è Atr√°s",
        "üé≠ KI-Modi", "üìä Statistiken", "üé® Kommunikationsstil", "‚ÑπÔ∏è Information", "‚ö° Schnellbefehle", "üåê Sprache √§ndern", "‚¨ÖÔ∏è Zur√ºck",
        "üé≠ Modes IA", "üìä Statistiques", "üé® Style communication", "‚ÑπÔ∏è Information", "‚ö° Commandes rapides", "üåê Changer langue", "‚¨ÖÔ∏è Retour",
        "üé≠ AIÊ®°Âºè", "üìä ÁªüËÆ°", "üé® ‰∫§ÊµÅÈ£éÊ†º", "‚ÑπÔ∏è ‰ø°ÊÅØ", "‚ö° Âø´ÈÄüÂëΩ‰ª§", "üåê Êõ¥ÊîπËØ≠Ë®Ä", "‚¨ÖÔ∏è ËøîÂõû",
        "üé≠ AI„É¢„Éº„Éâ", "üìä Áµ±Ë®à", "üé® „Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„Çπ„Çø„Ç§„É´", "‚ÑπÔ∏è ÊÉÖÂ†±", "‚ö° „ÇØ„Ç§„ÉÉ„ÇØ„Ç≥„Éû„É≥„Éâ", "üåê Ë®ÄË™ûÂ§âÊõ¥", "‚¨ÖÔ∏è Êàª„Çã",
        "üé≠ AI Î™®Îìú", "üìä ÌÜµÍ≥Ñ", "üé® Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ïä§ÌÉÄÏùº", "‚ÑπÔ∏è Ï†ïÎ≥¥", "‚ö° Îπ†Î•∏ Î™ÖÎ†π", "üåê Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω", "‚¨ÖÔ∏è Îí§Î°ú",
        # –†–µ–∂–∏–º—ã AI
        "üßò –°–ø–æ–∫–æ–π–Ω—ã–π", "üí¨ –û–±—ã—á–Ω—ã–π", "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π", "üß† –£–º–Ω—ã–π", "üìö –ü–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏",
        "üßò Calm", "üí¨ Normal", "‚ö° Short", "üß† Smart", "üìö Homework help",
        "üßò Calmado", "üí¨ Normal", "‚ö° Corto", "üß† Inteligente", "üìö Ayuda tareas",
        "üßò Ruhig", "üí¨ Normal", "‚ö° Kurz", "üß† Intelligent", "üìö Hausaufgabenhilfe",
        "üßò Calme", "üí¨ Normal", "‚ö° Court", "üß† Intelligent", "üìö Aide devoirs",
        "üßò Âπ≥Èùô", "üí¨ ÊôÆÈÄö", "‚ö° ÁÆÄÁü≠", "üß† Êô∫ËÉΩ", "üìö ‰Ωú‰∏öÂ∏ÆÂä©",
        "üßò ÂÜ∑Èùô", "üí¨ ÈÄöÂ∏∏", "‚ö° Áü≠„ÅÑ", "üß† „Çπ„Éû„Éº„Éà", "üìö ÂÆøÈ°å„Éò„É´„Éó",
        "üßò Ï∞®Î∂ÑÌïú", "üí¨ ÏùºÎ∞ò", "‚ö° ÏßßÏùÄ", "üß† Ïä§ÎßàÌä∏", "üìö ÏàôÏ†ú ÎèÑÏõÄ",
        # –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è
        "üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "üéØ –î–µ–ª–æ–≤–æ–π", "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π",
        "üí´ Friendly", "‚öñÔ∏è Balanced", "üéØ Business", "üé® Creative",
        "üí´ Amigable", "‚öñÔ∏è Equilibrado", "üéØ Empresarial", "üé® Creativo",
        "üí´ Freundlich", "‚öñÔ∏è Ausgeglichen", "üéØ Gesch√§ftlich", "üé® Kreativ",
        "üí´ Amical", "‚öñÔ∏è √âquilibr√©", "üéØ Professionnel", "üé® Cr√©atif",
        "üí´ ÂèãÂ•Ω", "‚öñÔ∏è Âπ≥Ë°°", "üéØ ÂïÜÂä°", "üé® ÂàõÊÑè",
        "üí´ ÂèãÂ•ΩÁöÑ", "‚öñÔ∏è „Éê„É©„É≥„Çπ", "üéØ „Éì„Ç∏„Éç„Çπ", "üé® „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ",
        "üí´ ÏπúÍ∑ºÌïú", "‚öñÔ∏è Í∑†Ìòï Ïû°Ìûå", "üéØ ÎπÑÏ¶àÎãàÏä§", "üé® Ï∞ΩÏùòÏ†ÅÏù∏",
        # –¢–∞—Ä–∏—Ñ—ã
        "üöÄ Default", "‚≠ê Pro", "üíé Advanced", "üëë Ultimate", "üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ",
        "üìä My tariff", "üìä Mi tarifa", "üìä Mein Tarif", "üìä Mon tarif", "üìä ÊàëÁöÑËµÑË¥π", "üìä ÁßÅ„ÅÆÊñôÈáë", "üìä ÎÇ¥ ÏöîÍ∏àÏ†ú",
        # –ü–æ–≥–æ–¥–∞
        "üåÜ –ú–æ—Å–∫–≤–∞", "üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "üóΩ –ù—å—é-–ô–æ—Ä–∫", "üåâ –õ–æ–Ω–¥–æ–Ω", "üóº –ü–∞—Ä–∏–∂", "üèØ –¢–æ–∫–∏–æ", "üåÉ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
        "üåÉ Other city", "üåÉ Otra ciudad", "üåÉ Andere Stadt", "üåÉ Autre ville", "üåÉ ÂÖ∂‰ªñÂüéÂ∏Ç", "üåÉ ‰ªñ„ÅÆÈÉΩÂ∏Ç", "üåÉ Îã§Î•∏ ÎèÑÏãú",
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", "üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä", "üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞", "‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", "üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üéÅ –°—é—Ä–ø—Ä–∏–∑",
        "üìù Currency converter", "üéØ Random choice", "üìÖ Current date", "‚è∞ Current time", "üî¢ Calculator", "üéÅ Surprise",
        "üìù Conversor moneda", "üéØ Elecci√≥n aleatoria", "üìÖ Fecha actual", "‚è∞ Hora actual", "üî¢ Calculadora", "üéÅ Sorpresa",
        "üìù W√§hrungsrechner", "üéØ Zuf√§llige Wahl", "üìÖ Aktuelles Datum", "‚è∞ Aktuelle Zeit", "üî¢ Rechner", "üéÅ √úberraschung",
        "üìù Convertisseur devise", "üéØ Choix al√©atoire", "üìÖ Date actuelle", "‚è∞ Heure actuelle", "üî¢ Calculatrice", "üéÅ Surprise",
        "üìù Ë¥ßÂ∏ÅËΩ¨Êç¢Âô®", "üéØ ÈöèÊú∫ÈÄâÊã©", "üìÖ ÂΩìÂâçÊó•Êúü", "‚è∞ ÂΩìÂâçÊó∂Èó¥", "üî¢ ËÆ°ÁÆóÂô®", "üéÅ ÊÉäÂñú",
        "üìù ÈÄöË≤®„Ç≥„É≥„Éê„Éº„Çø„Éº", "üéØ „É©„É≥„ÉÄ„É†ÈÅ∏Êäû", "üìÖ ÁèæÂú®„ÅÆÊó•‰ªò", "‚è∞ ÁèæÂú®ÊôÇÂàª", "üî¢ Ë®àÁÆóÊ©ü", "üéÅ „Çµ„Éó„É©„Ç§„Ç∫",
        "üìù ÌÜµÌôî Î≥ÄÌôòÍ∏∞", "üéØ Î¨¥ÏûëÏúÑ ÏÑ†ÌÉù", "üìÖ ÌòÑÏû¨ ÎÇ†Ïßú", "‚è∞ ÌòÑÏû¨ ÏãúÍ∞Ñ", "üî¢ Í≥ÑÏÇ∞Í∏∞", "üéÅ ÏÑúÌîÑÎùºÏù¥Ï¶à",
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "üë• User statistics", "üìä General statistics", "üìã Action logs", "‚¨ÖÔ∏è Main menu",
        "üë• Estad√≠sticas usuarios", "üìä Estad√≠sticas generales", "üìã Registros acciones", "‚¨ÖÔ∏è Men√∫ principal",
        "üë• Benutzerstatistiken", "üìä Allgemeine Statistiken", "üìã Aktionsprotokolle", "‚¨ÖÔ∏è Hauptmen√º",
        "üë• Statistiques utilisateurs", "üìä Statistiques g√©n√©rales", "üìã Journaux actions", "‚¨ÖÔ∏è Menu principal",
        "üë• Áî®Êà∑ÁªüËÆ°", "üìä ÊÄª‰ΩìÁªüËÆ°", "üìã Êìç‰ΩúÊó•Âøó", "‚¨ÖÔ∏è ‰∏ªËèúÂçï",
        "üë• „É¶„Éº„Ç∂„ÉºÁµ±Ë®à", "üìä ÂÖ®‰ΩìÁµ±Ë®à", "üìã „Ç¢„ÇØ„Ç∑„Éß„É≥„É≠„Ç∞", "‚¨ÖÔ∏è „É°„Ç§„É≥„É°„Éã„É•„Éº",
        "üë• ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ", "üìä ÏùºÎ∞ò ÌÜµÍ≥Ñ", "üìã ÏûëÏóÖ Î°úÍ∑∏", "‚¨ÖÔ∏è Î©îÏù∏ Î©îÎâ¥",
        # –Ø–∑—ã–∫–∏
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üá∏ English", "üá™üá∏ Espa√±ol", "üá©üá™ Deutsch", "üá´üá∑ Fran√ßais", "üá®üá≥ ‰∏≠Êñá", "üáØüáµ Êó•Êú¨Ë™û", "üá∞üá∑ ÌïúÍµ≠Ïñ¥"
    ]
    
    if user_text in button_texts:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
    
    if current_mode == "homework":
        can_request, error_msg = can_user_make_homework_request(chat_id)
    else:
        can_request, error_msg = can_user_make_request(chat_id)
    
    if not can_request:
        await message.answer(error_msg, reply_markup=get_main_keyboard(chat_id))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    current_time = time.time()
    if chat_id in user_last_request:
        cooldown = get_user_cooldown(chat_id)
        time_passed = current_time - user_last_request[chat_id]
        if time_passed < cooldown:
            remaining = cooldown - time_passed
            await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.", reply_markup=get_main_keyboard(chat_id))
            return
    
    user_last_request[chat_id] = current_time
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    user_text_lower = user_text.lower()
    
    # –ü–æ–≥–æ–¥–∞ - —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    if any(word in user_text_lower for word in ["–ø–æ–≥–æ–¥–∞", "weather", "clima", "wetter", "m√©t√©o", "Â§©Ê∞î", "Â§©Ê∞ó", "ÎÇ†Ïî®"]) or any(city in user_text_lower for city in CITY_MAPPING.keys()):
        city = user_text_lower
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        for key in ["–ø–æ–≥–æ–¥–∞", "weather", "clima", "wetter", "m√©t√©o", "Â§©Ê∞î", "Â§©Ê∞ó", "ÎÇ†Ïî®", "–≤", "–≤ –≥–æ—Ä–æ–¥–µ", "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤", "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞", "in", "city", "stadt", "ville", "ÂüéÂ∏Ç", "ÈÉΩÂ∏Ç", "ÎèÑÏãú"]:
            city = city.replace(key, "").strip()
        
        # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        city = city.replace("?", "").replace("!", "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –≥–æ—Ä–æ–¥–æ–≤
        if city in CITY_MAPPING:
            city = CITY_MAPPING[city]
        
        if city:
            thinking_msg_id = await send_thinking_message(chat_id)
            weather_info = await get_detailed_weather(city)
            await delete_thinking_message(chat_id, thinking_msg_id)
            await message.answer(weather_info, reply_markup=get_main_keyboard(chat_id))
            increment_user_requests(chat_id)
            return
    
    # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ
    if any(word in user_text_lower for word in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–æ–¥", "translate", "traducir", "√ºbersetzen", "traduire", "ÁøªËØë", "ÁøªË®≥", "Î≤àÏó≠"]) and chat_id in user_last_photo_text:
        target_language = "—Ä—É—Å—Å–∫–∏–π"
        if "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in user_text_lower or "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º" in user_text_lower or "to english" in user_text_lower:
            target_language = "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
        elif "–Ω–∞ —Ä—É—Å—Å–∫–∏–π" in user_text_lower or "–Ω–∞ —Ä—É—Å—Å–∫–æ–º" in user_text_lower or "to russian" in user_text_lower:
            target_language = "—Ä—É—Å—Å–∫–∏–π"
        elif "–Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π" in user_text_lower or "al espa√±ol" in user_text_lower:
            target_language = "–∏—Å–ø–∞–Ω—Å–∫–∏–π"
        elif "–Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" in user_text_lower or "au fran√ßais" in user_text_lower:
            target_language = "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"
        elif "–Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π" in user_text_lower or "auf deutsch" in user_text_lower:
            target_language = "–Ω–µ–º–µ—Ü–∫–∏–π"
        elif "–Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π" in user_text_lower:
            target_language = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
        elif "–Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–π" in user_text_lower or "Âà∞‰∏≠Êñá" in user_text_lower:
            target_language = "–∫–∏—Ç–∞–π—Å–∫–∏–π"
        elif "–Ω–∞ —è–ø–æ–Ω—Å–∫–∏–π" in user_text_lower or "Âà∞Êó•ËØ≠" in user_text_lower:
            target_language = "—è–ø–æ–Ω—Å–∫–∏–π"
        elif "–Ω–∞ –∫–æ—Ä–µ–π—Å–∫–∏–π" in user_text_lower or "Âà∞Èü©ËØ≠" in user_text_lower:
            target_language = "–∫–æ—Ä–µ–π—Å–∫–∏–π"
        
        thinking_msg_id = await send_thinking_message(chat_id)
        try:
            translated_text = await translate_text(user_last_photo_text[chat_id], target_language)
            await delete_thinking_message(chat_id, thinking_msg_id)
            await message.answer(create_smart_response(translated_text, "translation"), reply_markup=get_main_keyboard(chat_id))
            increment_user_requests(chat_id)
            return
        except Exception as e:
            await delete_thinking_message(chat_id, thinking_msg_id)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.", reply_markup=get_main_keyboard(chat_id))
            return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ —Ñ–æ—Ç–æ (—Ä–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º, —Å–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ –∏ —Ç.–¥.)
    if chat_id in user_last_photo_text and user_last_photo_text[chat_id]:
        if any(word in user_text_lower for word in ["—Ä–∞—Å—Å–∫–∞–∂–∏", "–æ–±—ä—è—Å–Ω–∏", "—á—Ç–æ —ç—Ç–æ", "–ø—Ä–æ —á—Ç–æ", "–æ–ø–∏—à–∏", "tell", "explain", "describe", "contar", "explicar", "ÊèèËø∞", "Ë™¨Êòé", "ÏÑ§Î™Ö"]):
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–æ—Ç–æ
            thinking_msg_id = await send_thinking_message(chat_id)
            try:
                analysis_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —á–µ–º –æ–Ω: {user_last_photo_text[chat_id]}"
                analysis_result = await get_ai_response(analysis_prompt, chat_id, current_mode)
                await delete_thinking_message(chat_id, thinking_msg_id)
                await message.answer(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:\n\n{analysis_result}", reply_markup=get_main_keyboard(chat_id))
                increment_user_requests(chat_id)
                return
            except Exception as e:
                await delete_thinking_message(chat_id, thinking_msg_id)
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.", reply_markup=get_main_keyboard(chat_id))
                return
        
        elif any(word in user_text_lower for word in ["–∫–æ—Ä–æ—á–µ", "—Å–æ–∫—Ä–∞—Ç–∏", "—Å—É—Ç—å", "–æ—Å–Ω–æ–≤–Ω–æ–µ", "shorter", "summarize", "shorter", "resumir", "kurz", "court", "Áº©Áü≠", "Ë¶ÅÁ¥Ñ", "ÏöîÏïΩ"]):
            # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            thinking_msg_id = await send_thinking_message(chat_id)
            try:
                shorten_prompt = f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å: {user_last_photo_text[chat_id]}"
                shortened_result = await get_ai_response(shorten_prompt, chat_id, current_mode)
                await delete_thinking_message(chat_id, thinking_msg_id)
                await message.answer(f"‚úÇÔ∏è –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{shortened_result}", reply_markup=get_main_keyboard(chat_id))
                increment_user_requests(chat_id)
                return
            except Exception as e:
                await delete_thinking_message(chat_id, thinking_msg_id)
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.", reply_markup=get_main_keyboard(chat_id))
                return
    
    # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    if any(word in user_text_lower for word in ["–ø–æ—Å—á–∏—Ç–∞–π", "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "–≤—ã—á–∏—Å–ª–∏", "calc", "calculate", "calcular", "berechnen", "calculer", "ËÆ°ÁÆó", "Ë®àÁÆó", "Í≥ÑÏÇ∞"]):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            expr = user_text_lower
            for word in ["–ø–æ—Å—á–∏—Ç–∞–π", "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "–≤—ã—á–∏—Å–ª–∏", "calc", "calculate", "calcular", "berechnen", "calculer", "ËÆ°ÁÆó", "Ë®àÁÆó", "Í≥ÑÏÇ∞"]:
                expr = expr.replace(word, "")
            expr = expr.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            allowed_chars = set('0123456789+-*/.() ')
            if all(c in allowed_chars for c in expr):
                result = eval(expr)
                await message.answer(f"üî¢ {expr} = {result}", reply_markup=get_main_keyboard(chat_id))
                increment_user_requests(chat_id)
                return
            else:
                await message.answer("‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=get_main_keyboard(chat_id))
                return
        except:
            await message.answer("‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=get_main_keyboard(chat_id))
            return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
    thinking_msg_id = await send_thinking_message(chat_id)
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        question_type = "normal"
        if current_mode == "homework":
            question_type = "homework"
            increment_homework_requests(chat_id)
        else:
            increment_user_requests(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await get_ai_response(user_text, chat_id, current_mode)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
        await delete_thinking_message(chat_id, thinking_msg_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ **–ö–æ—Ä–æ—Ç–∫–æ:** –∏ —Ç.–¥.)
        cleaned_response = ai_response
        if "**–ö–æ—Ä–æ—Ç–∫–æ:**" in cleaned_response:
            # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ö–æ—Ä–æ—Ç–∫–æ:"
            cleaned_response = cleaned_response.replace("**–ö–æ—Ä–æ—Ç–∫–æ:**", "").strip()
        if "**–ü–æ –ø–æ–≥–æ–¥–µ:**" in cleaned_response:
            cleaned_response = cleaned_response.replace("**–ü–æ –ø–æ–≥–æ–¥–µ:**", "").strip()
        if "*–ß—Ç–æ –µ—â—ë?*" in cleaned_response:
            cleaned_response = cleaned_response.replace("*–ß—Ç–æ –µ—â—ë?*", "").strip()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        final_response = create_smart_response(cleaned_response, question_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(final_response, reply_markup=get_main_keyboard(chat_id))
        
    except Exception as e:
        logger.error(f"Text processing error: {e}")
        await delete_thinking_message(chat_id, thinking_msg_id)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard(chat_id))

# =======================
# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
# =======================
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    for filename in DATA_FILES.values():
        if not os.path.exists(filename):
            save_data({}, filename)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
