import asyncio
import logging
import random
import aiohttp
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
from typing import Dict, Any
import os
from mistralai import Mistral

# =======================
# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
# =======================
mistral_api_key = os.getenv('MISTRAL_API_KEY', 'nIMvGkfioIpMtQeSO2n8ssm6nuJRyo7Q')
openweather_api_key = os.getenv('OPENWEATHER_API_KEY', 'dbd08a834f628d369a8edb55b210171e')
TOKEN = os.getenv('BOT_TOKEN', '8229856813:AAEkQq-4zdJKAmovgq69URcqKDzN4_BMqrw')

ADMIN_ID = 6584350034

# –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
USER_LIMITS = {
    "—Å–ø–æ–∫–æ–π–Ω—ã–π": 15,
    "–æ–±—ã—á–Ω—ã–π": 10, 
    "–∫–æ—Ä–æ—Ç–∫–∏–π": 13,
    "—É–º–Ω—ã–π": 3
}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
REQUEST_COOLDOWN = 10

model = "mistral-large-latest"
client = Mistral(api_key=mistral_api_key)

chat_style: Dict[int, str] = {}
chat_memory: Dict[int, Dict[str, Any]] = {}
user_requests_count: Dict[int, Dict[str, int]] = {}
user_last_messages: Dict[int, str] = {}
user_modes: Dict[int, str] = {}
user_last_request: Dict[int, float] = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =======================
# ===== –≠–ú–û–î–ó–ò ==========
# =======================
emojis = {
    "friendly": ["üí´", "‚ú®", "üåü", "üéà", "ü§ó", "üíù", "üéä", "üíå"],
    "serious": ["üéØ", "üìä", "üíº", "üîç", "üìà", "üéì", "üí°", "‚öñÔ∏è"],
    "balanced": ["üíé", "üé®", "üîÆ", "üí≠", "üåà", "ü¶ã", "üå∏", "üå†"],
    "creative": ["üé≠", "üñåÔ∏è", "üé™", "üé∏", "üì∏", "üé¨", "üéÆ", "üß©"]
}

def get_emoji(style: str = "balanced") -> str:
    return random.choice(emojis.get(style, emojis["balanced"]))

# =======================
# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
# =======================
def get_main_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    buttons = [[
        KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        KeyboardButton(text="üåü –û–±–æ –º–Ω–µ")
    ],
               [
                   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                   KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
                   KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞")
               ],
               [
                   KeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ"),
                   KeyboardButton(text="üí° –ò–¥–µ—è –¥–Ω—è")
               ]]
    if chat_id == ADMIN_ID:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons,
                               resize_keyboard=True,
                               input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")

def get_settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üé≠ –†–µ–∂–∏–º—ã AI"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ], [
        KeyboardButton(text="üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"),
        KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    ], [
        KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
        KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_mode_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15)"),
            KeyboardButton(text="üí¨ –û–±—ã—á–Ω—ã–π (10)")
        ],
                  [
                      KeyboardButton(text="‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13)"),
                      KeyboardButton(text="üß† –£–º–Ω—ã–π (3)")
                  ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True)

def get_style_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"),
        KeyboardButton(text="‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
    ], [
        KeyboardButton(text="üéØ –î–µ–ª–æ–≤–æ–π"),
        KeyboardButton(text="üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_weather_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üèôÔ∏è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"),
        KeyboardButton(text="üèõÔ∏è –ú–æ—Å–∫–≤–∞")
    ], [
        KeyboardButton(text="üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
        KeyboardButton(text="üìç –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_quick_commands_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"),
        KeyboardButton(text="üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä")
    ], [
        KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞"),
        KeyboardButton(text="‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
    ], [
        KeyboardButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
        KeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤")
    ], [
        KeyboardButton(text="üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI"),
        KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    ], [
        KeyboardButton(text="‚ö° –°–∏—Å—Ç–µ–º–∞"),
        KeyboardButton(text="üìä –õ–æ–≥–∏")
    ], [
        KeyboardButton(text="üéØ –¢–µ—Å—Ç AI"),
        KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                               resize_keyboard=True)

def get_ai_management_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏"),
        KeyboardButton(text="üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã AI")
    ], [
        KeyboardButton(text="üìù –ü—Ä–æ–º–ø—Ç—ã"),
        KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
    ], [
        KeyboardButton(text="üé≠ –¢–µ—Å—Ç —Ä–µ–∂–∏–º–æ–≤"),
        KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]],
                               resize_keyboard=True)

# =======================
# ===== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ =====
# =======================
SPECIAL_RESPONSES = {
    "–∫—Ç–æ —Ç—ã": [
        "‚ú® –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á",
        "üåü –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö",
        "üí´ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –≥–ª—É–±–æ–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö"
    ],
    "–ø—Ä–∏–≤–µ—Ç": [
        "üíñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ",
        "üå∏ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ì–æ—Ç–æ–≤–∞ –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –¥–∏–∞–ª–æ–≥—É –∏ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º",
        "üéà –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –±–µ—Å–µ–¥—ã"
    ],
    "–∫–∞–∫ –¥–µ–ª–∞": [
        "üíù –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ! –ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∑–∞–¥–∞—á–∞–º",
        "üåà –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –≠–Ω–µ—Ä–≥–∏—è –±—å—ë—Ç –∫–ª—é—á–æ–º, –∂–¥—É —Ç–≤–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
        "üéØ –û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑"
    ],
    "—Å–ø–∞—Å–∏–±–æ": [
        "üíå –í—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å! –¢–≤–æ—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—à–µ–Ω–∏—è",
        "üåü –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞! –≠—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ",
        "‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –°—Ç—Ä–µ–º–ª—é—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ–π"
    ],
    "–ø–æ–∫–∞": [
        "ü¶ã –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! –ë—É–¥—É —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–∞—Ç—å –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞",
        "üåÖ –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω inspiration",
        "üéê –ü–æ–∫–∞! –ü–æ–º–Ω–∏, —á—Ç–æ –∑–Ω–∞–Ω–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ"
    ],
    "—à—É—Ç–∫–∞": [
        "üé≠ –ü–æ—á–µ–º—É –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ—à–ª–∞ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —É–º–µ–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–∞ –Ω–µ—ë –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è!",
        "ü§ñ –ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω AI –¥—Ä—É–≥–æ–º—É? '–î–∞–≤–∞–π –æ—Å—Ç–∞–Ω–µ–º—Å—è –¥—Ä—É–∑—å—è–º–∏ ‚Äî —É –Ω–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è —Ö–∏–º–∏—è... –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã!'",
        "üí° –ü–æ—á–µ–º—É –±–æ—Ç –≤—Å–µ–≥–¥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ —à–∞—Ö–º–∞—Ç—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –¥—É–º–∞–µ—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤ –≤–ø–µ—Ä—ë–¥... –∏ –∑–Ω–∞–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞!"
    ]
}

def get_mode_description(mode: str) -> str:
    descriptions = {
        "—Å–ø–æ–∫–æ–π–Ω—ã–π": "üßò –°–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º (15 –∑–∞–ø—Ä–æ—Å–æ–≤)",
        "–æ–±—ã—á–Ω—ã–π": "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (10 –∑–∞–ø—Ä–æ—Å–æ–≤)", 
        "–∫–æ—Ä–æ—Ç–∫–∏–π": "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∂–∏–º (13 –∑–∞–ø—Ä–æ—Å–æ–≤)",
        "—É–º–Ω—ã–π": "üß† –£–º–Ω—ã–π —Ä–µ–∂–∏–º (3 –∑–∞–ø—Ä–æ—Å–∞)"
    }
    return descriptions.get(mode, "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")

def get_user_remaining_requests(chat_id: int, mode: str) -> int:
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    if mode not in user_requests_count[chat_id]:
        user_requests_count[chat_id][mode] = 0
    return USER_LIMITS[mode] - user_requests_count[chat_id][mode]

# =======================
# ===== –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê =====
# =======================
def shorten_text(text: str, max_sentences: int = 3, max_length: int = 800) -> str:
    """–°–æ–∫—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –¥–ª–∏–Ω—ã"""
    sentences = text.split('. ')
    if len(sentences) > max_sentences:
        text = '. '.join(sentences[:max_sentences]) + '.'
    
    if len(text) > max_length:
        text = text[:max_length] + '...'
    
    return text

def process_ai_response(text: str, mode: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç AI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
    if mode == "–∫–æ—Ä–æ—Ç–∫–∏–π":
        return shorten_text(text, max_sentences=2, max_length=400)
    elif mode == "—Å–ø–æ–∫–æ–π–Ω—ã–π":
        return shorten_text(text, max_sentences=4, max_length=600)
    elif mode == "–æ–±—ã—á–Ω—ã–π":
        return shorten_text(text, max_sentences=5, max_length=800)
    elif mode == "—É–º–Ω—ã–π":
        return shorten_text(text, max_sentences=6, max_length=1000)
    else:
        return shorten_text(text, max_sentences=4, max_length=600)

def format_ai_response(text: str, style: str, mode: str) -> str:
    emoji = get_emoji(style)
    formatted = process_ai_response(text, mode)

    if mode == "—Å–ø–æ–∫–æ–π–Ω—ã–π":
        calm_emojis = ["üåø", "üçÉ", "üåº", "üå∏", "üíÆ", "ü™∑"]
        if random.random() > 0.7:
            formatted = f"{random.choice(calm_emojis)} {formatted}"

    return f"{emoji} {formatted}"

async def send_long_message(message: types.Message, text: str, style: str = "balanced", mode: str = "–æ–±—ã—á–Ω—ã–π", chunk_size: int = 4000):
    formatted = format_ai_response(text, style, mode)
    for i in range(0, len(formatted), chunk_size):
        try:
            await message.answer(formatted[i:i + chunk_size])
        except TelegramBadRequest:
            await message.answer(text[i:i + chunk_size])

# =======================
# ===== –ü–û–ì–û–î–ê =====
# =======================
async def get_weather(city: str) -> str:
    city_clean = city.strip()
    if not city_clean:
        return "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"

    city_mapping = {
        "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
        "–º–æ—Å–∫–≤–∞": "Moscow", 
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
        "—Å–ø–±": "Saint Petersburg",
        "–ø–∏—Ç–µ—Ä": "Saint Petersburg"
    }

    api_city = city_mapping.get(city_clean.lower(), city_clean)

    url = f"http://api.openweathermap.org/data/2.5/weather?q={api_city}&appid={openweather_api_key}&units=metric&lang=ru"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return f"üå´Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city_clean}'\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"
                data = await resp.json()
                temp = data["main"]["temp"]
                feels = data["main"]["feels_like"]
                desc = data["weather"][0]["description"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                return (f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city_clean.title()}\n\n"
                        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels}¬∞C\n"
                        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return f"üå™Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city_clean}'"

# =======================
# ===== –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ =====
# =======================
async def get_currency_rate() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('https://api.exchangerate-api.com/v4/latest/USD') as resp:
                if resp.status == 200:
                    data = await resp.json()
                    usd_rub = data['rates']['RUB']
                    eur_rub = usd_rub / data['rates']['EUR']
                    return (f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç:\n\n"
                           f"‚Ä¢ üá∫üá∏ USD ‚Üí RUB: {usd_rub:.2f} ‚ÇΩ\n"
                           f"‚Ä¢ üá™üá∫ EUR ‚Üí RUB: {eur_rub:.2f} ‚ÇΩ\n"
                           f"‚Ä¢ üá∑üá∫ RUB ‚Üí USD: {1/usd_rub:.4f} $")
    except:
        return "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

def get_random_choice(options: str) -> str:
    """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    if not options:
        return "üéØ –ù–∞–ø–∏—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
    
    items = [item.strip() for item in options.split(',')]
    if len(items) < 2:
        return "üéØ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    
    chosen = random.choice(items)
    return f"üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä: *{chosen}*"

def get_current_datetime() -> str:
    """–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"""
    from datetime import datetime
    now = datetime.now()
    return (f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:\n\n"
           f"‚Ä¢ –î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}\n"
           f"‚Ä¢ –í—Ä–µ–º—è: {now.strftime('%H:%M:%S')}\n"
           f"‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å'][now.weekday()]}")

def calculate_expression(expr: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        expr = expr.replace(' ', '').replace('^', '**')
        allowed_chars = set('0123456789+-*/.() ')
        if not all(c in allowed_chars for c in expr):
            return "üî¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ + - * / . ( )"
        
        result = eval(expr)
        return f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}"
    except:
        return "üî¢ –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏"

def get_random_surprise() -> str:
    """–°–ª—É—á–∞–π–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑"""
    surprises = [
        "üéÅ –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –¥–µ–Ω—å!",
        "üí´ –í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è —Ç–µ–±—è –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑",
        "üåü –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ",
        "üéØ –°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π",
        "üíù –ü–æ–º–Ω–∏: —Ç—ã —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –æ—Å–æ–±–µ–Ω–Ω—ã–π",
        "üåà –ó–∞ –∫–∞–∂–¥–æ–π —Ç—É—á–µ–π —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ä–∞–¥—É–≥–∞",
        "ü¶ã –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—ã–ª—å—è –∏ –ª–µ—Ç–µ—Ç—å"
    ]
    return random.choice(surprises)

# =======================
# ===== –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –û–ñ–ò–î–ê–ù–ò–Ø =====
# =======================
def check_cooldown(chat_id: int) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    current_time = time.time()
    last_request = user_last_request.get(chat_id, 0)
    
    if current_time - last_request < REQUEST_COOLDOWN:
        remaining = REQUEST_COOLDOWN - int(current_time - last_request)
        return f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
    
    user_last_request[chat_id] = current_time
    return None

# =======================
# ===== –ö–û–ú–ê–ù–î–´ =========
# =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    chat_style[chat_id] = "balanced"
    user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"

    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    for mode in USER_LIMITS.keys():
        if mode not in user_requests_count[chat_id]:
            user_requests_count[chat_id][mode] = 0

    current_mode = user_modes[chat_id]
    remaining = get_user_remaining_requests(chat_id, current_mode)

    welcome_text = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n\n"
        f"–†–µ–∂–∏–º: {get_mode_description(current_mode)}\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n\n"
        "‚è≥ *–í–Ω–∏–º–∞–Ω–∏–µ:* –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∂–¥–∞—Ç—å 10 —Å–µ–∫—É–Ω–¥\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ üëá")

    await message.answer(welcome_text,
                         reply_markup=get_main_keyboard(chat_id))

@dp.message(F.text.in_(["üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "üöÄ –°—Ç–∞—Ä—Ç"]))
async def handle_start_button(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return
    await cmd_start(message)

@dp.message(F.text == "üåü –û–±–æ –º–Ω–µ")
async def handle_about(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    about_text = (
        "ü§ñ –ú–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç\n\n"
        "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ú–Ω–æ–≥–æ—Ä–µ–∂–∏–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É—Ç–∏–ª–∏—Ç—ã\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
        "‚Ä¢ –°–ø–æ–∫–æ–π–Ω—ã–π ‚Äî 15 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –û–±—ã—á–Ω—ã–π ‚Äî 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π ‚Äî 13 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –£–º–Ω—ã–π ‚Äî 3 –∑–∞–ø—Ä–æ—Å–∞\n\n"
        "‚è≥ –ú–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
    
    await message.answer(about_text,
                         reply_markup=get_main_keyboard(message.chat.id))

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    settings_text = (
        "‚öôÔ∏è –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π –∞—Å–ø–µ–∫—Ç—ã –Ω–∞—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n\n"
        "‚Ä¢ –†–µ–∂–∏–º—ã AI ‚Äî –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è ‚Äî –Ω–∞—Å—Ç—Ä–æ–π —Ç–æ–Ω –¥–∏–∞–ª–æ–≥–∞\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî —É–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –Ω–∞—Å—Ç—Ä–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
    
    await message.answer(settings_text,
                         reply_markup=get_settings_keyboard())

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
    remaining = get_user_remaining_requests(chat_id, current_mode)
    
    help_text = (
        "üí´ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ª—É—á—É —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "–†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:\n"
        "‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç ‚Äî —Å–¥–µ–ª–∞—é –ª–∞–∫–æ–Ω–∏—á–Ω–µ–µ\n"
        "‚Ä¢ –£–ª—É—á—à–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã\n"
        "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π ‚Äî –¥–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
        f"–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:\n"
        f"–†–µ–∂–∏–º: {current_mode}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n\n"
        "‚è≥ –ú–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
    
    await message.answer(help_text,
                         reply_markup=get_main_keyboard(chat_id))

@dp.message(F.text == "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã")
async def handle_quick_commands(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    quick_text = (
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ AI:\n\n"
        "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã\n"
        "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä ‚Äî –∏–∑ —Ç–≤–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "‚Ä¢ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –°—é—Ä–ø—Ä–∏–∑ ‚Äî —Å–ª—É—á–∞–π–Ω–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É üëá")
    
    await message.answer(quick_text,
                         reply_markup=get_quick_commands_keyboard())

@dp.message(F.text == "üìù –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç")
async def handle_currency(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    currency = await get_currency_rate()
    await message.answer(currency)

@dp.message(F.text == "üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä")
async def handle_random_choice(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    await message.answer("üéØ –ù–∞–ø–∏—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ, –∞–ø–µ–ª—å—Å–∏–Ω, –±–∞–Ω–∞–Ω")

@dp.message(F.text == "üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞")
async def handle_date(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    datetime_text = get_current_datetime()
    await message.answer(datetime_text)

@dp.message(F.text == "‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
async def handle_time(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    from datetime import datetime
    time_text = f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
    await message.answer(time_text)

@dp.message(F.text == "üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def handle_calculator(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    await message.answer("üî¢ –ù–∞–ø–∏—à–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:\n–ü—Ä–∏–º–µ—Ä: 2+2*3 –∏–ª–∏ (5+3)/2")

@dp.message(F.text == "üéÅ –°—é—Ä–ø—Ä–∏–∑")
async def handle_surprise(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    surprise = get_random_surprise()
    await message.answer(surprise)

@dp.message(F.text == "üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
async def handle_random_number(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    number = random.randint(1, 100)
    await message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {number}")

@dp.message(F.text == "üí° –ò–¥–µ—è –¥–Ω—è")
async def handle_idea(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    ideas = [
        "üí° –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É —Å–µ–≥–æ–¥–Ω—è",
        "üåü –°–¥–µ–ª–∞–π –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ –¥–ª—è –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞",
        "üéØ –ü–æ—Å—Ç–∞–≤—å —Å–µ–±–µ –º–∞–ª–µ–Ω—å–∫—É—é —Ü–µ–ª—å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ –µ—ë",
        "üìö –ü—Ä–æ—á–∏—Ç–∞–π –≥–ª–∞–≤—É –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–∏",
        "üé® –í—ã—Ä–∞–∑–∏ —Å–µ–±—è —á–µ—Ä–µ–∑ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
        "üí™ –°–¥–µ–ª–∞–π –Ω–µ–±–æ–ª—å—à—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        "üåø –ü—Ä–æ–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ"
    ]
    await message.answer(random.choice(ideas))

@dp.message(F.text == "üé≠ –†–µ–∂–∏–º—ã AI")
async def handle_modes(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
    remaining = get_user_remaining_requests(chat_id, current_mode)
    
    mode_text = (
        f"üé≠ –ì–∞–ª–µ—Ä–µ—è —Ä–µ–∂–∏–º–æ–≤\n\n"
        f"–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: {get_mode_description(current_mode)}\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:")
    
    await message.answer(mode_text,
                         reply_markup=get_mode_keyboard())

@dp.message(F.text.in_(["üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15)", "üí¨ –û–±—ã—á–Ω—ã–π (10)", "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13)", "üß† –£–º–Ω—ã–π (3)"]))
async def handle_mode_selection(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    text = str(message.text or "")

    mode_mapping = {
        "üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15)": "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "üí¨ –û–±—ã—á–Ω—ã–π (10)": "–æ–±—ã—á–Ω—ã–π", 
        "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13)": "–∫–æ—Ä–æ—Ç–∫–∏–π",
        "üß† –£–º–Ω—ã–π (3)": "—É–º–Ω—ã–π"
    }

    new_mode = mode_mapping.get(text, "–æ–±—ã—á–Ω—ã–π")
    user_modes[chat_id] = new_mode

    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    if new_mode not in user_requests_count[chat_id]:
        user_requests_count[chat_id][new_mode] = 0

    remaining = get_user_remaining_requests(chat_id, new_mode)

    success_text = (
        f"‚ú® –†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω\n\n"
        f"{get_mode_description(new_mode)}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n\n"
        "–ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    
    await message.answer(success_text,
                         reply_markup=get_settings_keyboard())

@dp.message(F.text == "üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è")
async def handle_style_menu(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    style_text = (
        f"üé® –ü–∞–ª–∏—Ç—Ä–∞ —Å—Ç–∏–ª–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:")
    
    await message.answer(style_text,
                         reply_markup=get_style_keyboard())

@dp.message(F.text.in_(["üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "üéØ –î–µ–ª–æ–≤–æ–π", "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π"]))
async def handle_style_selection(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    text = str(message.text or "")

    style_mapping = {
        "üí´ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π": "friendly",
        "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π": "balanced",
        "üéØ –î–µ–ª–æ–≤–æ–π": "serious", 
        "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π": "creative"
    }

    new_style = style_mapping.get(text, "balanced")
    chat_style[chat_id] = new_style

    success_text = (
        f"üé® –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏ –∑–∞–∏–≥—Ä–∞—é—Ç –Ω–æ–≤—ã–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏")
    
    await message.answer(success_text,
                         reply_markup=get_settings_keyboard())

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    chat_id = message.chat.id
    current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
    used = user_requests_count.get(chat_id, {}).get(current_mode, 0)
    remaining = get_user_remaining_requests(chat_id, current_mode)
    
    stats_text = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    await message.answer(stats_text)

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    info_text = (
        "üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–µ–∂–∏–º –∏–º–µ–µ—Ç —Å–≤–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø\n\n"
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã:\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞—é 24/7 –≤ –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≥–ª—É–±–æ–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞\n"
        "‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è")
    
    await message.answer(info_text)

@dp.message(F.text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞")
async def handle_weather_menu(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    weather_text = (
        "üå§Ô∏è –ú–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥—ã\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
    
    await message.answer(weather_text,
                         reply_markup=get_weather_keyboard())

@dp.message(F.text.in_(["üèôÔ∏è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "üèõÔ∏è –ú–æ—Å–∫–≤–∞", "üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]))
async def handle_weather_city(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    city_mapping = {
        "üèôÔ∏è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
        "üèõÔ∏è –ú–æ—Å–∫–≤–∞": "–ú–æ—Å–∫–≤–∞",
        "üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    }
    
    city = city_mapping.get(message.text, message.text)
    weather = await get_weather(city)
    await message.answer(weather,
                         reply_markup=get_main_keyboard(message.chat.id))

@dp.message(F.text == "üìç –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
async def handle_other_city(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    await message.answer("üåç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
        
    admin_text = (
        "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –æ–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "‚Ä¢ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ ‚Äî –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏\n"
        "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞–º–∏\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –õ–æ–≥–∏ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–æ–≤")
    
    await message.answer(admin_text,
                         reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_admin_stats(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        return
        
    total_users = len(user_requests_count)
    total_requests = sum(sum(mode.values()) for mode in user_requests_count.values())
    
    stats_text = (
        f"üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üì® –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        f"üé≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤: {len(user_modes)}\n"
        f"üíæ –ü–∞–º—è—Ç—å —á–∞—Ç–æ–≤: {len(chat_memory)}")
    
    await message.answer(stats_text)

@dp.message(F.text == "üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤")
async def handle_reset_limits(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        return
        
    user_requests_count.clear()
    await message.answer("‚úÖ –õ–∏–º–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã")

@dp.message(F.text == "üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI")
async def handle_ai_management(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        return
        
    ai_text = (
        "üß† –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Mistral\n"
        "‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã AI ‚Äî —Ç–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
        "‚Ä¢ –ü—Ä–æ–º–ø—Ç—ã ‚Äî —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    
    await message.answer(ai_text,
                         reply_markup=get_ai_management_keyboard())

@dp.message(F.text == "üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
async def handle_model_settings(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        return
        
    settings_text = (
        "üéõÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏\n\n"
        f"–ú–æ–¥–µ–ª—å: {model}\n"
        f"API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if mistral_api_key else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"–°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è: {len(chat_style)}\n"
        f"–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã: {len(USER_LIMITS)}")
    
    await message.answer(settings_text)

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def handle_users_management(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        return
        
    users_text = (
        f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_requests_count)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(user_modes)}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {sum(sum(mode.values()) for mode in user_requests_count.values())}")
    
    await message.answer(users_text)

@dp.message(F.text == "‚ö° –°–∏—Å—Ç–µ–º–∞")
async def handle_system_info(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        return
        
    system_text = (
        "‚ö° –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway\n"
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 24/7\n"
        "–í–µ—Ä—Å–∏—è AI: Mistral Large\n"
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ")
    
    await message.answer(system_text)

@dp.message(F.text == "üìä –õ–æ–≥–∏")
async def handle_logs(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        return
        
    logs_text = (
        "üìä –ñ—É—Ä–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        "‚Ä¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "‚Ä¢ AI –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n"
        "‚Ä¢ –ü–æ–≥–æ–¥–Ω—ã–π API –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã\n\n"
        "–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚úÖ")
    
    await message.answer(logs_text)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                         reply_markup=get_main_keyboard(message.chat.id))

@dp.message(F.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=get_main_keyboard(message.chat.id))

@dp.message(F.text == "‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_back_to_admin(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.chat.id != ADMIN_ID:
        return
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                         reply_markup=get_admin_keyboard())

# =======================
# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –ò –§–û–¢–û =====
# =======================
@dp.message(F.voice)
async def handle_voice(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è\n\n–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    cooldown_msg = check_cooldown(message.chat.id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    if message.caption and any(word in message.caption.lower() for word in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–æ–¥", "translate", "—á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ"]):
        await message.answer("üñºÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
    else:
        await message.answer("üì∏ –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è\n\n–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å")

# =======================
# ===== –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–† =====
# =======================
@dp.message()
async def main_handler(message: types.Message):
    chat_id = message.chat.id
    user_text = (message.text or "").strip()
    style = chat_style.get(chat_id, "balanced")
    mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")

    if not user_text:
        return

    if user_text.startswith("/"):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    cooldown_msg = check_cooldown(chat_id)
    if cooldown_msg:
        await message.answer(cooldown_msg)
        return

    # –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã –±–µ–∑ –ª–∏–º–∏—Ç–∞)
    if chat_id != ADMIN_ID:
        if chat_id not in user_requests_count:
            user_requests_count[chat_id] = {}
        if mode not in user_requests_count[chat_id]:
            user_requests_count[chat_id][mode] = 0

        remaining = get_user_remaining_requests(chat_id, mode)

        if remaining <= 0:
            await message.answer(
                f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω\n\n"
                f"–†–µ–∂–∏–º: {mode}\n"
                f"–õ–∏–º–∏—Ç: {USER_LIMITS[mode]} –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return

        user_requests_count[chat_id][mode] += 1

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
    if "–≤—ã–±–µ—Ä–∏" in user_text.lower() and any(sep in user_text for sep in [",", "–∏–ª–∏"]):
        choice_text = user_text.lower().replace("–≤—ã–±–µ—Ä–∏", "").strip()
        result = get_random_choice(choice_text)
        await message.answer(result)
        return

    if any(word in user_text.lower() for word in ["–ø–æ—Å—á–∏—Ç–∞–π", "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "="]):
        expr = user_text.lower().replace("–ø–æ—Å—á–∏—Ç–∞–π", "").replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "").replace("=", "").strip()
        result = calculate_expression(expr)
        await message.answer(result)
        return

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    user_text_lower = user_text.lower().strip()

    if user_text_lower in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ —Å–≤—è–∑–∏"]:
        await message.answer(random.choice(SPECIAL_RESPONSES["–ø–æ–∫–∞"]))
        return

    special_found = False
    for key, values in SPECIAL_RESPONSES.items():
        if key in user_text_lower and key != "–ø–æ–∫–∞":
            await message.answer(random.choice(values))
            special_found = True
            break

    if special_found:
        return

    # –ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
    if any(word in user_text_lower for word in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]):
        city = user_text_lower
        for w in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–≤", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–π"]:
            city = city.replace(w, "").strip()
        city = city.replace(",", "").strip()

        if not city:
            await message.answer("‚ùì –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞'")
            return

        weather = await get_weather(city)
        await message.answer(weather)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω
    if any(word in user_text_lower for word in ["–≤–∞—Ä–∏–∞–Ω—Ç", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ä—É–±–ª", "‚ÇΩ"]) and any(sep in user_text for sep in ["-", "–¥–æ"]):
        if "–≤–∞—Ä–∏–∞–Ω—Ç" in user_text_lower:
            options = []
            for i in range(1, 8):
                price = random.randint(100, 5000)
                options.append(f"{i}. {price} ‚ÇΩ")
            response = "üíé –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω:\n\n" + "\n".join(options)
            await message.answer(response)
            return

    # –û–±—â–µ–Ω–∏–µ —Å AI
    try:
        system_prompts = {
            "—Å–ø–æ–∫–æ–π–Ω—ã–π": "–¢—ã —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ –∫—Ä–∞—Ç–∫–æ. –ú–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
            "–æ–±—ã—á–Ω—ã–π": "–¢—ã —É–º–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π. 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
            "–∫–æ—Ä–æ—Ç–∫–∏–π": "–¢—ã –º–∞—Å—Ç–µ—Ä –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—Ç—å. 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
            "—É–º–Ω—ã–π": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫. –î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω. 5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º."
        }

        system_prompt = system_prompts.get(mode, "–¢—ã —É–º–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–æ –∫—Ä–∞—Ç–∫–æ.")
        user_content = user_text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-—Å–æ–æ–±—â–µ–Ω–∏–π
        if message.reply_to_message and message.reply_to_message.text:
            replied_text = message.reply_to_message.text

            if any(w in user_text_lower for w in [
                    "–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å", "—É–ª—É—á—à–∏—Ç—å", "—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å", "–ø–æ–∫—Ä—É—á–µ",
                    "–ø–æ—Å–æ–≤–µ—Ç—É–π", "–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–≤–µ—Ä—Å–∏–∏"
            ]):
                system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤. –ü—Ä–µ–¥–ª–æ–∂–∏ 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º."
                user_content = f"–ü—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {replied_text}"

            elif any(w in user_text_lower for w in ["—Å–æ–∫—Ä–∞—Ç–∏", "—Å–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ", "—É–∫–æ—Ä–æ—Ç–∏", "–∫—Ä–∞—Ç–∫–æ", "–∫–æ—Ä–æ—á–µ"]):
                system_prompt = "–¢—ã –º–∞—Å—Ç–µ—Ä —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤. –°–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–æ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å."
                user_content = f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {replied_text}"

            elif any(w in user_text_lower for w in [
                    "–Ω–æ—Ä–º–∞–ª—å–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–∏—Å–ø—Ä–∞–≤–∏—Ç—å", "–º–Ω–µ–Ω–∏–µ",
                    "—á—Ç–æ –¥—É–º–∞–µ—à—å", "–∫—Ä–∏—Ç–∏–∫–∞", "—Å–æ–≤–µ—Ç"
            ]):
                system_prompt = "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –î–∞–π –∫—Ä–∞—Ç–∫—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Ç–µ–∫—Å—Ç—É."
                user_content = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {replied_text}. –í–æ–ø—Ä–æ—Å: {user_text}"

        response = client.chat.complete(model=model,
                                        messages=[{
                                            "role": "system",
                                            "content": system_prompt
                                        }, {
                                            "role": "user", 
                                            "content": user_content
                                        }])
        ai_text = response.choices[0].message.content

        if not ai_text:
            ai_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"

        await send_long_message(message, str(ai_text), style, mode)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {e}")
        await message.answer("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

# =======================
# ===== RUN BOT =========
# =======================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –Ω–∞ Railway!")
    print("‚è≥ –°–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è: 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    asyncio.run(main())
