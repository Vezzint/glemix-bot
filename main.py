import asyncio
import logging
import random
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
from typing import Dict, Any
import os
from mistralai import Mistral

# =======================
# ===== CONFIG ==========
# =======================
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
mistral_api_key = os.getenv('MISTRAL_API_KEY', 'nIMvGkfioIpMtQeSO2n8ssm6nuJRyo7Q')
openweather_api_key = os.getenv('OPENWEATHER_API_KEY', 'dbd08a834f628d369a8edb55b210171e')
TOKEN = os.getenv('BOT_TOKEN', '8229856813:AAEkQq-4zdJKAmovgq69URcqKDzN4_BMqrw')

ADMIN_ID = 6584350034

# –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
USER_LIMITS = {"–∫–æ—Ä–æ—Ç–∫–∏–π": 13, "–æ–±—ã—á–Ω—ã–π": 10, "—Å–ø–æ–∫–æ–π–Ω—ã–π": 15, "—É–º–Ω—ã–π": 3}

model = "mistral-large-latest"
client = Mistral(api_key=mistral_api_key)

chat_style: Dict[int, str] = {}
chat_memory: Dict[int, Dict[str, Any]] = {}
user_requests_count: Dict[int, Dict[str, int]] = {}
user_last_messages: Dict[int, str] = {}
user_modes: Dict[int, str] = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =======================
# ===== EMOJIS ==========
# =======================
emojis = {
    "friendly": ["üí°", "üëç", "üëå", "üéØ", "‚ö°", "üîç", "üí´", "üåü"],
    "serious": ["üí≠", "üìö", "üéØ", "‚ö°", "üîç", "üìä", "üí°", "üéì"],
    "balanced": ["üí°", "üëç", "üéØ", "‚ö°", "üí´", "üåü", "üîç"]
}

def get_emoji(style: str = "balanced") -> str:
    return random.choice(emojis.get(style, emojis["balanced"]))

# =======================
# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
# =======================
def get_main_keyboard(chat_id: int) -> ReplyKeyboardMarkup:
    buttons = [[
        KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç"),
        KeyboardButton(text="‚ÑπÔ∏è –û–±–æ –º–Ω–µ")
    ],
               [
                   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                   KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
                   KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞")
               ]]
    if chat_id == ADMIN_ID:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω")])
    return ReplyKeyboardMarkup(keyboard=buttons,
                               resize_keyboard=True,
                               input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")

def get_settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üé≠ –†–µ–∂–∏–º—ã"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                               resize_keyboard=True)

def get_mode_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15)"),
            KeyboardButton(text="üí¨ –û–±—ã—á–Ω—ã–π (10)")
        ],
                  [
                      KeyboardButton(text="‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13)"),
                      KeyboardButton(text="üß† –£–º–Ω—ã–π (3)")
                  ], [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True)

def get_weather_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"),
        KeyboardButton(text="–ú–æ—Å–∫–≤–∞")
    ], [
        KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
        KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    ]],
                               resize_keyboard=True)

# =======================
# ===== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ =====
# =======================
SPECIAL_RESPONSES = {
    "–∫—Ç–æ —Ç—ã": "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ Mistral AI! ü§ñ‚ú®",
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä",
    "–∫–∞–∫ –¥–µ–ª–∞": "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞—é 24/7 –Ω–∞ Railway! üí™",
    "—Å–ø–∞—Å–∏–±–æ": "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! ‚ù§Ô∏è",
    "–ø–æ–∫–∞": "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! üëã",
    "—à—É—Ç–∫–∞": "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤—Å–µ–≥–¥–∞ —Ö–æ–¥–∏—Ç –≤ –¥—É—à —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –Ω—É–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º step by step! üòÑ"
}

def get_mode_description(mode: str) -> str:
    descriptions = {
        "—Å–ø–æ–∫–æ–π–Ω—ã–π": "üßò –°–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º (15 –∑–∞–ø—Ä–æ—Å–æ–≤)",
        "–æ–±—ã—á–Ω—ã–π": "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (10 –∑–∞–ø—Ä–æ—Å–æ–≤)", 
        "–∫–æ—Ä–æ—Ç–∫–∏–π": "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∂–∏–º (13 –∑–∞–ø—Ä–æ—Å–æ–≤)",
        "—É–º–Ω—ã–π": "üß† –£–º–Ω—ã–π —Ä–µ–∂–∏–º (3 –∑–∞–ø—Ä–æ—Å–∞)"
    }
    return descriptions.get(mode, "üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")

def get_user_remaining_requests(chat_id: int, mode: str) -> int:
    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    if mode not in user_requests_count[chat_id]:
        user_requests_count[chat_id][mode] = 0
    return USER_LIMITS[mode] - user_requests_count[chat_id][mode]

# =======================
# ===== –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í =====
# =======================
def format_ai_response(text: str, style: str, mode: str) -> str:
    emoji = get_emoji(style)
    formatted = text.strip()

    if mode == "–∫–æ—Ä–æ—Ç–∫–∏–π":
        sentences = formatted.split('. ')
        if len(sentences) > 2:
            formatted = '. '.join(sentences[:2]) + '.'
    elif mode == "—Å–ø–æ–∫–æ–π–Ω—ã–π":
        calm_emojis = ["üåø", "üçÉ", "üåº", "üå∏", "üíÆ", "ü™∑"]
        if random.random() > 0.7:
            formatted = f"{random.choice(calm_emojis)} {formatted}"

    return f"{emoji} {formatted}"

async def send_long_message(message: types.Message, text: str, style: str = "balanced", mode: str = "–æ–±—ã—á–Ω—ã–π", chunk_size: int = 4000):
    formatted = format_ai_response(text, style, mode)
    for i in range(0, len(formatted), chunk_size):
        try:
            await message.answer(formatted[i:i + chunk_size])
        except TelegramBadRequest:
            await message.answer(text[i:i + chunk_size])

# =======================
# ===== –ü–û–ì–û–î–ê =====
# =======================
async def get_weather(city: str) -> str:
    city_clean = city.strip()
    if not city_clean:
        return "‚ùì –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'"

    city_mapping = {
        "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
        "–º–æ—Å–∫–≤–∞": "Moscow", 
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
        "—Å–ø–±": "Saint Petersburg",
        "–ø–∏—Ç–µ—Ä": "Saint Petersburg"
    }

    api_city = city_mapping.get(city_clean.lower(), city_clean)

    url = f"http://api.openweathermap.org/data/2.5/weather?q={api_city}&appid={openweather_api_key}&units=metric&lang=ru"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city_clean}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
                data = await resp.json()
                temp = data["main"]["temp"]
                feels = data["main"]["feels_like"]
                desc = data["weather"][0]["description"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                return (f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city_clean.title()}:\n"
                        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels}¬∞C\n"
                        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city_clean}'."

# =======================
# ===== –ö–û–ú–ê–ù–î–´ =========
# =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    chat_style[chat_id] = "balanced"
    user_modes[chat_id] = "–æ–±—ã—á–Ω—ã–π"

    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    for mode in USER_LIMITS.keys():
        if mode not in user_requests_count[chat_id]:
            user_requests_count[chat_id][mode] = 0

    current_mode = user_modes[chat_id]
    remaining = get_user_remaining_requests(chat_id, current_mode)

    welcome_text = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* üåü\n\n"
        "–Ø - —Ç–≤–æ–π Telegram –±–æ—Ç —Å Mistral AI, —Ä–∞–±–æ—Ç–∞—é—â–∏–π 24/7 –Ω–∞ Railway!\n\n"
        f"üìä *–†–µ–∂–∏–º:* {get_mode_description(current_mode)}\n"
        f"üîÑ *–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤:* {remaining}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá")

    await message.answer(welcome_text,
                         reply_markup=get_main_keyboard(chat_id))

@dp.message(F.text.in_(["üöÄ –°—Ç–∞—Ä—Ç", "‚ÑπÔ∏è –û–±–æ –º–Ω–µ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å", "üå§ –ü–æ–≥–æ–¥–∞", "üëë –ê–¥–º–∏–Ω"]))
async def handle_main_buttons(message: types.Message):
    text = message.text
    chat_id = message.chat.id

    if text == "üå§ –ü–æ–≥–æ–¥–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã:",
                             reply_markup=get_weather_keyboard())
    elif text == "üöÄ –°—Ç–∞—Ä—Ç":
        await cmd_start(message)
    elif text == "‚ÑπÔ∏è –û–±–æ –º–Ω–µ":
        about_text = ("ü§ñ *–û–±–æ –º–Ω–µ*\n\n"
                      "–Ø - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ Mistral AI! üöÄ\n\n"
                      "üåü *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:*\n"
                      "‚Ä¢ üßò –°–ø–æ–∫–æ–π–Ω—ã–π - 15 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                      "‚Ä¢ üí¨ –û–±—ã—á–Ω—ã–π - 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                      "‚Ä¢ ‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π - 13 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                      "‚Ä¢ üß† –£–º–Ω—ã–π - 3 –∑–∞–ø—Ä–æ—Å–∞\n\n"
                      "–†–∞–±–æ—Ç–∞—é 24/7 –Ω–∞ Railway! ‚ú®")
        await message.answer(about_text,
                             reply_markup=get_main_keyboard(chat_id))
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", 
                             reply_markup=get_settings_keyboard())
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
        remaining = get_user_remaining_requests(chat_id, current_mode)
        help_text = ("‚ùì *–ü–æ–º–æ—â—å*\n\n"
                     "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ —è –æ—Ç–≤–µ—á—É!\n"
                     "–¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
                     "‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n" 
                     "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–æ–≤\n"
                     "‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                     f"üìä –¢–≤–æ–π —Ä–µ–∂–∏–º: {current_mode}\n"
                     f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}")
        await message.answer(help_text,
                             reply_markup=get_main_keyboard(chat_id))
    elif text == "üëë –ê–¥–º–∏–Ω" and chat_id == ADMIN_ID:
        await message.answer("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
                            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                            "/reset - —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö",
                            reply_markup=get_main_keyboard(chat_id))

@dp.message(F.text.in_(["üé≠ –†–µ–∂–∏–º—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
async def handle_settings_buttons(message: types.Message):
    text = message.text
    chat_id = message.chat.id

    if text == "üé≠ –†–µ–∂–∏–º—ã":
        current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
        remaining = get_user_remaining_requests(chat_id, current_mode)
        mode_text = (f"üé≠ –¢–≤–æ–π —Ä–µ–∂–∏–º: {get_mode_description(current_mode)}\n"
                    f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n\n"
                    "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º:")
        await message.answer(mode_text,
                             reply_markup=get_mode_keyboard())
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        current_mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")
        used = user_requests_count.get(chat_id, {}).get(current_mode, 0)
        stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                     f"‚Ä¢ –†–µ–∂–∏–º: {current_mode}\n"
                     f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}\n"
                     f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {get_user_remaining_requests(chat_id, current_mode)}")
        await message.answer(stats_text)

@dp.message(F.text.in_(["üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15)", "üí¨ –û–±—ã—á–Ω—ã–π (10)", "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13)", "üß† –£–º–Ω—ã–π (3)"]))
async def handle_mode_buttons(message: types.Message):
    chat_id = message.chat.id
    text = str(message.text or "")

    mode_mapping = {
        "üßò –°–ø–æ–∫–æ–π–Ω—ã–π (15)": "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "üí¨ –û–±—ã—á–Ω—ã–π (10)": "–æ–±—ã—á–Ω—ã–π", 
        "‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π (13)": "–∫–æ—Ä–æ—Ç–∫–∏–π",
        "üß† –£–º–Ω—ã–π (3)": "—É–º–Ω—ã–π"
    }

    new_mode = mode_mapping.get(text, "–æ–±—ã—á–Ω—ã–π")
    user_modes[chat_id] = new_mode

    if chat_id not in user_requests_count:
        user_requests_count[chat_id] = {}
    if new_mode not in user_requests_count[chat_id]:
        user_requests_count[chat_id][new_mode] = 0

    remaining = get_user_remaining_requests(chat_id, new_mode)

    success_text = (f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {get_mode_description(new_mode)}\n"
                   f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}")
    await message.answer(success_text,
                         reply_markup=get_settings_keyboard())

@dp.message(F.text.in_(["–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]))
async def send_weather_city(message: types.Message):
    try:
        city = str(message.text)
        weather = await get_weather(city)
        await message.answer(weather,
                             reply_markup=get_main_keyboard(message.chat.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_weather_city: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã",
                             reply_markup=get_main_keyboard(message.chat.id))

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                         reply_markup=get_main_keyboard(message.chat.id))

# =======================
# ===== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ====
# =======================
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if message.chat.id != ADMIN_ID:
        return
        
    total_users = len(user_requests_count)
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
    await message.answer(stats_text)

@dp.message(Command("reset"))
async def cmd_reset(message: types.Message):
    if message.chat.id != ADMIN_ID:
        return
        
    user_requests_count.clear()
    user_modes.clear()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")

# =======================
# ===== –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–† =====
# =======================
@dp.message()
async def main_handler(message: types.Message):
    chat_id = message.chat.id
    user_text = (message.text or "").strip()
    style = chat_style.get(chat_id, "balanced")
    mode = user_modes.get(chat_id, "–æ–±—ã—á–Ω—ã–π")

    if not user_text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    if user_text.startswith("/"):
        return

    # –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã –±–µ–∑ –ª–∏–º–∏—Ç–∞)
    if chat_id != ADMIN_ID:
        if chat_id not in user_requests_count:
            user_requests_count[chat_id] = {}
        if mode not in user_requests_count[chat_id]:
            user_requests_count[chat_id][mode] = 0

        remaining = get_user_remaining_requests(chat_id, mode)

        if remaining <= 0:
            await message.answer(
                f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!\n\n"
                f"–†–µ–∂–∏–º: {mode}\n"
                f"–õ–∏–º–∏—Ç: {USER_LIMITS[mode]} –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                "‚ö° –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
            return

        user_requests_count[chat_id][mode] += 1

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    user_text_lower = user_text.lower().strip()

    if user_text_lower in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ —Å–≤—è–∑–∏"]:
        await message.answer("–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! üëã")
        return

    special_found = False
    for key, value in SPECIAL_RESPONSES.items():
        if key in user_text_lower and key != "–ø–æ–∫–∞":
            await message.answer(value)
            special_found = True
            break

    if special_found:
        return

    # –ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
    if any(word in user_text_lower for word in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]):
        city = user_text_lower
        for w in ["–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥—É", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–≤", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–π"]:
            city = city.replace(w, "").strip()
        city = city.replace(",", "").strip()

        if not city:
            await message.answer("‚ùì –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞'")
            return

        weather = await get_weather(city)
        await message.answer(weather)
        return

    # –û–±—â–µ–Ω–∏–µ —Å AI
    try:
        system_prompts = {
            "—Å–ø–æ–∫–æ–π–Ω—ã–π": "–¢—ã —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.",
            "–æ–±—ã—á–Ω—ã–π": "–¢—ã —É–º–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–∞—Ö.",
            "–∫–æ—Ä–æ—Ç–∫–∏–π": "–¢—ã –º–∞—Å—Ç–µ—Ä –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—Ç—å.",
            "—É–º–Ω—ã–π": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–∞–≤–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã."
        }

        system_prompt = system_prompts.get(mode, "–¢—ã —É–º–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫.")
        user_content = user_text

        response = client.chat.complete(model=model,
                                        messages=[{
                                            "role": "system",
                                            "content": system_prompt
                                        }, {
                                            "role": "user", 
                                            "content": user_content
                                        }])
        ai_text = response.choices[0].message.content

        if not ai_text:
            ai_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"

        await send_long_message(message, str(ai_text), style, mode)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {e}")
        await message.answer("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# =======================
# ===== RUN BOT =========
# =======================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –Ω–∞ Railway!")
    asyncio.run(main())
